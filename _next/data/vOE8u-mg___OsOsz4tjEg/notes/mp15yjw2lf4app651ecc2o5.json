{"pageProps":{"note":{"id":"mp15yjw2lf4app651ecc2o5","title":"Demystifying Fresh — Build Your own Islands of Interactivity","desc":"","updated":1675305025251,"created":1675304841167,"custom":{},"fname":"dev.javascript.demystifying-fresh-building-your-own-islands-of-interactivity","type":"note","vault":{"fsPath":"vault"},"contentHash":"80029ac71489802dfef6f43a7e37598f","links":[],"anchors":{"understanding-islands":{"type":"header","text":"Understanding Islands","value":"understanding-islands","line":20,"column":0,"depth":2},"creating-our-server-side-rendered-site":{"type":"header","text":"Creating our server-side rendered site","value":"creating-our-server-side-rendered-site","line":46,"column":0,"depth":2},"the-main-app-component":{"type":"header","text":"The main App component","value":"the-main-app-component","line":118,"column":0,"depth":2},"the-dynamic-list-component":{"type":"header","text":"The dynamic List component","value":"the-dynamic-list-component","line":139,"column":0,"depth":2},"the-behavior-of-our-island-class":{"type":"header","text":"The behavior of our Island class","value":"the-behavior-of-our-island-class","line":190,"column":0,"depth":2}},"children":[],"parent":"IowIScQvzEu3KQ4dvwPTt","data":{}},"body":"<h1 id=\"demystifying-fresh--build-your-own-islands-of-interactivity\">Demystifying Fresh — Build Your own Islands of Interactivity<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#demystifying-fresh--build-your-own-islands-of-interactivity\"></a></h1>\n<blockquote>\n<p><a href=\"https://blog.bitsrc.io/demystifying-fresh-building-your-own-islands-of-interactivity-4b774cc30393\">https://blog.bitsrc.io/demystifying-fresh-building-your-own-islands-of-interactivity-4b774cc30393</a></p>\n</blockquote>\n<p>The concept of “Islands of interactivity” is a very interesting one, because it poses the premise that the website should only send interactive code to the browser when it’s absolutely needed.</p>\n<p>Otherwise, the rest of the HTML should be rendered statically on the server.</p>\n<p>This helps speed things up and provides a faster experience for users. But so far, we’ve only seen a few frameworks implement this architecture, Fresh being one of the main ones, but Astro, for example, also has this concept even though they don’t make a lot of noise about it.</p>\n<p>In this article I’m going to show you a way to implement this method using Preact, the React-like library with a tiny footprint. I’m also going to be using Express to build the server and something called “importmaps”, which if you haven’t heard about it yet, it’ll blow your mind.</p>\n<p>So keep reading!</p>\n<h2 id=\"understanding-islands\">Understanding Islands<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#understanding-islands\"></a></h2>\n<p>The first thing to understand is that “islands” are nothing more than components that need to be rendered on the client side within the context of a server-side rendered website.</p>\n<p>In other words, in a sea of static code, we have an interactive island (see what I did there?).</p>\n<p>I’ve written about <a href=\"https://blog.bitsrc.io/islands-of-interactivity-what-are-they-and-why-is-fresh-using-them-1806fc67a07\">the islands of interactivity design pattern</a> in the past, so if you want to know more, check it out.</p>\n<p>But at this point, all you need to care about, is that we’re going to build a server-side rendered site and inside it, we’ll add a component that because it provides interactivity, will need to be rendered on the client side.</p>\n<p>If you think about it like that, it’s not that complicated of a concept, is it?</p>\n<p>The problem lies in the fact that splitting these two worlds (the server-side rendered one, and the dynamic one) is not that easy.</p>\n<p>The following GIF shows you what we’re going to build:</p>\n<p><img src=\"https://miro.medium.com/max/700/1*kxs_BmfQBXEvhePjRGa8_A.gif\"></p>\n<p>And the following screenshot shows you where the static part ends and where the island begins:</p>\n<p><img src=\"https://miro.medium.com/max/700/1*Dcj3jJTZF-xUGMSLTdBOfw.png\"></p>\n<p>Don’t worry about the code on the island part, we’ll look at it in more detail in a second. The screenshot is to show you that indeed, we have a server-side rendered base site, that adds a bit of JS when required.</p>\n<p>Let’s look at the implementation now.</p>\n<h2 id=\"creating-our-server-side-rendered-site\">Creating our server-side rendered site<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#creating-our-server-side-rendered-site\"></a></h2>\n<p>For this task, we’re going to be using Express, since it’s still one of the most popular choices for creating barebone web servers.</p>\n<p>This server is going to render the base static template for our site, and it’ll also render the base <code>App</code> component.</p>\n<p>For the <code>App</code> component, we’re going to use Preact.</p>\n<p>BTW, I’m using Node 19 for this example, and it all works as long as I keep the file extensions under control. This means that our server is actually going to be called <code>server.cjs</code> because it’s going to use <code>require</code> statements:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> compression <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"compression\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> render <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"preact-render-to-string\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> html <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"htm/preact\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// use the provided preact binding</span>\n\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cors\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> <span class=\"token maybe-class-name\">App</span> <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./components/App.js\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token maybe-class-name\">App</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">App</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">default</span>\n\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token html language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token maybe-class-name\">App</span><span class=\"token interpolation-punctuation punctuation\">}</span></span></span> <span class=\"token punctuation\">/></span></span> </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// create the express app</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">compression</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// use gzip for all requests</span>\n\n  <span class=\"token comment\">// some basic html to show</span>\n  <span class=\"token keyword\">const</span> layout <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  &#x3C;!DOCTYPE html>\n  &#x3C;html>\n    &#x3C;head>\n      &#x3C;script type=\"importmap\">\n      { \n        \"imports\": {\n          \"preact\": \"//unpkg.com/preact?module\",\n          \"htm/preact\": \"//unpkg.com/htm/preact/index.mjs?module\",\n          \"preact-render-to-string\": \"//cdn.skypack.dev/preact-render-to-string\"\n        }\n      }\n      &#x3C;/script>\n    &#x3C;/head>\n    &#x3C;body>\n      </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>body<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\n    &#x3C;/body>\n  &#x3C;/html>\n</span><span class=\"token template-punctuation string\">`</span></span>\n  app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// listen for requests to the root path</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span>layout<span class=\"token punctuation\">)</span> <span class=\"token comment\">// send the HTML string</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// listen for requests on port 3000</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>There are several things to unpack here:</p>\n<ol>\n<li>The server is sending static HTML back on the <code>/</code> route.</li>\n<li>That HTML has a <code>script</code> tag of type “importmap”, this map tells the browser where to get these imports from. So I can write <code>import {Component} from 'preact'</code> and the browser will know to get this library from <code>\"http://unpkg.com/preact?module\"</code> . <strong>And at the same</strong> <strong>time</strong>, the same code works on the server, because I already have Preact installed as a dependency.</li>\n<li>That HTML also has the content of the <code>body</code> variable, which contains HTML. That HTML comes from calling the <code>render</code> function (line 14) from “preact-render-to-string”. This function renders a VNode and returns the HTML as a string. The VNode we’re rendering is the main App component. We can write it like that, because we’re also using the <code>html</code> function from <code>htm/preact</code> which helps us write code that looks very much like JSX and call our components by name (see line 15).</li>\n<li>I’m setting the <code>src</code> folder as my static files folder, because I’ll be doing <code>import</code> statements in my browser-land JavaScript, and that’s where all my source code files are located (more on this in a minute).</li>\n</ol>\n<p>And that’s about it for our server. To summarize, we’re taking the <code>App</code> component and rendering it into a string, which we then concatenate to our main HTML template and return that final string from the server.</p>\n<p>As part of that template HTML, we’re sending back an importmap for the browser to know where to get the packages that we reference when we use the <code>import</code> statement (we’ll use those in a minute).</p>\n<p>Let’s take a look at our components now.</p>\n<h2 id=\"the-main-app-component\">The main App component<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-main-app-component\"></a></h2>\n<p>The main application, as I already mentioned, is static, so our component is simply going to print some text out and insert the dynamic one.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> html <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"htm/preact\"</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">List</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./List.js\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">PreactApp</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token html language-html\">\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h1</span><span class=\"token punctuation\">></span></span>This is a static component<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h1</span><span class=\"token punctuation\">></span></span>\n    But the following list is dynamic...\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token maybe-class-name\">List</span><span class=\"token interpolation-punctuation punctuation\">}</span></span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>List of items<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">PreactApp</span>\n</code></pre>\n<p>Once again, I’m making use of the <code>html</code> function to parse my code and make sure I properly render the <code>List</code> component.</p>\n<h2 id=\"the-dynamic-list-component\">The dynamic List component<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-dynamic-list-component\"></a></h2>\n<p>This one is interesting, because instead of being a functional component, I chose to use a class for it.</p>\n<p>Why a class component? Because they allow you to use the lifecycle method and change the way they’re rendered, while I could find a way to do the same thing with functional components (if you know of a way to do this, please share it in the comments, I’d love to know).</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">Island</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./Island.js\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Island</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> items<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">handleInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> textField <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enter-text\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> newItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">,</span> textField<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> items<span class=\"token operator\">:</span> newItems <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">html</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token html language-html\">\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>enter-text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">onClick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value javascript language-javascript\"><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">handleInput</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">bind</span><span class=\"token punctuation\">(</span>\n              <span class=\"token keyword\">this</span>\n            <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span></span></span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Add item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>props<span class=\"token punctuation\">.</span><span class=\"token property-access\">title</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h2</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>ul</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token comment\">&#x3C;!-- loop over data array --></span>\n            <span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">state</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">items</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>\n              <span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">html</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token html language-html\">\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">&#x3C;!-- render out each item --></span>\n                <span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>li</span><span class=\"token punctuation\">></span></span>\n            </span><span class=\"token template-punctuation string\">`</span></span>\n            <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">List</span>\n</code></pre>\n<p>At a first glance, there is nothing too special about this component. It’s your standard class component except for one minor detail (maybe not so minor now that I think about it): I’m not extending <code>Component</code> , instead I’m extending a custom class: <code>Island</code> .</p>\n<p>This new class will behave differently if the component is rendered on the back-end (as part of the server-side rendering phase) or if it’s rendered on the browser.</p>\n<p>Let’s take a look a the actual star of the show, the <code>Island</code> class.</p>\n<h2 id=\"the-behavior-of-our-island-class\">The behavior of our Island class<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-behavior-of-our-island-class\"></a></h2>\n<p>This class will make use of one particular lifecycle event method called <code>componentWillMount</code> which gets executed right before the VNode is added to the virtual DOM.</p>\n<p>The point is that we can inject code (or logic) before the component gets rendered. So in this case, if the component is being rendered on the back-end, we’ll overwrite its <code>render</code> method to make sure we generate the code needed to hydrate the component.</p>\n<p>In other words, this code will take care of importing the actual component, and triggering its rendering phase.</p>\n<p>Let’s take a look at the code to understand how we can do that:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Component</span><span class=\"token punctuation\">,</span> html <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"htm/preact\"</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Island</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">html</span> <span class=\"token operator\">=</span> html\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token dom variable\">window</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"undefined\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">renderMethod</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">render</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">customRender</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">customRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> propNames <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> compName <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span>\n    <span class=\"token keyword\">let</span> containerID <span class=\"token operator\">=</span> <span class=\"token string\">\"comp-container-\"</span> <span class=\"token operator\">+</span> <span class=\"token known-class-name class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000</span>\n    <span class=\"token keyword control-flow\">return</span> html<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token html language-html\">\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>containerID<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n        <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> h<span class=\"token punctuation\">,</span> render <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"preact\"</span>\n        <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">List</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"/components/<span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>compName<span class=\"token interpolation-punctuation punctuation\">}</span></span>.js\"</span>\n        <span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> myComp <span class=\"token operator\">=</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>compName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>propNames<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>\n              <span class=\"token punctuation\">(</span><span class=\"token parameter\">pn</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>pn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">propValueToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">props</span><span class=\"token punctuation\">[</span>pn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">,</span><span class=\"token template-punctuation string\">`</span></span>\n            <span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>myComp<span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>containerID<span class=\"token interpolation-punctuation punctuation\">}</span></span>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n    </span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">propValueToString</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">['</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"','\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">']</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">==</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">==</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token maybe-class-name\">Island</span>\n</code></pre>\n<p>Look at the <code>componentWillMount</code> method (line 11), I’m checking to see if I’m working on the front or on the back. If it’s the latter, then we replace the original <code>render</code> method with a custom one. The new method will write some JS code (see line 21) to import the component, and render it using Preact’s own <code>render</code> function. This code will first run on the back-end because our server is rendering the <code>App</code> component, which as you’ve seen already, is importing and using our <code>List</code> .</p>\n<p>The <code>propValueToString</code> method is simply a utility to make sure we properly render the values of our props.</p>\n<p>In the case of our sample component, this is the output we get from this method:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&#x3C;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"comp-container-7899.516599841189\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token operator\">&#x3C;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"module\"</span><span class=\"token operator\">></span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>h<span class=\"token punctuation\">,</span> render<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'preact'</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">List</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'/components/List.js'</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> myComp <span class=\"token operator\">=</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token maybe-class-name\">List</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>title<span class=\"token operator\">:</span> <span class=\"token string\">'List of items'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>myComp<span class=\"token punctuation\">,</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'comp-container-7899.516599841189'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n</code></pre>\n<p>When this code runs on the browser, our <code>List</code> component will be executed again (because I’m importing it and manually rendering it again), but the logic from the <code>componentWillMount</code> will now find that there is a <code>window</code> object, so it won’t overwrite the default <code>render</code> method.</p>\n<p>This in turn will cause our dynamic component to be finally rendered and usable on screen.</p>\n<p>And that’s all there is to this class.</p>\n<p>All you need to build your own island is essentially code that will understand when it’s running on the front and when it’s on the back. If it’s on the back, then generate the code required to load the file from the browser.</p>\n<p>If on the other hand, you’re running it from the browser, then the code from before will load the file and trigger its rendering routine.</p>\n<p>I used Preact for this example because it’s lightweight and it gave me all the tools I needed to overwrite the default behavior of my island components. If there are other frameworks (probably like React) that give you the same flexibility and control over everything, then I’m sure you’ll be able to port the logic there.</p>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}