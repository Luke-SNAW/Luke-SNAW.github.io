{"pageProps":{"note":{"id":"pj7kmrdb0dqqvzbu0tljcg6","title":"Functional Programming: Part 5 - Functors","desc":"","updated":1670717397229,"created":1670717040398,"tags":"bookmark","custom":{},"fname":"dev.functional-programming.functional-programming-oh-functors","type":"note","vault":{"fsPath":"vault"},"contentHash":"b722eef20e39e0edfa4b2e8386ed256d","links":[{"type":"frontmatterTag","from":{"fname":"dev.functional-programming.functional-programming-oh-functors","id":"pj7kmrdb0dqqvzbu0tljcg6","vaultName":"vault"},"value":"tags.bookmark","alias":"bookmark","xvault":false,"to":{"fname":"tags.bookmark"}}],"anchors":{"what-is-a-functor":{"type":"header","text":"What is a Functor?","value":"what-is-a-functor","line":11,"column":0,"depth":2},"examples-on-functors-we-use-daily":{"type":"header","text":"Examples on functors we use daily","value":"examples-on-functors-we-use-daily","line":19,"column":0,"depth":2},"yes-array-and-promise-are-functors-but-how":{"type":"header","text":"Yes Array and Promise are functors, but how?","value":"yes-array-and-promise-are-functors-but-how","line":24,"column":0,"depth":2},"whats-the-relationship-between-the-array-and-promise-and-the-functor":{"type":"header","text":"What’s the relationship between the Array (and Promise) and the Functor?","value":"whats-the-relationship-between-the-array-and-promise-and-the-functor","line":65,"column":0,"depth":2},"why-am-i-telling-you-that-array-and-promise-are-functors":{"type":"header","text":"Why am I telling you that Array and Promise are Functors?","value":"why-am-i-telling-you-that-array-and-promise-are-functors","line":69,"column":0,"depth":2},"why-to-use-functors":{"type":"header","text":"Why to use functors?","value":"why-to-use-functors","line":75,"column":0,"depth":2},"a-problem":{"type":"header","text":"A Problem","value":"a-problem","line":79,"column":0,"depth":1},"our-task":{"type":"header","text":"Our task","value":"our-task","line":100,"column":0,"depth":2},"algorithmic-steps":{"type":"header","text":"Algorithmic steps","value":"algorithmic-steps","line":104,"column":0,"depth":2},"first-try-the-traditional-way":{"type":"header","text":"First try (the traditional way)","value":"first-try-the-traditional-way","line":110,"column":0,"depth":2},"notes-on-our-first-try":{"type":"header","text":"Notes on our first try","value":"notes-on-our-first-try","line":129,"column":0,"depth":2},"so-theres-still-room-for-improvements-right":{"type":"header","text":"So there’s still room for improvements, right?","value":"so-theres-still-room-for-improvements-right","line":143,"column":0,"depth":2},"the-maybe-functor":{"type":"header","text":"The Maybe Functor","value":"the-maybe-functor","line":155,"column":0,"depth":1},"solving-the-previous-problem-using-maybe-functor":{"type":"header","text":"Solving the previous problem using Maybe functor","value":"solving-the-previous-problem-using-maybe-functor","line":207,"column":0,"depth":2},"reflecting-maybe-functor-on-functors-definition":{"type":"header","text":"Reflecting Maybe functor on functor’s definition","value":"reflecting-maybe-functor-on-functors-definition","line":228,"column":0,"depth":2},"functors-laws":{"type":"header","text":"Functors Laws","value":"functors-laws","line":236,"column":0,"depth":1},"why-to-use-functors-1":{"type":"header","text":"Why To Use Functors?","value":"why-to-use-functors-1","line":264,"column":0,"depth":1},"what-do-we-mean-by-abstraction-of-function-application":{"type":"header","text":"**What do we mean by “Abstraction of function application”?","value":"what-do-we-mean-by-abstraction-of-function-application","line":272,"column":0,"depth":2},"why-dont-we-see-more-functors-in-our-codebases":{"type":"header","text":"Why Don’t We See More Functors In Our Codebases?","value":"why-dont-we-see-more-functors-in-our-codebases","line":280,"column":0,"depth":1},"quick-note":{"type":"header","text":"Quick Note","value":"quick-note","line":284,"column":0,"depth":1},"conclusion":{"type":"header","text":"Conclusion","value":"conclusion","line":288,"column":0,"depth":1},"this-is-an-article-in-a-series-of-articles-talking-about-functional-programming":{"type":"header","text":"This is an article in a series of articles talking about Functional Programming","value":"this-is-an-article-in-a-series-of-articles-talking-about-functional-programming","line":296,"column":0,"depth":1},"this-series-discusses":{"type":"header","text":"This series discusses:","value":"this-series-discusses","line":300,"column":0,"depth":1}},"children":[],"parent":"HtVLXiN97I2jTm8h2NEVQ","data":{}},"body":"<h1 id=\"functional-programming-part-5---functors\">Functional Programming: Part 5 - Functors<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functional-programming-part-5---functors\"></a></h1>\n<blockquote>\n<p><a href=\"https://blog.bitsrc.io/functional-programming-oh-functors-5e670d8eeb8d\">https://blog.bitsrc.io/functional-programming-oh-functors-5e670d8eeb8d</a></p>\n</blockquote>\n<h2 id=\"what-is-a-functor\">What is a Functor?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-is-a-functor\"></a></h2>\n<p>A functor is just a</p>\n<ol>\n<li>Wrapper over a value</li>\n<li>That gives us a mapping interface</li>\n<li>And obeys the functor’s laws (we’ll talk about them later)</li>\n</ol>\n<h2 id=\"examples-on-functors-we-use-daily\">Examples on functors we use daily<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#examples-on-functors-we-use-daily\"></a></h2>\n<ol>\n<li><code>Array</code></li>\n<li><code>Promise</code></li>\n</ol>\n<h2 id=\"yes-array-and-promise-are-functors-but-how\">Yes <code>Array</code> and <code>Promise</code> are functors, but how?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#yes-array-and-promise-are-functors-but-how\"></a></h2>\n<p>Let’s reflect on the functor definition…</p>\n<p><strong><code>Array</code> is a:</strong></p>\n<ol>\n<li>Wrapper over a <strong>list of items</strong></li>\n<li>That gives us <code>**map**</code> <strong>as a mapping interface</strong></li>\n<li>And obeys the functor’s laws</li>\n</ol>\n<p>Example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// the wrapped value</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// the mapping interface</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span>\n  <span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong><code>Promise</code> is a:</strong></p>\n<ol>\n<li>Wrapper over <strong>any JS data type value</strong></li>\n<li>That gives us <code>**then**</code> <strong>as a mapping interface</strong></li>\n<li>And obeys the functor’s laws</li>\n</ol>\n<p>Example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> <span class=\"token string\">\"Any JS type\"</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// the wrapped value</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\npromise<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">then</span><span class=\"token punctuation\">(</span>\n  <span class=\"token comment\">// the mapping interface</span>\n  <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"whats-the-relationship-between-the-array-and-promise-and-the-functor\">What’s the relationship between the <code>Array</code> (and <code>Promise</code>) and the Functor?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#whats-the-relationship-between-the-array-and-promise-and-the-functor\"></a></h2>\n<p>A Functor is a design pattern, while <code>Array</code> and <code>Promise</code> are data types.</p>\n<h2 id=\"why-am-i-telling-you-that-array-and-promise-are-functors\">Why am I telling you that <code>Array</code> and <code>Promise</code> are Functors?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why-am-i-telling-you-that-array-and-promise-are-functors\"></a></h2>\n<p>To shutdown the fear of the idea of functors.</p>\n<p>They are easy to understand, yet they have a powerful concept. And we use them daily without consciously knowing!</p>\n<h2 id=\"why-to-use-functors\">Why to use functors?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why-to-use-functors\"></a></h2>\n<p>Great question! Please follow along…</p>\n<h1 id=\"a-problem\">A Problem<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-problem\"></a></h1>\n<p>After talking a bit about functors and connecting them with our daily use, it’d be wise to dig deeper and build our own. In order to understand more the idea of a functor.</p>\n<p>Let’s face a problem first…</p>\n<p>Take a look at this piece of data</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  products<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"building stuff\"</span><span class=\"token punctuation\">,</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">\"book\"</span><span class=\"token punctuation\">,</span>\n      price<span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n      discount<span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"our-task\">Our task<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#our-task\"></a></h2>\n<p>To find the final price of the first product with discount. While if for any reason we encounter bad data, the fallback should be <code>\"Nothing”</code> as string.</p>\n<h2 id=\"algorithmic-steps\">Algorithmic steps<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#algorithmic-steps\"></a></h2>\n<ol>\n<li>Find first discounted product</li>\n<li>Apply discount</li>\n<li>Keep checking for data invalidity. Where if data is invalid for any reason, we return <code>“Nothing”</code> as a fallback</li>\n</ol>\n<h2 id=\"first-try-the-traditional-way\">First try (the traditional way)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#first-try-the-traditional-way\"></a></h2>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isProductWithDiscount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span><span class=\"token property-access\">discount</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findFirstDiscounted</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">products</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> products<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span>isProductWithDiscount<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calcPriceAfterDiscount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> product<span class=\"token punctuation\">.</span><span class=\"token property-access\">price</span> <span class=\"token operator\">-</span> product<span class=\"token punctuation\">.</span><span class=\"token property-access\">discount</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findFinalPrice</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> fallbackValue</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">products</span><span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> fallbackValue\n\n  <span class=\"token keyword\">const</span> discountedProd <span class=\"token operator\">=</span> <span class=\"token function\">findFirstDiscounted</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token property-access\">products</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>discountedProd<span class=\"token punctuation\">)</span> <span class=\"token keyword control-flow\">return</span> fallbackValue\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">calcPriceAfterDiscount</span><span class=\"token punctuation\">(</span>discountedProd<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">findFinalPrice</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nothing\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n</code></pre>\n<h2 id=\"notes-on-our-first-try\">Notes on our first try<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#notes-on-our-first-try\"></a></h2>\n<p><strong>The good things:</strong></p>\n<ol>\n<li>Granular logical units (<code>isProductWithDiscount</code>, <code>findFirstDiscounted</code> and <code>calcPriceAfterDiscount</code>)</li>\n<li>We defended our logic against data invalidity</li>\n</ol>\n<p><strong>Things we can improve:</strong></p>\n<ol>\n<li>We’re defending too much. (<a href=\"https://en.wikipedia.org/wiki/Defensive_programming\">Defensive programming</a> is a must in any resilient software, but too much is too much. In our code, 50% of <code>findFinalPrice</code> function’s body is checking for data invalidity, which is considered too much defence)</li>\n<li><code>fallbackValue</code> is almost everywhere</li>\n</ol>\n<p><strong>Why are we concerned about these improvements?</strong> Because they are mentally consuming maintainers. Thus directly impacting DX (<em>Developer Experience</em>) negatively.</p>\n<h2 id=\"so-theres-still-room-for-improvements-right\">So there’s still room for improvements, right?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#so-theres-still-room-for-improvements-right\"></a></h2>\n<p>Let’s analyse the code and try to come up with a solution…</p>\n<p><strong>Code structure analysis:</strong> The parts we aim to improve are forming a pattern (defence and fallback) and they are actually intact and atomic! And that’s good!</p>\n<p><strong>Solution <em>(Taking in mind analysis above)</em>:</strong> We should be able to abstract that pattern into a wrapper that could handle these corner cases for us.</p>\n<p><strong>Result:</strong> The wrapper will take care of the corner cases. While we’ll only have to take care of the business logic!</p>\n<p>If we’re able to implement this, that’d be great indeed!</p>\n<h1 id=\"the-maybe-functor\">The <code>Maybe</code> Functor<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-maybe-functor\"></a></h1>\n<blockquote>\n<p>Reminder: A functor is just a wrapper over a value and gives us a mapping interface (i.e. <code>_map_</code>) and obeys some laws.</p>\n</blockquote>\n<p>As we discussed earlier. We only want a wrapper that abstracts away handling data (either bad or good).</p>\n<p>So, the role of <code>Maybe</code> functor, is to wrap our data (potentially bad data), and handle the corner cases for us. How is that? Follow along…</p>\n<p><code>**Maybe**</code> <strong>Functor Implementation</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Maybe</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isNothing</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> value <span class=\"token operator\">===</span> <span class=\"token keyword null nil\">null</span> <span class=\"token operator\">||</span> value <span class=\"token operator\">===</span> <span class=\"token keyword nil\">undefined</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Maybe</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Maybe</span></span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getValueOrFallback</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fallbackValue</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n    <span class=\"token function\">isNothing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> fallbackValue <span class=\"token operator\">:</span> value\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    map<span class=\"token punctuation\">,</span>\n    getValueOrFallback<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Implementation explanation:</strong></p>\n<ol>\n<li><code>isNothing</code>: checks if the wrapped value in <code>Maybe</code> functor is invalid.</li>\n<li><code>map</code>: the mapping interface to our value wrapper, where we use this to apply our business logic lambdas to the wrapped value. <em>(Note: that</em> <code>_map_</code> <em>returns new value in another</em> <code>_Maybe_</code> <em>instance, so we can keep doing</em> <code>_.map().map().map…_</code><em>)</em></li>\n<li><code>getValueOrFallback</code>: returns the wrapped value or fallbacks to <code>fallbackValue</code>.</li>\n</ol>\n<p><strong>Let’s use</strong> <code>**Maybe**</code><strong>:</strong></p>\n<ul>\n<li><strong>With good data:</strong></li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\"><span class=\"token maybe-class-name\">Maybe</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ahmad\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getValueOrFallback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fallback\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'hmad'</span>\n</code></pre>\n<ul>\n<li><strong>With bad data:</strong></li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\"><span class=\"token maybe-class-name\">Maybe</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// will not be executed</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getValueOrFallback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fallback\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'fallback'</span>\n</code></pre>\n<p>Sounds good so far! <code>Maybe</code> functor cared for the corner cases for us! And “aborted” execution when data was invalid. While we only cared for business logic!</p>\n<p>It looks like we achieved our goal! Let’s put it to work…</p>\n<h2 id=\"solving-the-previous-problem-using-maybe-functor\">Solving the previous problem using <code>Maybe</code> functor<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solving-the-previous-problem-using-maybe-functor\"></a></h2>\n<p>Ok, let’s try to solve the products problem using <code>Maybe</code> functor</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isProductWithDiscount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">.</span><span class=\"token property-access\">discount</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findFirstDiscounted</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">products</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> products<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span>isProductWithDiscount<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">calcPriceAfterDiscount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> product<span class=\"token punctuation\">.</span><span class=\"token property-access\">price</span> <span class=\"token operator\">-</span> product<span class=\"token punctuation\">.</span><span class=\"token property-access\">discount</span>\n\n<span class=\"token function\"><span class=\"token maybe-class-name\">Maybe</span></span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token property-access\">products</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>findFirstDiscounted<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span>calcPriceAfterDiscount<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getValueOrFallback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nothing\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\n</code></pre>\n<p><strong>We were able to improve the previous code using</strong> <code>**Maybe**</code> <strong>functor, where</strong></p>\n<ol>\n<li>We no more defend the code ourselves, but the <code>Maybe</code> functor does that for us.</li>\n<li>We configured the <code>fallbackValue</code> only once.</li>\n</ol>\n<h2 id=\"reflecting-maybe-functor-on-functors-definition\">Reflecting <code>Maybe</code> functor on functor’s definition<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reflecting-maybe-functor-on-functors-definition\"></a></h2>\n<p><code>Maybe</code> functor is just a</p>\n<ol>\n<li>Wrapper over <strong>any JS data type value</strong></li>\n<li>That gives us <code>**map**</code> <strong>as a mapping interface</strong></li>\n<li>And obeys the functor’s laws</li>\n</ol>\n<h1 id=\"functors-laws\">Functors Laws<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functors-laws\"></a></h1>\n<ul>\n<li><strong>Identity law</strong></li>\n</ul>\n<p>When performing the mapping operation, if the values in the functor are mapped to themselves, the result will be an unmodified functor.</p>\n<p>Example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> w1 <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Maybe</span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> w2 <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Maybe</span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> v<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// w1 and w2 are equivalent</span>\n</code></pre>\n<ul>\n<li><strong>Composition</strong></li>\n</ul>\n<p>If two sequential mapping operations are performed one after the other using two functions, the result should be the same as a single mapping operation with one function that is equivalent to applying the first function to the result of the second.</p>\n<p>Example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> w1 <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Maybe</span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token function\">g</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> w2 <span class=\"token operator\">=</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Maybe</span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// w1 and w2 are equivalent</span>\n</code></pre>\n<h1 id=\"why-to-use-functors-1\">Why To Use Functors?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why-to-use-functors-1\"></a></h1>\n<ol>\n<li>**Abstraction of function application</li>\n<li>Empowering <a href=\"https://blog.bitsrc.io/functional-programming-composition-2e9b863d8bcb\">functional composition</a></li>\n<li>Reducing amount of defensive code (in case if we used <code>Maybe</code> functor)</li>\n<li>Cleaner code structure (Did you notice how linear the logic is now? Amazing!)</li>\n<li>Variables are more explicit about what we expect (That <code>Maybe</code> <em>models a value that may or may not be present. That it models a “value” or “nothing”</em>)</li>\n</ol>\n<h2 id=\"what-do-we-mean-by-abstraction-of-function-application\"><strong>**What do we mean by “Abstraction of function application”?</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-do-we-mean-by-abstraction-of-function-application\"></a></h2>\n<p>That we pass a transformer function (i.e. <code>x => x.products</code>) to the mapping interface (i.e. <code>map</code>) of the wrapper (i.e. <code>Maybe</code>) and it knows how to take care of itself (by its internal implementation).</p>\n<p>We don’t care about the wrapper’s implementation details it has inside (implementation details are hidden), and yet we know how to use the wrapper (<code>Array</code> or <code>Promise</code>) by using their mapping interfaces.</p>\n<p>And that’s actually crucially important in the programming world. Where that lowers the bar on how much we -as programmers- need to understand in order to be able to get stuff done. They can be implemented in any language that supports higher-order functions (which is most of them these days). And that creates a language-agnostic vocabulary.</p>\n<h1 id=\"why-dont-we-see-more-functors-in-our-codebases\">Why Don’t We See More Functors In Our Codebases?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#why-dont-we-see-more-functors-in-our-codebases\"></a></h1>\n<p>Simply, because we’re not used to. Before <code>.map</code> (and <code>.then</code>) we were used to mutate arrays or loop through them manually. But once we discovered <code>.map</code> we started adapting it as the new transformation tool! I hope after understanding the value of functors, we start introducing them more into our daily coding routines as a very usual thing!</p>\n<h1 id=\"quick-note\">Quick Note<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#quick-note\"></a></h1>\n<p><code>Maybe</code> functor is just an example on functors. It’s not the only functor we have, there are more functors out there and for different purposes. We talked about the simplest here (The <code>Maybe</code> functor), so we can get a bit closer to the idea of functors!</p>\n<h1 id=\"conclusion\">Conclusion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conclusion\"></a></h1>\n<p>Functor design pattern is a simple — yet very powerful pattern. We use it daily in different data types without knowing. Hopefully, we can recognise and appreciate functors a bit more and give them more space in our codebase, because they’ll clean code and give us more power; Due to the composability nature they have and abstractions they offer.</p>\n<p>At the end, a functor is just a wrapper over a value that gives us a mapping interface, and obeys some laws.</p>\n<p><em>Thanks a lot for taking time reading through this article</em> ❤️ <em>I’m cooking the next ones in the series. Please let me know what you think in the comments about this article or the series.</em></p>\n<h1 id=\"this-is-an-article-in-a-series-of-articles-talking-about-functional-programming\">This is an article in a series of articles talking about Functional Programming<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#this-is-an-article-in-a-series-of-articles-talking-about-functional-programming\"></a></h1>\n<p>In this series of articles we cover the main concepts of Functional Programming. At the end of the series, you’ll be able to tackle problems in a more functional approach.</p>\n<h1 id=\"this-series-discusses\">This series discusses:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#this-series-discusses\"></a></h1>\n<ol start=\"0\">\n<li>\n<p><a href=\"https://blog.bitsrc.io/functional-programming-part-0-a-brief-comparison-between-programming-paradigms-3ff192cd32b6\">A Brief Comparison Between Programming Paradigms</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.bitsrc.io/functional-programming-part-1-first-class-functions-791103984dfb\">First Class functions</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.bitsrc.io/functional-programming-part-2-pure-functions-85491f3d7190\">Pure functions</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.bitsrc.io/functional-programming-part-3-the-powers-of-currying-213eb69b234b\">Currying</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.bitsrc.io/functional-programming-composition-2e9b863d8bcb\">Composition</a></p>\n</li>\n<li>\n<p><em>Functors (this article)</em></p>\n</li>\n<li>\n<p>Monads</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"tags\">Tags<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tags\"></a></h2>\n<ol>\n<li><a class=\"color-tag\" style=\"--tag-color: #1d5dec;\" href=\"/notes/jqe1umqwl5gqjj4292jqy0f\">bookmark</a></li>\n</ol>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}