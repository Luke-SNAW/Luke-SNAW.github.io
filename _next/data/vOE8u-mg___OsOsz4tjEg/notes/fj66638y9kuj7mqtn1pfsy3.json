{"pageProps":{"note":{"id":"fj66638y9kuj7mqtn1pfsy3","title":"TypeScript Advanced Types for Next.js: Examples and Best Practices In 2023","desc":"","updated":1683068900013,"created":1683068756044,"custom":{},"fname":"dev.typescript.typescript-advanced-types-for-next-js-examples-and-best-practices-in-2023","type":"note","vault":{"fsPath":"vault"},"contentHash":"8043b70e4b1636e2baac3fe84b1cf428","links":[],"anchors":{"deep-partial":{"type":"header","text":"Deep Partial","value":"deep-partial","line":10,"column":0,"depth":2},"how-to-use-deep-partial":{"type":"header","text":"How to Use Deep Partial","value":"how-to-use-deep-partial","line":20,"column":0,"depth":2},"optional-props":{"type":"header","text":"Optional Props","value":"optional-props","line":51,"column":0,"depth":2},"how-to-use-optional-props":{"type":"header","text":"How to Use Optional Props","value":"how-to-use-optional-props","line":59,"column":0,"depth":2},"merge-types":{"type":"header","text":"Merge Types","value":"merge-types","line":88,"column":0,"depth":2},"how-to-use-merge-types":{"type":"header","text":"How to Use Merge Types","value":"how-to-use-merge-types","line":94,"column":0,"depth":2},"promise-type":{"type":"header","text":"Promise Type","value":"promise-type","line":127,"column":0,"depth":2},"how-to-use-promise-type":{"type":"header","text":"How to Use Promise Type","value":"how-to-use-promise-type","line":137,"column":0,"depth":2},"readonly-props":{"type":"header","text":"Readonly Props","value":"readonly-props","line":161,"column":0,"depth":2},"how-to-use-readonly-props":{"type":"header","text":"How to Use Readonly Props","value":"how-to-use-readonly-props","line":169,"column":0,"depth":2}},"children":[],"parent":"2ijeu1j04o0qzmy7hzk1tlb","data":{}},"body":"<h1 id=\"typescript-advanced-types-for-nextjs-examples-and-best-practices-in-2023\">TypeScript Advanced Types for Next.js: Examples and Best Practices In 2023<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#typescript-advanced-types-for-nextjs-examples-and-best-practices-in-2023\"></a></h1>\n<blockquote>\n<p><a href=\"https://blog.bitsrc.io/typescript-advanced-types-for-next-js-examples-and-best-practices-in-2023-a3a3946a353e\">https://blog.bitsrc.io/typescript-advanced-types-for-next-js-examples-and-best-practices-in-2023-a3a3946a353e</a></p>\n</blockquote>\n<h2 id=\"deep-partial\">Deep Partial<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#deep-partial\"></a></h2>\n<p>Sometimes, you may want to make only some properties of an object optional, without affecting the type of the object itself. You can create a DeepPartial utility that makes all properties of an object and nested objects optional. This can be useful when working with complex data models.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">DeepPartial</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span> <span class=\"token operator\">?</span> <span class=\"token maybe-class-name\">DeepPartial</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"how-to-use-deep-partial\">How to Use Deep Partial<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-to-use-deep-partial\"></a></h2>\n<p>Here’s an example of how you could use DeepPartial in a Next.js project:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  address<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    street<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    city<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">DeepPartialUser</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">DeepPartial</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">User</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// The DeepPartialUser type is equivalent to:</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">PartialUser</span></span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  address<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    street<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n    city<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">DeepPartialUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  address<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    street<span class=\"token operator\">:</span> <span class=\"token string\">\"123 Main St.\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"optional-props\">Optional Props<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#optional-props\"></a></h2>\n<p>You can create an OptionalProps utility that makes some properties of a component’s props optional, while keeping the rest of the properties required. This can be useful when you have a large props interface with some optional and some required properties.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">OptionalProps</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Omit</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span> <span class=\"token operator\">&#x26;</span> <span class=\"token maybe-class-name\">Partial</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Pick</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span>\n</code></pre>\n<h2 id=\"how-to-use-optional-props\">How to Use Optional Props<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-to-use-optional-props\"></a></h2>\n<p>Here’s an example of how you could use OptionalProps in a Next.js project:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">ButtonProps</span></span> <span class=\"token punctuation\">{</span>\n  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">void</span>\n  disabled<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n  size<span class=\"token operator\">:</span> <span class=\"token string\">\"small\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"medium\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"large\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">OptionalButtonProps</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">OptionalProps</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ButtonProps</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"size\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"disabled\"</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// The OptionalButtonProps type is equivalent to:</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">ButtonPropsOptional</span></span> <span class=\"token punctuation\">{</span>\n  text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">void</span>\n  size<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">\"small\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"medium\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"large\"</span>\n  disabled<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Button</span></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">OptionalButtonProps</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">;</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Button</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"Click me\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n</code></pre>\n<h2 id=\"merge-types\">Merge Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#merge-types\"></a></h2>\n<p>Sometimes, you may want to merge two or more types together to create a new type. You can create a MergeTypes utility that takes multiple types as arguments and returns a new type that merges all the properties of the input types.</p>\n<p>type MergeTypes&#x3C;T extends object[]> = T[number];</p>\n<h2 id=\"how-to-use-merge-types\">How to Use Merge Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-to-use-merge-types\"></a></h2>\n<p>Here’s an example of how you could use MergeTypes in a Next.js project:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Address</span></span> <span class=\"token punctuation\">{</span>\n  street<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  city<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">UserInfo</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">MergeTypes</span><span class=\"token operator\">&#x3C;</span><span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Address</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// The UserInfo type is equivalent to:</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">UserInfoMerged</span></span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  street<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  city<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">UserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"John Doe\"</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"john.doe@example.com\"</span><span class=\"token punctuation\">,</span>\n  street<span class=\"token operator\">:</span> <span class=\"token string\">\"123 Main St.\"</span><span class=\"token punctuation\">,</span>\n  city<span class=\"token operator\">:</span> <span class=\"token string\">\"New York\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"promise-type\">Promise Type<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#promise-type\"></a></h2>\n<p>You can create a PromiseType utility that extracts the resolved type of a Promise. This can be useful when working with asynchronous code that returns promises.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">PromiseType</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">any</span><span class=\"token operator\">>></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">U</span>\n  <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span>\n</code></pre>\n<h2 id=\"how-to-use-promise-type\">How to Use Promise Type<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-to-use-promise-type\"></a></h2>\n<p>Here’s an example of how you could use PromiseType in a Next.js project:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">User</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// fetch user data from API</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">UserPromise</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">PromiseType</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">typeof</span> fetchUserData<span class=\"token operator\">></span>\n\n<span class=\"token comment\">// The UserPromise type is equivalent to:</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Promise</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">UserPromise</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">fetchUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> user\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"readonly-props\">Readonly Props<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#readonly-props\"></a></h2>\n<p>You can create a ReadonlyProps utility that makes all properties of a component’s props readonly. This can be useful when you want to prevent the props from being modified by the component.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">ReadonlyProps</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"how-to-use-readonly-props\">How to Use Readonly Props<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-to-use-readonly-props\"></a></h2>\n<p>Here’s an example of how you could use ReadonlyProps in a Next.js project:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">ButtonProps</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Button</span></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">ReadonlyProps</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">ButtonProps</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">;</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Button</span> text<span class=\"token operator\">=</span><span class=\"token string\">\"Click me\"</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Button clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// This would be a compile-time error:</span>\n<span class=\"token comment\">// &#x3C;Button text=\"Click me\" onClick={() => console.log(\"Button clicked\")} /></span>\n<span class=\"token comment\">// ^-- error: Cannot assign to 'text' because it is a read-only property.</span>\n</code></pre>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}