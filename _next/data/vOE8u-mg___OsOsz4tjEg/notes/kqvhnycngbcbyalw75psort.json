{"pageProps":{"note":{"id":"kqvhnycngbcbyalw75psort","title":"Greppability is an underrated code metric","desc":"","updated":1725420223304,"created":1725420019638,"custom":{},"fname":"dev.greppability-code-metric","type":"note","vault":{"fsPath":"vault"},"contentHash":"ce9def61491a93f321730be5df542823","links":[],"anchors":{"gn":{"type":"header","text":"GN","value":"gn","line":14,"column":0,"depth":2},"식별자를-분할하지-말-것":{"type":"header","text":"식별자를 분할하지 말 것","value":"식별자를-분할하지-말-것","line":21,"column":0,"depth":3},"스택-전체에서-동일한-이름-사용하기":{"type":"header","text":"스택 전체에서 동일한 이름 사용하기","value":"스택-전체에서-동일한-이름-사용하기","line":50,"column":0,"depth":3},"중첩보다는-평평한-것이-좋음":{"type":"header","text":"중첩보다는 평평한 것이 좋음","value":"중첩보다는-평평한-것이-좋음","line":74,"column":0,"depth":3},"hn":{"type":"header","text":"HN","value":"hn","line":130,"column":0,"depth":2}},"children":[],"parent":"ZbdkdApFqLdks4Moq92R9","data":{}},"body":"<h1 id=\"greppability-is-an-underrated-code-metric\">Greppability is an underrated code metric<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#greppability-is-an-underrated-code-metric\"></a></h1>\n<blockquote>\n<p><a href=\"https://morizbuesing.com/blog/greppability-code-metric/\">https://morizbuesing.com/blog/greppability-code-metric/</a></p>\n<p>the concept of \"greppability\" as a crucial yet often overlooked code metric that enhances the maintainability of codebases. It emphasizes the importance of making code easily searchable, especially when working with unfamiliar code.</p>\n</blockquote>\n<hr>\n<h2 id=\"gn\"><a href=\"https://news.hada.io/topic?id=16597\">GN</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#gn\"></a></h2>\n<ul>\n<li>낯선 코드베이스를 유지보수할 때 문자열을 검색하는 데 많은 시간을 소비함</li>\n<li>혼자서 작성한 프로젝트에서도 함수 이름, 오류 메시지, 클래스 이름 등 많은 것을 검색해야 함</li>\n<li>검색이 잘 되지 않으면 코드베이스에서 참조를 찾지 못해 불필요한 것으로 간주할 위험이 있음</li>\n<li>이런 상황에서 코드 베이스의 Greppability(그렙 가능성)을 유지하기 위해 적용할 수 있는 몇 가지 규칙을 도출했음</li>\n</ul>\n<h3 id=\"식별자를-분할하지-말-것\">식별자를 분할하지 말 것<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#식별자를-분할하지-말-것\"></a></h3>\n<ul>\n<li>식별자를 분할하거나 동적으로 구성하는 것은 좋지 않은 생각</li>\n<li><code>shipping_addresses</code>와 <code>billing_addresses</code>라는 두 개의 데이터베이스 테이블이 있다고 가정할 때, 주문 유형에 따라 동적으로 테이블 이름을 구성하는 것은 좋아 보일 수 있음</li>\n</ul>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> getTableName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addressType<span class=\"token operator\">:</span> <span class=\"token string\">\"shipping\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"billing\"</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>addressType<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_addresses</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>이는 DRY해 보이지만 유지 관리에 좋지 않음. 누군가는 <code>shipping_addresses</code> 테이블 이름을 코드 베이스에서 검색할 때 이 부분을 놓칠 수 있음</li>\n<li>식별자를 하드코딩하는 것이 더 나은 방법</li>\n<li>검색 가능성을 위해 리팩토링한 코드:</li>\n</ul>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> getTableName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>addressType<span class=\"token operator\">:</span> <span class=\"token string\">\"shipping\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"billing\"</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>addressType <span class=\"token operator\">===</span> <span class=\"token string\">\"shipping\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"shipping_addresses\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>addressType <span class=\"token operator\">===</span> <span class=\"token string\">\"billing\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token string\">\"billing_addresses\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">TypeError</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addressType must be billing or shipping\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>열 이름, 객체 필드, 메서드/함수 이름(JavaScript에서는 메서드 이름을 동적으로 구성하는 것이 쉽게 가능함)에도 동일하게 적용</li>\n</ul>\n<h3 id=\"스택-전체에서-동일한-이름-사용하기\">스택 전체에서 동일한 이름 사용하기<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#스택-전체에서-동일한-이름-사용하기\"></a></h3>\n<ul>\n<li>이름 지정 체계에 맞추기 위해 애플리케이션 경계에서 필드 이름을 변경하지 말 것</li>\n<li>대표적인 예로, PostgreSQL 스타일의 snake_case 식별자를 JavaScript로 가져와 camelCase로 변환하는 것은 좋지 않음</li>\n<li>이는 검색을 어렵게 만듦. 모든 항목을 찾으려면 하나 대신 두 개의 문자열을 검색해야 함</li>\n</ul>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAddress</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> address <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getAddressById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span>\n    streetName<span class=\"token operator\">:</span> address<span class=\"token punctuation\">.</span><span class=\"token property-access\">street_name</span><span class=\"token punctuation\">,</span>\n    zipCode<span class=\"token operator\">:</span> address<span class=\"token punctuation\">.</span><span class=\"token property-access\">zip_code</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>차라리 객체를 직접 반환하는 것이 더 나음</li>\n</ul>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getAddress</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">getAddressById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"중첩보다는-평평한-것이-좋음\">중첩보다는 평평한 것이 좋음<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#중첩보다는-평평한-것이-좋음\"></a></h3>\n<ul>\n<li>Python의 Zen에서 영감을 얻어, 네임스페이스를 다룰 때는 폴더/객체 구조를 중첩하는 것보다 평평하게 만드는 것이 대부분 더 나음</li>\n<li>번역 파일 설정의 두 가지 선택 사항이 있는 경우:</li>\n</ul>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"auth\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"login\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"emailLabel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Email\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"passwordLabel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Password\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"register\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Register\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"emailLabel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Email\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"passwordLabel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Password\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"auth.login.title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"auth.login.emailLabel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Email\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"auth.login.passwordLabel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Password\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"auth.register.title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"auth.register.emailLabel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Email\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"auth.register.passwordLabel\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Password\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>두 번째 옵션을 선택하는 것이 좋음. 키를 쉽게 찾을 수 있으며, <code>t('auth.login.title')</code>와 같이 참조할 수 있음</li>\n<li>React 컴포넌트 구조를 고려할 때:</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">./components/AttributeFilterCombobox.tsx\n./components/AttributeFilterDialog.tsx\n./components/AttributeFilterRating.tsx\n./components/AttributeFilterSelect.tsx\n</code></pre>\n<ul>\n<li>다음과 같은 구조보다 선호됨</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">./components/attribute/filter/Combobox.tsx\n./components/attribute/filter/Dialog.tsx\n./components/attribute/filter/Rating.tsx\n./components/attribute/filter/Select.tsx\n</code></pre>\n<ul>\n<li>검색 관점에서 보면, <code>Dialog</code>와 같은 일반적인 이름 대신 <code>AttributeFilterCombobox</code>와 같이 네임스페이스가 포함된 전체 컴포넌트를 검색할 수 있기 때문</li>\n</ul>\n<p>--</p>\n<h2 id=\"hn\"><a href=\"https://news.ycombinator.com/item?id=41430772\">HN</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hn\"></a></h2>\n<ul>\n<li>함수 이름과 클래스 이름 같은 기호를 검색하는 것은 코드의 구문을 이해하는 도구를 사용하는 것에 비해 약함\n<ul>\n<li>\"정의로 이동\"과 \"사용처 찾기\" 기능만으로도 텍스트 검색의 필요성을 크게 줄일 수 있음</li>\n<li>지난 10년 동안 주로 사용자에게 보이는 문자열만 검색해왔음</li>\n<li>이런 게시물은 저자가 자신의 언어에 맞는 더 나은 도구를 배우는 데 시간을 투자해야 한다는 것을 의미함</li>\n<li>좋은 IDE만으로도 많은 시간을 절약할 수 있음</li>\n</ul>\n</li>\n<li>'greppable'은 자체적으로 사용되지 않는 단어/개념임\n<ul>\n<li>오랫동안 이를 조직 원칙으로 사용해왔음</li>\n<li>코드 구조화의 가장 좋은 방법 중 하나임</li>\n</ul>\n</li>\n<li>조건부 문자열 보간을 사용한 복잡한 예제를 본 적이 있음\n<ul>\n<li>프로젝트에 처음 참여했을 때 UI에서 본 세 단어를 찾는 데 너무 오래 걸렸음</li>\n<li>나중에 이 코드를 쉽게 grep할 수 있는 문자열로 모두 바꿈</li>\n</ul>\n</li>\n<li>많은 코딩 스타일과 도구는 문자열 상수를 줄 길이와 상관없이 한 줄로 유지함\n<ul>\n<li>프로그램 출력에서 문자열을 보고 코드에서 동일한 문자열을 검색할 수 있도록 하기 위함</li>\n</ul>\n</li>\n<li>Rust, Javascript, Lisp는 함수 정의 앞에 키워드를 두어 검색이 용이함\n<ul>\n<li>C는 이러한 키워드가 없어 함수 이름만 검색할 수 있음</li>\n<li>일부 C 코딩 규칙은 정의를 두 줄로 나누어 검색을 용이하게 함</li>\n</ul>\n</li>\n<li>greppability에 동의하지만, 경계를 넘어 이름을 동일하게 유지하는 것에는 반대함\n<ul>\n<li>하나의 기호가 하나의 도메인에만 존재하는 것이 인지 부하를 줄임</li>\n</ul>\n</li>\n<li>코드 검색 가능성은 좋지만, 예제는 의도적으로 오류 가능성을 높임\n<ul>\n<li>문자열 조건을 추가하면 입력과 출력 간의 불일치 가능성이 생김</li>\n<li>딕셔너리를 평탄화하면 오타가 발생할 가능성이 높아짐</li>\n<li>오타는 흔히 발생하며, 여러 코드베이스에 복사된 경우 해결이 어려움</li>\n</ul>\n</li>\n</ul>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}