{"pageProps":{"note":{"id":"iro26tnazhg3t5j7let0i1f","title":"New alternatives to innerHTML","desc":"","updated":1716191547716,"created":1716191487048,"custom":{},"fname":"dev.web.security.innerhtml-alternatives","type":"note","vault":{"fsPath":"vault"},"contentHash":"7b7ea83ad313f4efb0572dcf158f59f3","links":[],"anchors":{"sethtmlunsafe":{"type":"header","text":"setHTMLUnsafe","value":"sethtmlunsafe","line":36,"column":0,"depth":2},"gethtml":{"type":"header","text":"getHTML","value":"gethtml","line":99,"column":0,"depth":2}},"children":[],"parent":"fm8vm79bnyq6fq1gu2oq2zr","data":{}},"body":"<h1 id=\"new-alternatives-to-innerhtml\">New alternatives to innerHTML<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#new-alternatives-to-innerhtml\"></a></h1>\n<blockquote>\n<p><a href=\"https://fullystacked.net/innerhtml-alternatives/\">https://fullystacked.net/innerhtml-alternatives/</a></p>\n</blockquote>\n<p><strong>Browser support note</strong>: <code>setHTMLUnsafe</code> is supported in <a href=\"https://caniuse.com/mdn-api_element_sethtmlunsafe\">all browsers</a>. <code>setHTML</code> is still being standardised and is only available in Firefox behind a flag. <a href=\"https://caniuse.com/mdn-api_element_gethtml\"><code>getHTML</code></a> is supported in Chrome and Edge since version 125.</p>\n<p>Browsers recently implemented a new <code>setHTMLUnsafe</code> method. <em>Unsafe</em> in this context means that, just like <code>innerHTML</code>, it does not perform input sanitization. This naming is not consistent with previous browser APIs: we have <code>innerHTML</code>, not <code>innerHTMLUnsafe</code>; <code>eval()</code> not <code>evalUnsafe()</code>, etc. <code>setHTMLUnsafe</code> is certainly no more dangerous than these older methods. Unlike the older methods though, there is both a safe version (<code>setHTML</code>) and an unsafe version (<code>setHTMLUnsafe</code>) — hence the naming.</p>\n<p>Here’s what the <a href=\"https://wicg.github.io/sanitizer-api/\">Sanitizer API spec</a> has to say:</p>\n<blockquote>\n<p>The “safe” methods will not generate any markup that executes script. That is, they should be safe from XSS.</p>\n</blockquote>\n<p>Let’s imagine we have a HTML form with a text <code>&#x3C;input></code> and some JavaScript code that changes the DOM based on the user-supplied value:</p>\n<pre class=\"language-js\"><code class=\"language-js\">form<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"submit\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  event<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> markup <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&#x3C;h2></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>input<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&#x3C;/h2></span><span class=\"token template-punctuation string\">`</span></span>\n  div<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> markup\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>If a user entered <code>&#x3C;img src=doesnotexist onerror=\"alert('Potential XSS Attack')\"></code> into the input, that JavaScript code would run in the browser. <code>.setHTMLUnsafe()</code> has the same problem.</p>\n<p>In this simplistic example the code is only running in the users own browser, but if this sort of user input is stored in a database and used to display dynamic content to others, arbitrary and potentially malicious JavaScript could run in the browsers of other users.</p>\n<p>Using <code>setHTML</code>, the only thing inserted into the DOM is <code>&#x3C;img src=\"doesnotexist\"></code>. The image is still injected into the page, but the JavaScript is stripped out.</p>\n<p>The Sanitizer API is still a work in progress, but it helps put the naming of <code>setHTMLUnsafe</code> in context.</p>\n<h2 id=\"sethtmlunsafe\">setHTMLUnsafe<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sethtmlunsafe\"></a></h2>\n<p>If we’re (hopefully) getting <code>setHTML</code>, and we already have <code>innerHTML</code>, why do we even need <code>setHTMLUnsafe</code>? The answer is declarative shadow DOM.</p>\n<p>The HTML <code>&#x3C;template></code> element can be used in two different ways:</p>\n<ul>\n<li>To hold a HTML fragment which is not rendered but that can be used later via JavaScript.</li>\n<li>To immediately generate a shadow DOM. If the <code>&#x3C;template></code> contains the <code>shadowrootmode</code> attribute, the element is replaced in the DOM by its content, inside a shadow root.</li>\n</ul>\n<p><code>innerHTML</code> plays nicely with the first use case, but can’t handle the second.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> main <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span>\nmain<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token html language-html\">\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h2</span><span class=\"token punctuation\">></span></span>I am in the Light DOM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>template</span> <span class=\"token attr-name\">shadowrootmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>open<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n        <span class=\"token selector\">h2</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token color\">blue</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>h2</span><span class=\"token punctuation\">></span></span>Shadow DOM<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>h2</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>template</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span></span><span class=\"token template-punctuation string\">`</span></span>\n</code></pre>\n<p><code>innerHTML</code> does inject the <code>&#x3C;template></code> into the page, but it remains a <code>&#x3C;template></code> element — it does not get turned into shadow DOM and its contents do not get rendered, regardless of the <code>shadowrootmode</code> attribute.</p>\n<p><code>setHTML</code> will purposefully remove the <code>template</code> and its contents:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> main <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span>\nmain<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setHTML</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n     &#x3C;h2>I am in the Light DOM&#x3C;/h2>\n    &#x3C;div>\n    &#x3C;template shadowrootmode=\"open\">\n        &#x3C;style>\n        h2 { color: blue; }\n        &#x3C;/style>\n        &#x3C;h2>Shadow DOM&#x3C;/h2>\n    &#x3C;/template>\n    &#x3C;/div></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>In the above example, the contents of the <code>main</code> is now a <code>h2</code> and an empty <code>div</code>. The template is treated as an “unsafe node”.</p>\n<p>This is why browsers added <code>setHTMLUnsafe</code>, as a way to dynamically add declarative shadow DOM to the page.</p>\n<pre class=\"language-js\"><code class=\"language-js\">main<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setHTMLUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &#x3C;h2>I am in the Light DOM&#x3C;/h2>\n    &#x3C;div>\n    &#x3C;template shadowrootmode=\"open\">\n        &#x3C;style>\n        h2 { color: blue; }\n        &#x3C;/style>\n        &#x3C;h2>Shadow DOM&#x3C;/h2>\n    &#x3C;/template>\n    &#x3C;/div>\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>When using <code>setHTMLUnsafe</code>, the contents of the <code>&#x3C;template></code> will be rendered inside of shadow DOM.</p>\n<h2 id=\"gethtml\">getHTML<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#gethtml\"></a></h2>\n<p><code>setHTML</code> and <code>setHTMLUnsafe</code> aren’t, by themselves, a full replacement for <code>innerHTML</code>. <code>innerHTML</code> can both <em>set</em> and <em>get</em> HTML. The complementary function to <code>setHTML</code> and <code>setHTMLUnsafe</code> is <a href=\"https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#html-serialization-methods\"><code>getHTML</code></a> (there is no unsafe version).</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> main <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getHTML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>By default <code>getHTML</code> won’t return any markup from within a shadow DOM, but it is configurable.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> main <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getHTML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> serializableShadowRoots<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Setting <code>serializableShadowRoots</code> to true will serialize all shadow DOM trees that have opted-in to serialization.</p>\n<p>A <code>template</code> element can opt-in using the <code>shadowrootserializable</code> attribute:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>template</span> <span class=\"token attr-name\">shadowrootmode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>open<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">shadowrootserializable</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>Similarly, in JavaScript, the <code>attachShadow</code> method has a boolean <code>serializable</code> option.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">attachShadow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> mode<span class=\"token operator\">:</span> <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span> serializable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>It’s also possible to serialize only certain specified shadow DOM trees by passing an array of shadow roots:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> markup <span class=\"token operator\">=</span> main<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getHTML</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  shadowRoots<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".example\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">shadowRoot</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>All shadow roots in the array will be serialized, <em>even if they are not marked as serializable</em>.</p>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}