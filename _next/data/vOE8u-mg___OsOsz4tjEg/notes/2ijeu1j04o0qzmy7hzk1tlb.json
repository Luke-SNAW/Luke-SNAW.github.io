{"pageProps":{"note":{"id":"2ijeu1j04o0qzmy7hzk1tlb","title":"TypeScript","desc":"","updated":1725600314374,"created":1652057928334,"custom":{},"fname":"dev.typescript","type":"note","vault":{"fsPath":"vault"},"contentHash":"5d26304082f63c83c11181165a979104","links":[],"anchors":{"collections":{"type":"header","text":"Collections","value":"collections","line":8,"column":0,"depth":2},"overrated":{"type":"header","text":"Overrated?","value":"overrated","line":41,"column":0,"depth":2},"type-interface":{"type":"header","text":"Type, interface","value":"type-interface","line":47,"column":0,"depth":2},"differences-between-type-aliases-and-interfaces":{"type":"header","text":"Differences Between Type Aliases and Interfaces","value":"differences-between-type-aliases-and-interfaces","line":63,"column":0,"depth":3},"extending-an-interface":{"type":"header","text":"Extending an interface","value":"extending-an-interface","line":67,"column":0,"depth":4},"extending-a-type-via-intersections":{"type":"header","text":"Extending a type via intersections","value":"extending-a-type-via-intersections","line":81,"column":0,"depth":4},"adding-new-fields-to-an-existing-interface":{"type":"header","text":"Adding new fields to an existing interface","value":"adding-new-fields-to-an-existing-interface","line":93,"column":0,"depth":4},"a-type-cannot-be-changed-after-being-created":{"type":"header","text":"A type cannot be changed after being created","value":"a-type-cannot-be-changed-after-being-created","line":106,"column":0,"depth":4},"preferring-interfaces-over-intersections":{"type":"header","text":"Preferring Interfaces Over Intersections","value":"preferring-interfaces-over-intersections","line":114,"column":0,"depth":3}},"children":["iobm3jmimhpok244jve1s4r","3m7eb64v72rnclmgwwuw5rh","2s24x5q1mo7d1hy2oauofwy","cm1g8es2dywuvjeprc5o0mk","sdltx77jqmnlqumlnblxrpd","qz73ogfyumh4y5xr3g82c4z","uipeebh7appazcar64btre3","fj66638y9kuj7mqtn1pfsy3","be1p3rxvx033q3qtlji9rov"],"parent":"ZbdkdApFqLdks4Moq92R9","data":{}},"body":"<h1 id=\"typescript\">TypeScript<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#typescript\"></a></h1>\n<h2 id=\"collections\">Collections<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#collections\"></a></h2>\n<ul>\n<li>\n<p><a href=\"https://swizec.com/blog/stop-shouting-shouting/\">Stop SHOUTING = 'shouting'</a></p>\n</li>\n<li>\n<p><a href=\"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/basic_type_example/#basic-prop-types-examples\">Typing Component Props | React TypeScript Cheatsheets</a></p>\n</li>\n<li>\n<p><a href=\"https://javascript.plainenglish.io/typescript-generics-whats-with-the-angle-brackets-4e242c567269\">TypeScript Generics: What’s with the Angle Brackets &#x3C;>?</a></p>\n</li>\n<li>\n<p><a href=\"https://dmitripavlutin.com/typescript-covariance-contravariance/\">Covariance and Contravariance in TypeScript</a></p>\n</li>\n<li>\n<p><a href=\"https://dmitripavlutin.com/typescript-function-overloading/\">A Simple Explanation of Function Overloading in TypeScript</a></p>\n</li>\n<li>\n<p><a href=\"https://www.executeprogram.com/blog/typescript-features-to-avoid\">TypeScript Features to Avoid</a></p>\n</li>\n<li>\n<p><a href=\"https://medium.com/javascript-scene/the-shocking-secret-about-static-types-514d39bf30a3\">The Shocking Secret About Static Types</a></p>\n</li>\n<li>\n<p><a href=\"https://dmitripavlutin.com/typescript-index-signatures/\">Index Signatures in TypeScript</a></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">SpecificSalary</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Record</span><span class=\"token operator\">&#x3C;</span><span class=\"token string\">\"yearlySalary\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"yearlyBonus\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">StringByString</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword nil\">undefined</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> object<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">StringByString</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li>\n<p><a href=\"https://spin.atomicobject.com/2021/05/11/3-useful-typescript-patterns/\">3 Useful TypeScript Patterns to Keep in Your Back Pocket</a></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Names</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Bob\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Bill\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Ben\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">JobTitles</span></span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Welder\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Carpenter\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Plumber\"</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token maybe-class-name\">JobAssignments</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token maybe-class-name\">Key</span> <span class=\"token keyword\">in</span> <span class=\"token maybe-class-name\">Names</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">JobTitles</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token maybe-class-name\">Bob</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Welder\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Bill</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Carpenter\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token maybe-class-name\">Ben</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Plumber\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li>\n<p><a href=\"https://blog.bitsrc.io/why-are-const-assertions-a-gem-in-typescript-e1d353f5d8ce\">Why Are Const Assertions a Gem in TypeScript?</a></p>\n</li>\n<li>\n<p><a href=\"https://betterprogramming.pub/all-javascript-and-typescript-features-of-the-last-3-years-629c57e73e42\">All JavaScript and TypeScript Features of the last 3 years</a></p>\n</li>\n</ul>\n<h2 id=\"overrated\">Overrated?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#overrated\"></a></h2>\n<ul>\n<li><a href=\"https://buildtogether.tech/tooling/#:~:text=Static%20typing%20helps%2C%20but%20only%20a%20little.\">Static typing helps, but only a little.</a></li>\n<li><a href=\"https://medium.com/javascript-scene/the-typescript-tax-132ff4cb175b\">The TypeScript Tax</a></li>\n<li><a href=\"https://medium.com/javascript-scene/the-shocking-secret-about-static-types-514d39bf30a3\">The Shocking Secret About Static Types</a></li>\n</ul>\n<h2 id=\"type-interface\">Type, interface<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#type-interface\"></a></h2>\n<ul>\n<li><a href=\"https://www.educba.com/typescript-type-vs-interface/\">Differences Between TypeScript Type vs Interface</a></li>\n<li><a href=\"https://blog.bitsrc.io/type-vs-interface-in-typescript-cf3c00bc04ae\">Type vs Interface in TypeScript</a>\n<ul>\n<li>Use interfaces when:\n<ul>\n<li>A new object or an object method needs to be defined.</li>\n<li>You wish to benefit from declaration merging.</li>\n</ul>\n</li>\n<li>Use types when:\n<ul>\n<li>You need to define a primitive-type alias</li>\n<li>Defining tuple types</li>\n<li>Defining a union</li>\n<li>You must create functions and attempt to overload them in object types through composition.</li>\n<li>Requiring the use of mapped types</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#using-type-predicates\">Using type predicates</a>\n<ul>\n<li><code>#4 Use type predicate to avoid type assertion</code> in <a href=\"https://dev.to/zenstack/11-tips-that-help-you-become-a-better-typescript-programmer-4ca1\">11 Tips That Make You a Better Typescript Programmer</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"differences-between-type-aliases-and-interfaces\"><a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces\">Differences Between Type Aliases and Interfaces</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#differences-between-type-aliases-and-interfaces\"></a></h3>\n<p>Type aliases and interfaces are very similar, and in many cases you can choose between them freely. Almost all features of an <code>interface</code> are available in <code>type</code>, the key distinction is that a type cannot be re-opened to add new properties vs an interface which is always extendable.</p>\n<h4 id=\"extending-an-interface\">Extending an interface<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#extending-an-interface\"></a></h4>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Animal</span></span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Bear</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Animal</span></span> <span class=\"token punctuation\">{</span>\n  honey<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> bear <span class=\"token operator\">=</span> <span class=\"token function\">getBear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbear<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span>\nbear<span class=\"token punctuation\">.</span><span class=\"token property-access\">honey</span>\n</code></pre>\n<h4 id=\"extending-a-type-via-intersections\">Extending a type via intersections<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#extending-a-type-via-intersections\"></a></h4>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Animal</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Bear</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Animal</span> <span class=\"token operator\">&#x26;</span> <span class=\"token punctuation\">{</span> honey<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> bear <span class=\"token operator\">=</span> <span class=\"token function\">getBear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nbear<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span>\nbear<span class=\"token punctuation\">.</span><span class=\"token property-access\">honey</span>\n</code></pre>\n<h4 id=\"adding-new-fields-to-an-existing-interface\">Adding new fields to an existing interface<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#adding-new-fields-to-an-existing-interface\"></a></h4>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Window</span></span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Window</span></span> <span class=\"token punctuation\">{</span>\n  ts<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">TypeScriptAPI</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> src <span class=\"token operator\">=</span> <span class=\"token string\">'const a = \"Hello World\"'</span>\n<span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">ts</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">transpileModule</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"a-type-cannot-be-changed-after-being-created\">A type cannot be changed after being created<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-type-cannot-be-changed-after-being-created\"></a></h4>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Window</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Window</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> ts<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">TypeScriptAPI</span> <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Error: Duplicate identifier 'Window'.</span>\n</code></pre>\n<h3 id=\"preferring-interfaces-over-intersections\"><a href=\"https://github.com/microsoft/TypeScript/wiki/Performance#preferring-interfaces-over-intersections\">Preferring Interfaces Over Intersections</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#preferring-interfaces-over-intersections\"></a></h3>\n<p>Much of the time, a simple type alias to an object type acts very similarly to an interface.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Foo</span></span> <span class=\"token punctuation\">{</span>\n  prop<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Bar</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> prop<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>However, and as soon as you need to compose two or more types, you have the option of extending those types with an interface, or intersecting them in a type alias, and that's when the differences start to matter.</p>\n<p>Interfaces create a single flat object type that detects property conflicts, which are usually important to resolve! Intersections on the other hand just recursively merge properties, and in some cases produce <code>never</code>. Interfaces also display consistently better, whereas type aliases to intersections can't be displayed in part of other intersections. Type relationships between interfaces are also cached, as opposed to intersection types as a whole. A final noteworthy difference is that when checking against a target intersection type, every constituent is checked before checking against the \"effective\"/\"flattened\" type.</p>\n<p>For this reason, extending types with <code>interface</code>s/<code>extends</code> is suggested over creating intersection types.</p>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> type Foo = Bar &#x26; Baz &#x26; {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">     someProp: string;\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\"> }\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> interface Foo extends Bar, Baz {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     someProp: string;\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> }\n</span></span></code></pre>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/notes/iobm3jmimhpok244jve1s4r\">10 Advanced TypeScript Tips for Development</a></li>\n<li><a href=\"/notes/3m7eb64v72rnclmgwwuw5rh\">11 Awesome TypeScript Utility Types You Should Know</a></li>\n<li><a href=\"/notes/2s24x5q1mo7d1hy2oauofwy\">13 Typescript Utility - A Cheat Sheet for Developer</a></li>\n<li><a href=\"/notes/sdltx77jqmnlqumlnblxrpd\">Favour TypeScript Types Over Interfaces</a></li>\n<li><a href=\"/notes/cm1g8es2dywuvjeprc5o0mk\">No More Confusion About TypeScript’s Type and Interface</a></li>\n<li><a href=\"/notes/be1p3rxvx033q3qtlji9rov\">Record Type in TypeScript</a></li>\n<li><a href=\"/notes/qz73ogfyumh4y5xr3g82c4z\">Stop using {} in Typescript</a></li>\n<li><a href=\"/notes/uipeebh7appazcar64btre3\">Tools</a></li>\n<li><a href=\"/notes/fj66638y9kuj7mqtn1pfsy3\">TypeScript Advanced Types for Next.js: Examples and Best Practices In 2023</a></li>\n</ol>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}