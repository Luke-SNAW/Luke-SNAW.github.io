{"pageProps":{"note":{"id":"rbvc7to4emhgev54r1gbc50","title":"Just Use Postgres for Everything","desc":"","updated":1670804528080,"created":1670804129283,"custom":{},"fname":"dev.DB.postgres.postgres-for-everything","type":"note","vault":{"fsPath":"vault"},"contentHash":"bc22f59c381c9a6fb5373b98c4f522c8","links":[],"anchors":{},"children":[],"parent":"xyg5ao6vugkef44ahxssq60","data":{}},"body":"<h1 id=\"just-use-postgres-for-everything\">Just Use Postgres for Everything<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#just-use-postgres-for-everything\"></a></h1>\n<blockquote>\n<p>How to reduce complexity and move faster</p>\n<p><a href=\"https://www.amazingcto.com/postgres-for-everything/\">https://www.amazingcto.com/postgres-for-everything/</a></p>\n</blockquote>\n<p><em>Technology is about tradeoffs. Using Postgres for everything is a tradeoff. Of course you use the right tool for the job. Often this is Postgres. Helping dozens of startups I have seen many more people overcomplicate setups than companies that use tools that are too simple for the job. If you have 1M+ customers, and 50+ developers, and you need Kafka and Spark amd Kubernetes, go ahead. If you have more systems than developers, just use Postgres. Thanks to Hugo and BunnyCDN for keeping the page fast. PS: Postgres for everything doesn‚Äôt mean one server for everything ;-)</em></p>\n<p><strong>TLDR; just use Postgres for everything.</strong></p>\n<p>We have invited complexity through the door. But it will not leave as easily.</p>\n<p><img src=\"http://www.radicalsimpli.city/Complexity2005_2021.svg\" alt=\"Complexity\"></p>\n<p>There is <a href=\"http://www.radicalsimpli.city/\">Radical Simplicity</a> though.</p>\n<p>One way to simplify your stack and reduce the moving parts, speed up development, lower the risk and deliver more features in your startup is <strong>‚ÄúUse Postgres for everything‚Äù</strong>. Postgres can replace - up to millions of users - many backend technologies, Kafka, RabbitMQ, Mongo and Redis among them.</p>\n<p>Use Postgres for caching instead of Redis with <a href=\"https://www.compose.com/articles/faster-performance-with-unlogged-tables-in-postgresql/\">UNLOGGED tables</a> and TEXT as a JSON data type. <a href=\"https://chat.openai.com/chat\">Use stored procedures</a> to add and enforce an expiry date for the data just like in Redis.</p>\n<p>Use Postgres as a message queue with <a href=\"https://www.enterprisedb.com/blog/what-skip-locked-postgresql-95\">SKIP LOCKED</a> instead of Kafka (if you only need a message queue).</p>\n<p>Use Postgres with <a href=\"https://www.timescale.com/\">TimescaleDB</a> as a data warehouse.</p>\n<p>Use Postgres with <a href=\"https://scalegrid.io/blog/using-jsonb-in-postgresql-how-to-effectively-store-index-json-data-in-postgresql/\">JSONB</a> to store Json documents in a database, search and index them - instead of Mongo.</p>\n<p>Use Postgres as a cron demon to take actions at certain times, like sending mails, with <a href=\"https://github.com/citusdata/pg_cron\">pg_cron</a> adding events to a message queue.</p>\n<p>Use Postgres for <a href=\"https://postgis.net/\">Geospacial queries</a>.</p>\n<p>Use Postgres for <a href=\"https://supabase.com/blog/postgres-full-text-search-vs-the-rest\">Fulltext Search</a> instead of Elastic.</p>\n<p>Use Postgres to <a href=\"https://www.amazingcto.com/graphql-for-server-development/\">generate JSON in the database</a>, write no server side code and directly give it to the API.</p>\n<p>Use Postgres with a <a href=\"https://graphjin.com/\">GraphQL adapter</a> to deliver GraphQL if needed.</p>\n<p>There I‚Äôve said it, <strong>just use Postgres for everything</strong>.</p>\n<hr>\n<p>Sure, PostgreSQL can be used for sessions, but Redis has solved this problem on virtually every single platform a long time ago. Your customer probably doesn't even know what a session is, but they will definitely learn about them when your in-house implementation inevitably encounters an edge case.</p>\n<p>Of course, PostreSQL has wonderful search capabilities but it was never intended to be used as a search engine. Solr was created in 2004 and is still being improved and used in production every day. Do you know what will happen to your full-text search when your customer types in a mix of English and Chinese characters?</p>\n<p>Yes, PostgreSQL addition of SKIP LOCKED was neat but AFAIK the author of that feature himself recommended using a traditional job queue unless you had a very good reason against it. RabbitMQ was designed as a message queue and when you read the documentation you realize that they had encountered virtually every single problem and figured out a way to deal with it so that you don't have to. The documentation pretty much tells you what problems you are going to have later so that you can plan for them today.</p>\n<blockquote>\n<p><a href=\"https://news.ycombinator.com/item?id=33936703\">https://news.ycombinator.com/item?id=33936703</a></p>\n<p>Sure, if your use case requires it, use Redis for sessions or RabbitMQ for queues. But you can also use a library with postgres, or even write the 40 lines of code yourself.</p>\n<p>Each component has its own debugging requirements and tooling. Each component adds a bunch of complexity. Sometimes it's worth it, sometimes it's not. It's not as clear-cut as you're making it be. There are pros and cons to both alternatives.</p>\n</blockquote>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there üëã. I'm a Front-end developer.\n\n---\n\n- Îã®ÏàúÌï®Í≥º Íæ∏Ï§ÄÌï®ÏùÄ Í∞ÄÏû• Ïâ¨Ïö∞Î©¥ÏÑúÎèÑ ÏßÄÌÇ§Í∏∞ Ïñ¥Î†§Ïö¥ ÏõêÏπô.\n\n- ü•± -> ü§îüí°üå± - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> ‚ÄúMotivation often comes after starting, not before. Action produces momentum.‚Äù\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> ÎèÑÎ¨¥ÏßÄ ÏùΩÌûàÏßÄ ÏïäÎäî Ï±Ö ÏïûÏóêÏÑú ÎÇ¥Í∞Ä ÌÉùÌïú Î∞©Î≤ïÏùÄ ÌéºÏ≥êÏßÑ ÌéòÏù¥ÏßÄ ÏïûÏóêÏÑú Î©çÎïåÎ¶¨Í∏∞Ïù¥Îã§. Îã§Î•¥Í≤å ÌëúÌòÑÌïòÎ©¥ Ïù¥Î†áÎã§. ÌéºÏ≥êÏßÑ Îëê ÌéòÏù¥ÏßÄ ÏïûÏóêÏÑú Ïò§Îûò Î®∏Î¨ºÍ∏∞.\n>\n> Ï±ÖÏùÑ ÌéºÏ≥êÎÜìÎäî Í≤ÉÏúºÎ°ú Ï∂©Î∂ÑÌïòÎã§. ÏùΩÏßÄ Î™ªÌï¥ÎèÑ Ï¢ãÎã§. Îß§Ïùº Ï†ïÌï¥ÏßÑ ÏßÑÎèÑÎ•º ÎÇòÍ∞ÄÏïº ÌïòÎäî ÌïôÍµê ÏàòÏóÖÏù¥ ÏïÑÎãàÎãàÍπå. ÌïòÏßÄÎßå ÏùΩÏßÄ ÏïäÏïÑÎèÑ Í¥úÏ∞ÆÎã§Í≥† Ìï¥ÏÑú ÌéºÏ≥êÎëêÏßÄÏ°∞Ï∞® ÏïäÏúºÎ©¥ Í≥§ÎûÄÌïòÎã§. Í∞ÄÎä•Ìïú Ìïú ÏûêÏ£º Ï±ÖÏùÑ ÌéºÏ≥êÎëêÎèÑÎ°ù ÌïòÏûê. Ï†ÑÌòÄ ÏùΩÏßÄ ÏïäÍ≥† Î©çÌïòÎãà Î∞îÎùºÎ≥¥Í≥† ÏûàÎã§Í∞Ä Îã§Ïãú ÎçÆÍ≤å ÎêòÎçîÎùºÎèÑ\n>\n> - ÎßâÎßâÌïú ÎèÖÏÑú. ÏãúÎ°úÍµ∞. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- üìù [Gists](https://gist.github.com/Luke-SNAW)\n- üìú [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}