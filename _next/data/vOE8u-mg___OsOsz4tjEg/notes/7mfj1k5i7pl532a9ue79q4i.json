{"pageProps":{"note":{"id":"7mfj1k5i7pl532a9ue79q4i","title":"A Realworld Comparison of Front End Frameworks 2020","desc":"","updated":1663733174843,"created":1663732748940,"custom":{},"fname":"dev.javascript.tools.a-realworld-comparison-of-front-end-frameworks-2020","type":"note","vault":{"fsPath":"vault"},"contentHash":"58c0f1dccdac776311ef31b61def42ea","links":[],"anchors":{"which-librariesframeworks-are-we-comparing":{"type":"header","text":"Which libraries/frameworks are we comparing?","value":"which-librariesframeworks-are-we-comparing","line":22,"column":0,"depth":1},"what-metrics-do-we-look-at":{"type":"header","text":"What metrics do we look at?","value":"what-metrics-do-we-look-at","line":26,"column":0,"depth":1},"metric-1-performance":{"type":"header","text":"Metric #1: Performance","value":"metric-1-performance","line":34,"column":0,"depth":1},"audit-settings":{"type":"header","text":"Audit Settings","value":"audit-settings","line":38,"column":0,"depth":2},"rationale":{"type":"header","text":"Rationale","value":"rationale","line":44,"column":0,"depth":2},"remarks":{"type":"header","text":"Remarks","value":"remarks","line":52,"column":0,"depth":2},"conclusion":{"type":"header","text":"Conclusion","value":"conclusion","line":56,"column":0,"depth":2},"metric-2-size":{"type":"header","text":"Metric #2: Size","value":"metric-2-size","line":60,"column":0,"depth":1},"rationale-1":{"type":"header","text":"Rationale","value":"rationale-1","line":66,"column":0,"depth":2},"remarks-1":{"type":"header","text":"Remarks","value":"remarks-1","line":74,"column":0,"depth":2},"conclusion-1":{"type":"header","text":"Conclusion","value":"conclusion-1","line":82,"column":0,"depth":2},"metric-3-lines-of-code":{"type":"header","text":"Metric #3: Lines of Code","value":"metric-3-lines-of-code","line":86,"column":0,"depth":1},"rationale-2":{"type":"header","text":"Rationale","value":"rationale-2","line":92,"column":0,"depth":2},"remarks-2":{"type":"header","text":"Remarks","value":"remarks-2","line":100,"column":0,"depth":2},"conclusion-2":{"type":"header","text":"Conclusion","value":"conclusion-2","line":108,"column":0,"depth":2},"summary":{"type":"header","text":"Summary","value":"summary","line":112,"column":0,"depth":1},"faq":{"type":"header","text":"FAQ","value":"faq","line":116,"column":0,"depth":1},"1-why-were-framework-x-y-and-z-not-included-in-this-comparison":{"type":"header","text":"#1 Why were framework X, Y, and Z not included in this comparison?","value":"1-why-were-framework-x-y-and-z-not-included-in-this-comparison","line":118,"column":0,"depth":2},"2-why-do-you-call-it-the-real-world":{"type":"header","text":"#2 Why do you call it the real world?","value":"2-why-do-you-call-it-the-real-world","line":122,"column":0,"depth":2},"3-why-didnt-you-include-my-favorite-framework":{"type":"header","text":"#3 Why didn’t you include my favorite framework?","value":"3-why-didnt-you-include-my-favorite-framework","line":126,"column":0,"depth":2},"4-which-version-of-the-libraryframework-did-you-include":{"type":"header","text":"#4 Which version of the library/framework did you include?","value":"4-which-version-of-the-libraryframework-did-you-include","line":130,"column":0,"depth":2},"5-why-did-you-forget-to-include-a-framework-that-is-more-popular-than-the-one-in-the-comparison":{"type":"header","text":"#5 Why did you forget to include a framework that is more popular than the one in the comparison?","value":"5-why-did-you-forget-to-include-a-framework-that-is-more-popular-than-the-one-in-the-comparison","line":134,"column":0,"depth":2}},"children":[],"parent":"kiZBVVwRNBJUzgKgIBQVN","data":{}},"body":"<h1 id=\"a-realworld-comparison-of-front-end-frameworks-2020\">A Realworld Comparison of Front End Frameworks 2020<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-realworld-comparison-of-front-end-frameworks-2020\"></a></h1>\n<blockquote>\n<p><a href=\"https://medium.com/dailyjs/a-realworld-comparison-of-front-end-frameworks-2020-4e50655fe4c1\">https://medium.com/dailyjs/a-realworld-comparison-of-front-end-frameworks-2020-4e50655fe4c1</a></p>\n</blockquote>\n<p>We are doing it again. This is 2020, there is also <a href=\"https://medium.com/free-code-camp/a-realworld-comparison-of-front-end-frameworks-with-benchmarks-2019-update-4be0d3c78075\">2019</a>, <a href=\"https://medium.com/free-code-camp/a-real-world-comparison-of-front-end-frameworks-with-benchmarks-2018-update-e5760fb4a962\">2018</a>, and <a href=\"https://medium.com/free-code-camp/a-real-world-comparison-of-front-end-frameworks-with-benchmarks-e1cb62fd526c\">2017</a>.</p>\n<p><strong>Let me start with this — this is by all means not a comparison of what should be your next choice for Front-End. It’s a small, relatively unsophisticated, comparison of three things: Performance, Size, and Lines of Code of pretty similar application.</strong></p>\n<p>With that in mind here is how it works:</p>\n<p><strong>We are comparing RealWorld App —</strong> something more than a “to do” app. Usually “to-dos” don’t convey enough knowledge and perspective to actually build real applications.</p>\n<p><strong>It is somehow standardized —</strong> A project that conforms to certain rules — <a href=\"https://github.com/gothinkster/realworld/tree/master/spec\">there is a spec</a>. Provides a back-end API, static markup, and styles.</p>\n<p><strong>Written or reviewed by an expert —</strong> A consistent, real-world project that, ideally, an expert in that technology would have built or reviewed.</p>\n<h1 id=\"which-librariesframeworks-are-we-comparing\">Which libraries/frameworks are we comparing?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#which-librariesframeworks-are-we-comparing\"></a></h1>\n<p>As of the writing, there are 24 implementations of Conduit at the <a href=\"https://github.com/gothinkster/realworld\">RealWorld repo</a>. It doesn’t matter if it has a big following or not. The only qualification is — it appears on the <a href=\"https://github.com/gothinkster/realworld\">RealWorld repo</a> page.</p>\n<h1 id=\"what-metrics-do-we-look-at\">What metrics do we look at?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-metrics-do-we-look-at\"></a></h1>\n<p><strong>Performance</strong> — how long does this App take to show content and become usable?</p>\n<p><strong>Size</strong> —how big is the App? We will only compare the size of the compiled JavaScript file(s). HTML and CSS are common to all variants and are downloaded from a CDN (Content Delivery Network). All technologies compile or transpile to JavaScript, thus we only size this file(s).</p>\n<p><strong>Lines of Code</strong> — how many lines of code did the author need to create the RealWorld app based on spec? To be fair some apps have a bit more bells and whistles, but it should not have a significant impact. The only folder we quantify is <code>src/</code> in each app. Doesn’t matter if it was auto generated or not — you still need to maintain it.</p>\n<h1 id=\"metric-1-performance\">Metric #1: Performance<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#metric-1-performance\"></a></h1>\n<p>We’ll check the Performance score from <a href=\"https://developers.google.com/web/tools/lighthouse/\">Lighthouse Audit</a> that ships with Chrome. Lighthouse returns a Performance score between 0 and 100. 0 is the lowest possible score. For more details check <a href=\"https://developers.google.com/web/tools/lighthouse/v3/scoring\">Lighthouse Scoring Guide</a>.</p>\n<h2 id=\"audit-settings\">Audit Settings<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#audit-settings\"></a></h2>\n<p><img src=\"https://miro.medium.com/max/1400/1*0B_8wqM-vS597MOtGaDWvQ.png\"></p>\n<p>Lighthouse Audit Settings for all tested apps</p>\n<h2 id=\"rationale\">Rationale<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rationale\"></a></h2>\n<p>The sooner you paint and the sooner someone can do something, the better the experience for the person who is using the App.</p>\n<p><img src=\"/assets/images/realworld-comparison-of-front-end-frameworks-2020__performance.png\"></p>\n<p>Performance (points 0–100) — higher is better.</p>\n<h2 id=\"remarks\">Remarks<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#remarks\"></a></h2>\n<p><em>Note: PureScript was skipped due to a lack of Demo application.</em></p>\n<h2 id=\"conclusion\">Conclusion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conclusion\"></a></h2>\n<p>Lighthouse Audit doesn’t sleep. You can see this year that apps that are not maintained/updated are falling off the 90 cliff. If your app scores >90 it will probably not make a tons of difference. That said AppRun, Elm, and Svelte are really impressive.</p>\n<h1 id=\"metric-2-size\">Metric #2: Size<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#metric-2-size\"></a></h1>\n<p>Transfer size is from the Chrome network tab. GZIPed response headers plus the response body, as delivered by the server.</p>\n<p>This depends on the size of a framework as well as on any extra dependencies added. Also how well a build build tool can eliminate the unused code from a bundle.</p>\n<h2 id=\"rationale-1\">Rationale<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rationale-1\"></a></h2>\n<p>The smaller the file, the faster the download, and less to parse.</p>\n<p><img src=\"/assets/images/realworld-comparison-of-front-end-frameworks-2020__transfer-size-in-kb.png\"></p>\n<p>Transfer size in KB — fewer is better</p>\n<h2 id=\"remarks-1\">Remarks<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#remarks-1\"></a></h2>\n<p><em>PureScript was skipped due to a lack of Demo application.</em></p>\n<p><em>Angular +ngrx +nx please don’t blame me for Angular + ngrx + nx — check Chrome Dev Tools Network Tab, and if I counted wrong — let me know.</em></p>\n<p><em>Rust + Yew + WebAssembly includes also .wasm file(s)</em></p>\n<h2 id=\"conclusion-1\">Conclusion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conclusion-1\"></a></h2>\n<p>Amazing work by Svelte and Stencil community, getting it under 20KB, is really an achievement.</p>\n<h1 id=\"metric-3-lines-of-code\">Metric #3: Lines of Code<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#metric-3-lines-of-code\"></a></h1>\n<p>Using <a href=\"https://github.com/AlDanial/cloc\">cloc</a> we count the lines of code in each repo’s src folder. Blank and comment lines are <strong>not</strong> part of this calculation. Why is this meaningful?</p>\n<blockquote>\n<p><em>If debugging is the process of removing software bugs, then programming must be the process of putting them in — Edsger Dijkstra</em></p>\n</blockquote>\n<h2 id=\"rationale-2\">Rationale<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rationale-2\"></a></h2>\n<p>This shows how succinct given library/framework/language is. How many lines of code do you need to implement almost the same app (some of them have a bit more belts and whistles) accordingly to the specification.</p>\n<p><img src=\"/assets/images/realworld-comparison-of-front-end-frameworks-2020__lines-of-code.png\"></p>\n<p># lines of code — fewer is better</p>\n<h2 id=\"remarks-2\">Remarks<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#remarks-2\"></a></h2>\n<p><em>Svelte was added after the article was initially published — thanks to</em> <a href=\"https://twitter.com/MasterSvelte/status/1245765234561708032\"><em>Svelte master</em></a><em>.</em></p>\n<p><em>riotjs-effector-universal-hot was skipped due to</em> <a href=\"https://github.com/AlDanial/cloc\"><em>cloc</em></a> <em>not being able to process</em> <code>_.riot_</code> <em>files.</em></p>\n<p><em>Angular+ngrx: LoC calculation done with</em> <code>_/libs_</code> <em>folder only including</em> <code>_.ts_</code> <em>and</em> <code>_.html_</code> <em>files. If you believe this is wrong, please let me know what is the correct number and how did you calculate it.</em></p>\n<h2 id=\"conclusion-2\">Conclusion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conclusion-2\"></a></h2>\n<p>Only Imba and <a href=\"https://www.learnreframe.com/\">ClojureScript with re-frame</a> can implement the app under 1000LoC. Clojure is known for being unusually expressive. Imba is here for the first time (last year cloc, didn’t know the .imba file format) and it looks like it’s here to stay. If you care about you LoC you know what to go for.</p>\n<h1 id=\"summary\">Summary<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#summary\"></a></h1>\n<p>Keep in mind that this is not exactly an apples-to-apples comparison. Some implementations use code splitting and some don’t. Some of them are hosted at GitHub, some at Now and some at Netlify. Do you still want to know which one is the best? I leave it up to you.</p>\n<h1 id=\"faq\">FAQ<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#faq\"></a></h1>\n<h2 id=\"1-why-were-framework-x-y-and-z-not-included-in-this-comparison\">#1 Why were framework X, Y, and Z not included in this comparison?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-why-were-framework-x-y-and-z-not-included-in-this-comparison\"></a></h2>\n<p>Because the implementation is not completed at <a href=\"https://github.com/gothinkster/realworld\">RealWorld repo</a>. Consider contributing! Implement the solution in your favorite library/framework of choice and we will include it next time!</p>\n<h2 id=\"2-why-do-you-call-it-the-real-world\">#2 Why do you call it the real world?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-why-do-you-call-it-the-real-world\"></a></h2>\n<p>Because it’s a bit more than a To-Do app. By RealWorld we don’t mean that we’ll compare salaries, maintenance, productivity, learning curves, etc. There are <a href=\"https://insights.stackoverflow.com/survey/2018/\">other surveys</a> that answer some of these questions. What we mean by RealWorld is an application that connects to a server, authenticates, and allows users to CRUD — just as a real-world app would do.</p>\n<h2 id=\"3-why-didnt-you-include-my-favorite-framework\">#3 Why didn’t you include my favorite framework?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3-why-didnt-you-include-my-favorite-framework\"></a></h2>\n<p>Please see #1 above, but just in case, here it comes again: because the implementation is not completed at <a href=\"https://github.com/gothinkster/realworld\">RealWorld repo</a>. I don’t do all of the implementations — it’s a community effort. Consider contributing if you want to see your framework in the comparison.</p>\n<h2 id=\"4-which-version-of-the-libraryframework-did-you-include\">#4 Which version of the library/framework did you include?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#4-which-version-of-the-libraryframework-did-you-include\"></a></h2>\n<p>The one that is available at the time of writing (Mar 2020). The information comes from <a href=\"https://github.com/gothinkster/realworld\">RealWorld repo</a>. I’m sure you can find this out from the <a href=\"https://github.com/gothinkster/realworld\">GitHub repo</a>.</p>\n<h2 id=\"5-why-did-you-forget-to-include-a-framework-that-is-more-popular-than-the-one-in-the-comparison\">#5 Why did you forget to include a framework that is more popular than the one in the comparison?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#5-why-did-you-forget-to-include-a-framework-that-is-more-popular-than-the-one-in-the-comparison\"></a></h2>\n<p>Again, see #1 and #3. The implementation is not complete at <a href=\"https://github.com/gothinkster/realworld\">RealWorld repo</a>; it’s that simple.</p>\n<blockquote>\n<p>If you like this article you should <a href=\"https://twitter.com/JacekSchae\">follow me on Twitter</a>. I only write/tweet about programming and technology.</p>\n</blockquote>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}