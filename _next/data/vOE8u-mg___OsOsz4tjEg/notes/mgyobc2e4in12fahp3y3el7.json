{"pageProps":{"note":{"id":"mgyobc2e4in12fahp3y3el7","title":"An Interactive Guide to Flexbox","desc":"","updated":1670223354453,"created":1670221005197,"custom":{},"fname":"dev.CSS.interactive-guide-to-flexbox","type":"note","vault":{"fsPath":"vault"},"contentHash":"d906b1a59b231f171714c7826f76036f","links":[],"anchors":{"introduction-to-flexbox":{"type":"header","text":"Introduction to Flexbox","value":"introduction-to-flexbox","line":53,"column":0,"depth":2},"alignment":{"type":"header","text":"Alignment","value":"alignment","line":71,"column":0,"depth":2},"content-vs-items":{"type":"header","text":"Content vs. items","value":"content-vs-items","line":75,"column":0,"depth":3},"hypothetical-size":{"type":"header","text":"Hypothetical size","value":"hypothetical-size","line":110,"column":0,"depth":2},"code-playground":{"type":"header","text":"Code Playground","value":"code-playground","line":126,"column":0,"depth":3},"growing-and-shrinking":{"type":"header","text":"Growing and shrinking","value":"growing-and-shrinking","line":166,"column":0,"depth":2},"flex-basis":{"type":"header","text":"flex-basis","value":"flex-basis","line":172,"column":0,"depth":3},"flex-grow":{"type":"header","text":"flex-grow","value":"flex-grow","line":192,"column":0,"depth":3},"flex-shrink":{"type":"header","text":"flex-shrink","value":"flex-shrink","line":204,"column":0,"depth":3},"preventing-shrinking":{"type":"header","text":"Preventing shrinking","value":"preventing-shrinking","line":228,"column":0,"depth":3},"the-minimum-size-gotcha":{"type":"header","text":"The minimum size gotcha","value":"the-minimum-size-gotcha","line":255,"column":0,"depth":2},"auto-margins":{"type":"header","text":"Auto margins","value":"auto-margins","line":281,"column":0,"depth":3},"wrapping":{"type":"header","text":"Wrapping","value":"wrapping","line":291,"column":0,"depth":2}},"children":[],"parent":"14ndat1u737ts8fzosspizp","data":{}},"body":"<h1 id=\"an-interactive-guide-to-flexbox\">An Interactive Guide to Flexbox<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#an-interactive-guide-to-flexbox\"></a></h1>\n<blockquote>\n<p><a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/\">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/</a></p>\n</blockquote>\n<p>This demo is heavily inspired by Adam Argyle’s incredible <a href=\"https://codepen.io/argyleink/pen/LYEegOO\">“4 layouts for the price of 1”</a> codepen. <em>It uses no media/container queries.</em> Instead of setting arbitrary breakpoints, it uses <em>fluid principles</em> to create a layout that flows seamlessly.</p>\n<p>Here's the relevant CSS:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">form</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> flex-end<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> wrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">gap</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\"><span class=\"token class\">.name</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">160</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\"><span class=\"token class\">.email</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">form</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> flex-end<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> wrap<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">gap</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\"><span class=\"token class\">.name</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">160</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\"><span class=\"token class\">.email</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"introduction-to-flexbox\"><a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#introduction-to-flexbox\">Introduction to Flexbox</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#introduction-to-flexbox\"></a></h2>\n<p>...</p>\n<p><strong>Each layout algorithm is designed to solve a specific problem.</strong> The default “Flow” layout is meant to create digital documents; it's essentially the <em>Microsoft Word</em> layout algorithm. Headings and paragraphs stack vertically as blocks, while things like text, links, and images sit inconspicuously within these blocks.</p>\n<p><strong>So, what problem does Flexbox solve?</strong> Flexbox is all about arranging a group of items in a row or column, and giving us a <em>ridiculous</em> amount of control over the distribution and alignment of those items. As the name suggests, Flexbox is all about <em>flexibility</em>. We can control whether items grow or shrink, how the extra space is distributed, and more.</p>\n<blockquote>\n<p><strong>Is it still relevant?</strong></p>\n<p>You might be wondering: now that CSS Grid is well-supported in modern browsers, isn't Flexbox obsolete?</p>\n<p>CSS Grid is a wonderful layout mode, <strong>but it solves different problems than Flexbox.</strong> We should learn <em>both</em> layout modes, and use the right tool for the job.</p>\n<p>Flexbox still reigns supreme when it comes to dynamic, fluid UIs that arrange items in a vertical or horizontal list. We'll see an example in this guide, the <em>deconstructed pancake</em>, that can't easily be accomplished with CSS Grid.</p>\n<p>Honestly, as someone comfortable with both CSS Grid and Flexbox, I still find myself reaching for Flexbox quite often!</p>\n</blockquote>\n<h2 id=\"alignment\"><a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#alignment\">Alignment</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#alignment\"></a></h2>\n<p>...</p>\n<h3 id=\"content-vs-items\"><a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#content-vs-items\">Content vs. items</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#content-vs-items\"></a></h3>\n<p>So, based on what we've learned so far, Flexbox might seem pretty arbitrary. Why is it <code>justify-content</code> and <code>align-items</code>, and not <code>justify-_items_</code>, or <code>align-_content_</code>?</p>\n<p>For that matter, why is there an <code>align-self</code>, but not a <code>_justify_-self</code>??</p>\n<p><strong>These questions get at one of the most important and misunderstood things about Flexbox.</strong> To help me explain, I'd like to use a metaphor.</p>\n<p>In Flexbox, items are distributed along the primary axis. By default, they're nicely lined up, side-by-side. I can draw a straight horizontal line that skewers <em>all</em> of the children, like a kebab?:</p>\n<p>The cross axis is different, though. A straight vertical line will only ever intersect <em>one</em> of the children.</p>\n<p>It's less like a kebab, and more like a group of cocktail wieners?:</p>\n<p>There's a significant difference here. With the cocktail wieners, each item can move along its stick <em>without interfering</em> with any of the other items:</p>\n<p>By contrast, with our primary axis skewering each sibling, a single item <em>can’t</em> move along its stick without bumping into its siblings! <strong>Try dragging the middle piece side to side:</strong></p>\n<p><strong>This is the fundamental difference between the primary/cross axis.</strong> When we're talking about alignment in the <em>cross</em> axis, each item can do whatever it wants. In the <em>primary</em> axis, though, we can only think about how to distribute the <em>group</em>.</p>\n<p><strong>That's why there's no</strong> <code>justify-self</code><strong>.</strong> What would it mean for that middle piece to set <code>justify-self: flex-start</code>? There's already another piece there!</p>\n<p>With all of this context in mind, let's give a proper definition to all 4 terms we've been talking about:</p>\n<ul>\n<li><code>justify</code> — to position something along the <em>primary axis</em>.</li>\n<li><code>align</code> — to position something along the <em>cross axis</em>.</li>\n<li><code>content</code> — a group of “stuff” that can be distributed.</li>\n<li><code>items</code> — single items that can be positioned individually.</li>\n</ul>\n<p><strong>And so:</strong> we have <code>justify-content</code> to control the distribution of the group along the primary axis, and we have <code>align-items</code> to position each item individually along the cross axis. These are the two main properties we use to manage layout with Flexbox.</p>\n<p>There's no <code>justify-items</code> for the same reason that there's no <code>justify-self</code>; when it comes to the primary axis, <em>we have to think of the items as a group,</em> as content that can be distributed.</p>\n<p>What about <code>align-content</code>? Actually, this <em>does</em> exist within Flexbox! We'll cover it a little later on, when we talk about the <code>flex-wrap</code> property.</p>\n<h2 id=\"hypothetical-size\"><a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#hypothetical-size\">Hypothetical size</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hypothetical-size\"></a></h2>\n<p>Let's talk about one of the most eye-opening realizations I've had about Flexbox.</p>\n<p>Suppose I have the following CSS:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.item</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>A reasonable person might look at this and say: “alright, so we'll get an item that is 2000 pixels wide”. <em>But will that always be true?</em></p>\n<p>Let's test it:</p>\n<h3 id=\"code-playground\">Code Playground<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#code-playground\"></a></h3>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\"><span class=\"token class\">.flex-wrapper</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token selector\"><span class=\"token class\">.item</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2000</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>style</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>flex-wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>This is interesting, isn't it?</p>\n<p><strong>Both items have the exact same CSS applied.</strong> They each have <code>width: 2000px</code>. And yet, the first item is much wider than the second!</p>\n<p>The difference is the <em>layout mode</em>. The first item is being rendered using Flow layout, and in Flow layout, <code>width</code> is a <em>hard constraint</em>. When we set <code>width: 2000px</code>, we'll get a 2000-pixel wide element, even if it has to burst through the side of the viewport like the Kool-Aid guy.</p>\n<p>In <em>Flexbox</em>, however, the <code>width</code> property is implemented differently. It's more of a suggestion than a hard constraint.</p>\n<p>The specification has a name for this: the <em>hypothetical size</em>. It's the size an element <em>would</em> be, in a perfect utopian world, with nothing getting in the way.</p>\n<p>Alas, things are rarely so simple. In this case, the limiting factor is that the parent <em>doesn't have room</em> for a 2000px-wide child. And so, the child's size is reduced so that it fits.</p>\n<p>This is a core part of the Flexbox philosophy. Things are fluid and flexible and can adjust to the constraints of the world.</p>\n<blockquote>\n<p><strong>Inputs for the algorithms</strong></p>\n<p>We tend to think of the CSS language as a collection of properties, but <strong>I think that's the wrong mental model.</strong> As we've seen, the <code>width</code> property behaves differently depending on the layout mode used!</p>\n<p>Instead, I like to think of CSS as a collection of layout modes. Each layout mode is an algorithm that can <em>implement or redefine</em> each CSS property. We provide an algorithm with our CSS declarations (key/value pairs), and the algorithm decides how to use them.</p>\n<p>In other words, <strong>the CSS we write is an input for these algorithms</strong>, like arguments passed to a function. If we want to <em>truly</em> feel comfortable with CSS, it's not enough to learn the properties; we have to learn how the algorithms <em>use</em> these properties.</p>\n<p>This is the central philosophy taken by my course, <a href=\"https://css-for-js.dev/\"><strong>CSS for JavaScript Developers</strong></a>. Rather than have you memorize a bunch of inscrutable CSS snippets, we pop the hood on the language and learn how all of the layout modes work.</p>\n</blockquote>\n<h2 id=\"growing-and-shrinking\"><a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#growing-and-shrinking\">Growing and shrinking</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#growing-and-shrinking\"></a></h2>\n<p>So, we've seen that the Flexbox algorithm has some built-in flexibility, with <em>hypothetical sizes</em>. But to <em>really</em> see how fluid Flexbox can be, we need to talk about 3 properties: <code>flex-grow</code>, <code>flex-shrink</code>, and <code>flex-basis</code>.</p>\n<p>Let's look at each property.</p>\n<h3 id=\"flex-basis\"><a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#flex-basis\">flex-basis</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#flex-basis\"></a></h3>\n<p>I admit it: for a long time, I didn't really understand what the <em>deal</em> was with <code>flex-basis</code>. 😅</p>\n<p><strong>To put it simply:</strong> In a Flex row, <code>flex-basis</code> does the same thing as <code>width</code>. In a Flex column, <code>flex-basis</code> does the same thing as <code>height</code>.</p>\n<p>As we've learned, everything in Flexbox is <em>pegged to the primary/cross axis</em>. For example, <code>justify-content</code> will distribute the children along the primary axis, and it works exactly the same way whether the primary axis runs horizontally or vertically.</p>\n<p><code>width</code> and <code>height</code> don't follow this rule, though! <code>width</code> will always affect the horizontal size. It doesn't suddenly become <code>height</code> when we flip <code>flex-direction</code> from <code>row</code> to <code>column</code>.</p>\n<p><strong>And so, the Flexbox authors created a generic “size” property called <code>flex-basis</code>.</strong> It's like <code>width</code> or <code>height</code>, but pegged to the <em>primary axis</em>, like everything else. It allows us to set the <em>hypothetical size</em> of an element in the primary-axis direction, regardless of whether that's horizontal or vertical.</p>\n<p>Like we saw with <code>width</code>, <code>flex-basis</code> is more of a suggestion than a hard constraint. At a certain point, there just isn't enough space for all of the elements to sit at their assigned size, and so they have to compromise, in order to avoid an overflow.</p>\n<blockquote>\n<p><strong>Not <em>exactly</em> the same</strong></p>\n<p>In general, we can use <code>width</code> and <code>flex-basis</code> interchangeably in a Flex row, but there are some exceptions. For example, the <code>width</code> property affects replaced elements like images differently than <code>flex-basis</code>. Also, <code>width</code> can reduce an item below its <em>minimum</em> size, while <code>flex-basis</code> can't.</p>\n<p>It's well outside the scope of this blog post, but I wanted to mention it, because you may occasionally run into edge-cases where the two properties have different effects.</p>\n</blockquote>\n<h3 id=\"flex-grow\">flex-grow<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#flex-grow\"></a></h3>\n<p>By default, elements in a Flex context will shrink down to their minimum comfortable size along the primary axis. This often creates extra space.</p>\n<p>We can specify how that space should be consumed with the flex-grow property.</p>\n<p>The default value for <code>flex-grow</code> is 0, which means that growing is opt-in. If we want a child to gobble up any extra space in the container, we need to explicitly tell it so.</p>\n<p><strong>What if <em>multiple</em> children set <code>flex-grow</code>?</strong> In this case, the extra space is divvied up between children, proportionally based on their <code>flex-grow</code> value.</p>\n<p>I think it'll be easier to explain visually. Try incrementing/decrementing each child. <a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#flex-grow\">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#flex-grow</a></p>\n<h3 id=\"flex-shrink\">flex-shrink<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#flex-shrink\"></a></h3>\n<p>In most of the examples we've seen so far, we've had extra space to work with. But what if our children are <em>too big</em> for their container?</p>\n<p><strong>Let's test it.</strong> Try shrinking the container to see what happens:\n<a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#flex-shrink\">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#flex-shrink</a></p>\n<p>Interesting, right? Both items shrink, <strong>but they shrink proportionally.</strong> The first child is always 2x the width of the second child.*</p>\n<p>As a friendly reminder, <code>flex-basis</code> serves the same purpose as <code>width</code>. We'll use <code>flex-basis</code> because it's conventional, but we'd get the <strong>exact same result</strong> if we used <code>width</code>!</p>\n<p><code>flex-basis</code> and <code>width</code> set the elements' <em>hypothetical size</em>. The Flexbox algorithm might shrink elements below this desired size, but by default, they'll always scale together, preserving the ratio between both elements.</p>\n<p>Now, what if we <em>don't</em> want our elements to scale down proportionally? <strong>That's where the <code>flex-shrink</code> property comes in.</strong></p>\n<p>Take a couple of minutes and poke at this demo. <strong>See if you can figure out what's going on here.</strong> We'll explore below.\n<a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#flex-shrink\">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#flex-shrink</a></p>\n<p><strong>The <code>flex-shrink</code> property lets us decide how that balance is paid.</strong></p>\n<p>Like <code>flex-grow</code>, it's a ratio. By default, both children have <code>flex-shrink: 1</code>, and so each child pays ½ of the balance. They each forfeit 50px, their actual size shrinking from 250px to 200px.</p>\n<p>Note that the absolute values don't matter, <strong>it's all about the ratio.</strong> If both children have <code>flex-shrink: 1</code>, each child will pay ½ of the total deficit. If both children are cranked up to <code>flex-shrink: 1000</code>, each child will pay 1000/2000 of the total deficit. Either way, it works out to the same thing.</p>\n<h3 id=\"preventing-shrinking\">Preventing shrinking<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#preventing-shrinking\"></a></h3>\n<p>Sometimes, we don't <em>want</em> some of our Flex children to shrink.</p>\n<p>I notice this all the time with SVG icons and shapes. Let's look at a simplified example: <a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#preventing-shrinking\">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#preventing-shrinking</a></p>\n<p>When the container gets narrow, our two circles get squashed into gross ovals. <strong>What if we want them to stay circular?</strong></p>\n<p>We can do this by setting <code>flex-shrink: 0</code>:\n<a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#preventing-shrinking\">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#preventing-shrinking</a></p>\n<blockquote>\n<p><strong>A simpler approach?</strong></p>\n<p>So, I teach this concept in <a href=\"https://css-for-js.dev/\">my course</a>, and every now and then, someone will wonder why we're going through all the trouble of using <code>flex-shrink</code> when there's a simpler approach available:</p>\n</blockquote>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.item</span><span class=\"token class\">.ball</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">32</span><span class=\"token unit\">px</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>A few years ago, I would have agreed. If we set a minimum width, the item won't be able to shrink below that point! We're adding a hard constraint, instead of the soft constraint of <code>width</code> / <code>flex-basis</code>.</p>\n<p>I think this is one of those situations where it's easy to confuse “familiar” with “simple”. You're probably much more comfortable with <code>min-width</code> than <code>flex-shrink</code>, but that doesn't mean <code>flex-shrink</code> is more complicated!</p>\n<p>After a few years of practice, I actually feel like setting <code>flex-shrink: 0</code> is the more straightforward / direct solution to this particular problem. Though, <code>min-width</code> still has an important role to play in the Flexbox algorithm! We'll talk about that next.</p>\n</blockquote>\n<h2 id=\"the-minimum-size-gotcha\">The minimum size gotcha<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-minimum-size-gotcha\"></a></h2>\n<p>There's <em>one more thing</em> we need to talk about here, and it's super important. It may be the single most helpful thing in this entire article!</p>\n<p>Let's suppose we're building a fluid search form for an e-commerce store: <a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#the-minimum-size-gotcha\">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#the-minimum-size-gotcha</a></p>\n<p>When the container shrinks below a certain point, <strong>the content overflows!</strong></p>\n<p><em>But why??</em> <code>flex-shrink</code> has a default value of <code>1</code>, and we haven't removed it, so the search input <em>should</em> be able to shrink as much as it needs to! Why is it refusing to shrink?</p>\n<p><strong>Here's the deal:</strong> In addition to the <em>hypothetical</em> size, there's another important size that the Flexbox algorithm cares about: <em>the minimum size</em>.</p>\n<p>The Flexbox algorithm refuses to shrink a child below its minimum size. The content will overflow rather than shrink further, <em>no matter how high we crank <code>flex-shrink</code>!</em></p>\n<p>Text inputs have a default minimum size of 170px-200px (it varies between browsers). That's the limitation we're running into above.</p>\n<p><strong>Here's the good news:</strong> We can redefine the minimum size with the <code>min-width</code> property.</p>\n<blockquote>\n<p><strong>Proceed with caution</strong></p>\n<p>It's worth noting that the built-in minimum size <em>does</em> serve a purpose. It's meant to act as a guardrail, to prevent something even worse from happening.</p>\n<p>For example: when we apply <code>min-width: 0px</code> to our text-containing Flex children, things break in an even worse way: <a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#the-minimum-size-gotcha\">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#the-minimum-size-gotcha</a></p>\n</blockquote>\n<blockquote>\n<p>With great power comes great responsibility, and <code>min-width</code> is a particularly powerful property when it comes to Flexbox. It's gotten me out of a jam more than once, but I'm always careful to make sure I'm not making things worse!</p>\n</blockquote>\n<h3 id=\"auto-margins\">Auto margins<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#auto-margins\"></a></h3>\n<p>There's one other spacing-related trick I want to share. It's been around since the early days of Flexbox, but it's relatively obscure, and it <em>blew my mind</em> when I first discovered it.</p>\n<p>The <code>margin</code> property is used to add space around a specific element. In some layout modes, like Flow and Positioned, it can even be used to center an element, with <code>margin: auto</code>.</p>\n<p>Auto margins are much more interesting in Flexbox: <a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#auto-margins\">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#auto-margins</a></p>\n<p>Auto margins will <strong>gobble up the extra space, and apply it to the element's margin.</strong> It gives us precise control over where to distribute the extra space.</p>\n<h2 id=\"wrapping\">Wrapping<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#wrapping\"></a></h2>\n<p>So far, all of our items have sat side-by-side, in a single row/column. The <code>flex-wrap</code> property allows us to change that.</p>\n<p>Each row is its own mini Flexbox environment. <code>align-items</code> will move each item up or down within the invisible box that wraps around each row.</p>\n<p>But what if we want to <em>align the rows themselves</em>? We can do that with the <code>align-content</code> property: <a href=\"https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#wrapping\">https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#wrapping</a></p>\n<p>To summarize what's happening here:</p>\n<ul>\n<li><code>flex-wrap: wrap</code> gives us two rows of stuff.</li>\n<li>Within each row, <code>align-items</code> lets us slide each individual child up or down</li>\n<li>Zooming out, however, we have these two rows within a single Flex context! The cross axis will now intersect <em>two</em> rows, not one. And so, we can't move the rows individually, we need to distribute them <em>as a group</em>.</li>\n<li>Using our definitions from above, we're dealing with <em>content</em>, not <em>items</em>. But we're also still talking about the cross axis! And so the property we want is <code>align-content</code>.</li>\n</ul>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}