{"pageProps":{"note":{"id":"sifjdlyh7vc7t98zi4y8ydq","title":"Tips for typing import statements in JavaScript","desc":"","updated":1670459913629,"created":1670459855775,"custom":{},"fname":"dev.tools.vs-code.typing-import-statements","type":"note","vault":{"fsPath":"vault"},"contentHash":"98ec9e9459b9aa2666d7609a2329ef95","links":[],"anchors":{"does-javascripts-import-statement-have-the-wrong-syntax":{"type":"header","text":"Does JavaScript’s import statement have the wrong syntax?  #","value":"does-javascripts-import-statement-have-the-wrong-syntax","line":14,"column":0,"depth":2},"auto-importing":{"type":"header","text":"Auto-importing  #","value":"auto-importing","line":39,"column":0,"depth":2},"manually-typing-import-statements":{"type":"header","text":"Manually typing import statements  #","value":"manually-typing-import-statements","line":50,"column":0,"depth":2},"a-code-snippet-for-faster-entry":{"type":"header","text":"A code snippet for faster entry  #","value":"a-code-snippet-for-faster-entry","line":66,"column":0,"depth":2},"further-reading":{"type":"header","text":"Further reading  #","value":"further-reading","line":106,"column":0,"depth":2}},"children":[],"parent":"ncyn8xow2x0rfon0mjy0bnc","data":{}},"body":"<h1 id=\"tips-for-typing-import-statements-in-javascript\">Tips for typing import statements in JavaScript<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tips-for-typing-import-statements-in-javascript\"></a></h1>\n<blockquote>\n<p><a href=\"https://2ality.com/2017/08/typing-import-statements.html\">https://2ality.com/2017/08/typing-import-statements.html</a></p>\n</blockquote>\n<p>This blog post gives tips for typing import statements more quickly, including a helpful text snippet for Visual Studio Code.</p>\n<hr>\n<h2 id=\"does-javascripts-import-statement-have-the-wrong-syntax\">Does JavaScript’s <code>import</code> statement have the wrong syntax?  <a href=\"https://2ality.com/2017/08/typing-import-statements.html#wrong-import-statement-syntax\">#</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#does-javascripts-import-statement-have-the-wrong-syntax\"></a></h2>\n<p>People occasionally complain that JavaScript’s import statement has it backwards. The syntax is:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./my-module.js\"</span>\n</code></pre>\n<p>They argue that it should be:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">from</span> <span class=\"token string\">'./my-module.js'</span> <span class=\"token keyword module\">import</span> <span class=\"token punctuation\">{</span>one<span class=\"token punctuation\">,</span> two<span class=\"token punctuation\">,</span> three<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>As an aside, that’s how Python does imports.</p>\n<p>Why? It would make auto-expansion easier: We’d first type the module specifier <code>'./my-module.js'</code> and then the imported values <code>{one, two, three}</code>. During the latter step, the IDE has the necessary context for helping us out.</p>\n<p>The reasons for the different order in JavaScript are:</p>\n<ul>\n<li>It’s the same order as variable declarations.</li>\n<li>It’s the same order as using <code>require()</code> in Node.js modules.</li>\n</ul>\n<p>Given that we only write code once but read it many times, the focus should be on which version is easier to read. And there, I slightly prefer JavaScript’s current syntax.</p>\n<h2 id=\"auto-importing\">Auto-importing  <a href=\"https://2ality.com/2017/08/typing-import-statements.html#auto-importing\">#</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#auto-importing\"></a></h2>\n<p>These days, I mostly write TypeScript and I mostly use Visual Studio Code (VSC).</p>\n<p>There, auto-importing has gotten really good: If there is a value I want to import, I type its name, auto-expand it (Control-Space on macOS) and VSC imports it for me. I neither have to know the name of the module nor get its relative path right.</p>\n<p>Additionally, I use the “Organize Imports” command (which has a keyboard shortcut that you can look up via the Command Palette) to:</p>\n<ul>\n<li>Remove unused imports.</li>\n<li>Show modules and imported values in a consistent order.</li>\n</ul>\n<h2 id=\"manually-typing-import-statements\">Manually typing <code>import</code> statements  <a href=\"https://2ality.com/2017/08/typing-import-statements.html#manually-typing-import-statements\">#</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#manually-typing-import-statements\"></a></h2>\n<p>When typing import statements manually:</p>\n<ol>\n<li>\n<p>I import nothing via <code>{}</code> and auto-expand the module specifier:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"█\"</span>\n</code></pre>\n</li>\n<li>\n<p>I go back and auto-expand the imported values:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span>█<span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'./my-module.js'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<h2 id=\"a-code-snippet-for-faster-entry\">A code snippet for faster entry  <a href=\"https://2ality.com/2017/08/typing-import-statements.html#a-code-snippet-for-faster-entry\">#</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#a-code-snippet-for-faster-entry\"></a></h2>\n<p>To create a snippet for Visual Studio Code that helps with <code>import</code> statements, follow these steps:</p>\n<ol>\n<li>\n<p>Execute the menu command <code>File > Preferences > User Snippets</code> (Mac: <code>Code > Preferences > User Snippets</code>).</p>\n</li>\n<li>\n<p>Pick the language “JavaScript”.</p>\n</li>\n<li>\n<p>Add this property to the JSON file:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"import\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"prefix\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"imp\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"body\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"import ${2:values} from '${1:specifier}';$0\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"import statement\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n</ol>\n<p>Explanation:</p>\n<ul>\n<li>Initially, place the cursor after <code>from</code> (position <code>$1</code>). The placeholder we’ll see at that position is <code>specifier</code>.</li>\n<li>The next time we press the <code>&#x3C;tab></code> key, the cursor will jump to after <code>import</code> (position <code>$2</code>).</li>\n<li>The last tab stop is after the semicolon (position <code>$0</code>).</li>\n</ul>\n<p>Now editing works as follows:</p>\n<ol>\n<li><code>imp &#x3C;tab></code></li>\n<li><code>import values from '█';</code></li>\n<li>Use auto-expansion.</li>\n<li><code>import values from './my-module.js█';</code></li>\n<li><code>&#x3C;tab></code></li>\n<li><code>import █ from './my-module.js';</code></li>\n<li><code>import {█} from './my-module.js';</code></li>\n<li>Use auto-expansion.</li>\n<li><code>import {one, two, three█} from './my-module.js';</code></li>\n<li><code>&#x3C;tab></code></li>\n<li><code>import {one, two, three} from './my-module.js';█</code></li>\n</ol>\n<p><strong>Update 2017-09-20:</strong> A similar snippet is now built into Visual Studio Code for <code>.js(x)</code> files (previously, only TypeScript was supported (<a href=\"https://github.com/Microsoft/vscode/pull/34682\">more information</a>).</p>\n<h2 id=\"further-reading\">Further reading  <a href=\"https://2ality.com/2017/08/typing-import-statements.html#further-reading\">#</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#further-reading\"></a></h2>\n<ul>\n<li><a href=\"https://code.visualstudio.com/docs/editor/userdefinedsnippets\">Creating your own Snippets in Visual Studio Code</a></li>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\">Chapter “Modules”</a> in “JavaScript for impatient programmers”</li>\n</ul>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}