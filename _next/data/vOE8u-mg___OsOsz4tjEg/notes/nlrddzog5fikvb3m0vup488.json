{"pageProps":{"note":{"id":"nlrddzog5fikvb3m0vup488","title":"API Bites — Payload Conventions","desc":"","updated":1669536838759,"created":1669536544480,"custom":{},"fname":"dev.back-end.api-bites-payload-conventions","type":"note","vault":{"fsPath":"vault"},"contentHash":"b7e474cd4715b6585500dc53065975b9","links":[],"anchors":{"encoding":{"type":"header","text":"Encoding","value":"encoding","line":16,"column":0,"depth":2},"interoperable-data-formats":{"type":"header","text":"Interoperable Data Formats","value":"interoperable-data-formats","line":20,"column":0,"depth":2},"json-as-the-default-format":{"type":"header","text":"JSON as the Default Format","value":"json-as-the-default-format","line":22,"column":0,"depth":3},"other-media-types":{"type":"header","text":"Other Media Types","value":"other-media-types","line":28,"column":0,"depth":3},"date-time-format":{"type":"header","text":"Date-Time Format","value":"date-time-format","line":38,"column":0,"depth":3},"naming-conventions":{"type":"header","text":"Naming Conventions","value":"naming-conventions","line":47,"column":0,"depth":2},"field-names":{"type":"header","text":"Field Names","value":"field-names","line":49,"column":0,"depth":3},"resource-names":{"type":"header","text":"Resource Names","value":"resource-names","line":55,"column":0,"depth":3},"resource-identifiers":{"type":"header","text":"Resource Identifiers","value":"resource-identifiers","line":63,"column":0,"depth":3},"resource-references":{"type":"header","text":"Resource References","value":"resource-references","line":71,"column":0,"depth":3},"document-structure":{"type":"header","text":"Document Structure","value":"document-structure","line":82,"column":0,"depth":2},"root-level-object":{"type":"header","text":"Root Level Object","value":"root-level-object","line":84,"column":0,"depth":3},"flat-structure":{"type":"header","text":"Flat Structure","value":"flat-structure","line":94,"column":0,"depth":3},"the-data-object":{"type":"header","text":"The “data” Object","value":"the-data-object","line":98,"column":0,"depth":3},"request-document":{"type":"header","text":"Request Document","value":"request-document","line":135,"column":0,"depth":2},"resource-instances-and-collections":{"type":"header","text":"Resource Instances and Collections","value":"resource-instances-and-collections","line":137,"column":0,"depth":3},"request-payload":{"type":"header","text":"Request Payload","value":"request-payload","line":145,"column":0,"depth":3},"response-document":{"type":"header","text":"Response Document","value":"response-document","line":159,"column":0,"depth":2},"media-type":{"type":"header","text":"Media Type","value":"media-type","line":161,"column":0,"depth":3},"resource-identifier":{"type":"header","text":"Resource Identifier","value":"resource-identifier","line":167,"column":0,"depth":3},"related-resources":{"type":"header","text":"Related Resources","value":"related-resources","line":171,"column":0,"depth":3},"link-relations-and-hateoas":{"type":"header","text":"Link Relations and HATEOAS","value":"link-relations-and-hateoas","line":191,"column":0,"depth":3},"pagination":{"type":"header","text":"Pagination","value":"pagination","line":214,"column":0,"depth":3},"collections-of-resources":{"type":"header","text":"Collections of Resources","value":"collections-of-resources","line":254,"column":0,"depth":3},"binary-and-multi-part-content":{"type":"header","text":"Binary and Multi-part Content","value":"binary-and-multi-part-content","line":292,"column":0,"depth":2},"wrap-up":{"type":"header","text":"Wrap-up","value":"wrap-up","line":300,"column":0,"depth":2},"related-discussions-on-medium":{"type":"header","text":"Related Discussions on Medium","value":"related-discussions-on-medium","line":304,"column":0,"depth":2}},"children":[],"parent":"6w36dgapan7eummy1q6jpx1","data":{}},"body":"<h1 id=\"api-bites--payload-conventions\">API Bites — Payload Conventions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#api-bites--payload-conventions\"></a></h1>\n<p>Encoding, Data Formats and Document Structure</p>\n<blockquote>\n<p><a href=\"https://medium.com/@trgoodwill/api-bites-payload-conventions-76ffde7f5eb2\">https://medium.com/@trgoodwill/api-bites-payload-conventions-76ffde7f5eb2</a></p>\n</blockquote>\n<p>API Development Standards are a focused collection of imperatives, conventions and guidance, and are intended to improve the <strong><em>consistency, stability, generality, predictability and usability of business resource APIs</em></strong>.</p>\n<p><em>The following</em> <strong><em>‘sample’ set of standards</em></strong> <em>is focused purely on payload conventions. More to come…</em></p>\n<h2 id=\"encoding\">Encoding<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#encoding\"></a></h2>\n<p>Unicode Transformation Format-8 (UTF-8) is the standard encoding type for all text and textual representations of data through APIs and is the default encoding for JSON (RFC 7159). UTF-8 encoding must be adhered to for all APIs published across the enterprise and externally. Other encodings may be used for ‘private’ partner APIs if and only if there are technical limitations to using UTF-8.</p>\n<h2 id=\"interoperable-data-formats\">Interoperable Data Formats<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#interoperable-data-formats\"></a></h2>\n<h3 id=\"json-as-the-default-format\">JSON as the Default Format<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#json-as-the-default-format\"></a></h3>\n<p>All new and uplifted API implementations <em>really should</em> support the JSON data format at a minimum. This does not preclude other media types, such as XML.</p>\n<p>JSON payload must comply with API Request and API Response document structure requirements. JSON ‘RequestBody’ and ‘Responses’ payloads should be defined under the OpenAPI 3.0 ‘application/json’ content keyword.</p>\n<h3 id=\"other-media-types\">Other Media Types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#other-media-types\"></a></h3>\n<p>It is possible to request more than representation the same resource if multiple supported media types are specified in the OpenAPI 3.0 API specification.</p>\n<p>The returned media type must conform to the value provided in the API request Accept header, or the 1st supported media type if multiple values are specified. The default content type is JSON (application/json).</p>\n<p>If the requested media type(s) are unsupported, the server is expected to return an HTTP response status ‘415 — Unsupported Media Type’.</p>\n<p>The practice of specifying media type with a resource label should be avoided for resource APIs documented with an OpenAPI specification (e.g. avoid ‘resource/{resourceId}.json’).</p>\n<h3 id=\"date-time-format\"><strong>Date-Time Format</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#date-time-format\"></a></h3>\n<p>A consistent date-time format, conforming to <a href=\"https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14\">RFC3339</a>, <strong><em>should</em></strong> be used. RFC3339 compliant date-time formats are provided by the OpenAPI 3.0 specification. Date-time fields should be defined in an API specification in the following manner:</p>\n<ul>\n<li>Date fields should be defined as type = “string”, format=”date”.</li>\n<li>Datetime fields should be defined as type = “string”, format=”date-time”.</li>\n</ul>\n<p>The RFC 3339 profile of the standard ISO 8601, in Coordinated Universal Time (UTC), is the standard datetime format for data and timestamp fields in enterprise business resource APIs. The date format is <yyyy-mm-dd> while timestamp format is <yyyy-mm-dd>T&#x3C;hh:mm:ss>Z. Time duration values should be strings, formatted as recommended by ISO 8601, e.g. “P3Y6M4DT12H30M5S”. Any other representation of time in the source system should be converted to and from these standard formats when exchanging data via APIs.</yyyy-mm-dd></yyyy-mm-dd></p>\n<h2 id=\"naming-conventions\">Naming Conventions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#naming-conventions\"></a></h2>\n<h3 id=\"field-names\">Field Names<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#field-names\"></a></h3>\n<p>For request and response body field names (and query parameter names), case MUST be consistent. camelCase should probably be the default choice unless there are compelling reasons to go a different way. e.g. <code>\"familyName\" : \"Jones\"</code></p>\n<p>Fields that represent arrays should be named using plural nouns (e.g. ‘products’).</p>\n<h3 id=\"resource-names\">Resource Names<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#resource-names\"></a></h3>\n<p>Resource names must be plural nouns when referring to a resource collection (there are potentially a number of instances) e.g. ‘/<strong>customers’</strong>. A singleton, such as ‘/customers/1234/<strong>cart’</strong> must be singular.</p>\n<p><a href=\"https://api.myorg.com/store/v1/**customers\">https://api.myorg.com/store/v1/**customers</a>**</p>\n<p>Resource names should be lower-case and use only alphabetic characters, with hyphens employed to separate words in the URI. URIs are the only place where hyphens are used as a word separator. In all other situations, the word separation scheme should align with enterprise field naming conventions (e.g. camelCase or snake_case).</p>\n<h3 id=\"resource-identifiers\">Resource Identifiers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#resource-identifiers\"></a></h3>\n<p>A resource identifier can be a string or numeric value, and must be URL safe. A protected or confidential resource identifier must be un-guessable and non-sequential, providing maximum abstraction from Personally Identifiable Information, primary keys, and time or order of creation. This requirement may be met with a randomly generated unique identifier, e.g.</p>\n<p>/v1/applicants/<strong>538d9bb1</strong></p>\n<p>The resource identifier must be immutable.</p>\n<h3 id=\"resource-references\">Resource References<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#resource-references\"></a></h3>\n<p>Resource identifiers returned with the core data should be referenced consistently — a standard should be mandated.</p>\n<p>The most popular schemes are:</p>\n<ul>\n<li>Return an “id” field. e.g. <code>\"id\" : \"12B34C\"</code>. The name of the resource is implied, having been addressed in the URL.</li>\n<li>Return an unambiguous concatenation of the resource name followed by the “Id” designation, e.g. <code>\"customerId\" : \"12B34C\"</code>.</li>\n</ul>\n<p>All <strong><em>external resource id references</em></strong> should in any case be concatenation of the resource name followed by the “Id” designation, e.g. <code>\"orderId\" : \"34C56D\"</code>.</p>\n<h2 id=\"document-structure\">Document Structure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#document-structure\"></a></h2>\n<h3 id=\"root-level-object\">Root Level Object<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#root-level-object\"></a></h3>\n<p>Request and response documents containing JSON data must contain a root level JSON object. This object defines the JSON document’s root. Obviously this does not apply to body-less API requests and responses, such as a GET request. e.g.</p>\n<p><strong>POST</strong> /v1/persons{<br>\n\"familyName\": \"SMITH\",<br>\n\"givenName\": \"Jane\",<br>\n\"birthDate\": \"1992-01-01\"<br>\n}</p>\n<h3 id=\"flat-structure\">Flat Structure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#flat-structure\"></a></h3>\n<p>There is little argument about the need for experience APIs to deliver the leanest, flattest JSON structures possible, <em>as per the above example</em>. In most scenarios, this imperative will also apply to business resource APIs, however alignment with regulatory or industry frameworks/formalisms will occasionally require a more structured approach. In any case, data structures should be as flat and lean as possible — expressing composability and cohesion in alignment with <a href=\"https://medium.com/@trgoodwill/where-do-business-resource-apis-come-from-472cc8422dec\">core domain and conceptual contours principles.</a></p>\n<h3 id=\"the-data-object\">The “data” Object<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-data-object\"></a></h3>\n<p>Regulatory or industry frameworks <em>may</em> facilitate the transmission of structured metadata alongside business data (e.g. Open Banking), and when this is a significant organizational use-case, it may be advisable for the enterprise to consistently encapsulate business data in a “data” object.</p>\n<p>The root object <strong><em>may</em></strong> in this case optionally contain a ‘meta’ top-level member in addition to the data member. The ‘meta’ object is used to provide additional information such as copyright, timestamps, origin, ownership, or other contextual data for regulatory or temporal analytical purposes. e.g.</p>\n<p><strong>POST</strong> /v1/applications{<br>\n\"data\": {<br>\n\"familyName\": \"SMITH\",<br>\n\"givenName\": \"Jane\",<br>\n\"birthDate\": \"1992-01-01\"<br>\n},<br>\n\"meta\": {<br>\n\"classification\": \"sensitive\",<br>\n\"consent\": \"538d9bb1–95c9–4ceb-864c-80887776573\"<br>\n}<br>\n}</p>\n<p>This requirement would apply to both request and response documents. When taking this approach, the “links” (or “_links”) object is also top-level and returned as a peer of the “data” member. E.g.</p>\n<p><strong>GET</strong> /v1/applications/808877765733<strong>Response</strong> 200 OK<br>\nContent-Type: application/json; charset=utf-8{<br>\n\"data\": {<br>\n\"applicationId\": \"808877765733<strong>\",<br>\n</strong> \"applicationDate\": \"2022-01-01\",<br>\n\"applicationStatus\": \"submitted\",<br>\n},<br>\n<strong>\"links\": {<br>\n\"memberReferrals\": \"/v1/applications/12345/memberReferrals\",<br>\n\"cancelApplication\": \"/v1/applications/12345/cancel\"<br>\n}</strong><br>\n}</p>\n<p>Reserved top-level properties in this scheme might include (at least): <em>“data”, “meta”, “links”</em> (and/or <em>“_links”</em>)<em>, “messages”, “risk”</em> (Open Banking) and <em>“errors”.</em></p>\n<p>It is worth taking the time to validate the requirement for such a structure. <em>Note that</em> <strong><em>in an OAuth2 context, the token should be the source-of-truth</em></strong> <em>for contextual information such as originating user and client system, and tokens may, by agreement or by virtue of applicable extended frameworks, carry additional claims relevant to the user and system context.</em></p>\n<h2 id=\"request-document\">Request Document<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#request-document\"></a></h2>\n<h3 id=\"resource-instances-and-collections\">Resource Instances and Collections<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#resource-instances-and-collections\"></a></h3>\n<p>Client systems may interact with a single resource, or with the resource collection.</p>\n<p>To interact with a single, specific manifest, for example, GET/HEAD, PUT, PATCH or DELETE requests are sent to the URI <code>/v1/manifests/{manifestId}</code></p>\n<p>To interact with the collection of manifests, GET/HEAD or POST (and potentially, QUERY) requests are sent to the resource collection URI <code>/v1/manifests</code></p>\n<h3 id=\"request-payload\">Request Payload<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#request-payload\"></a></h3>\n<p>Resource instance payloads will be substantially similar across POST (request), GET (response) and PUT (request), and these should ideally reference a shared OpenAPI schema definition. PATCH payload will contain an optional subset of resource data.</p>\n<p><em>Note that the ‘resourceId’ member (eg ‘customerId’) is not required (nor should it be supported) when a new resource is POSTed to the service. The resource Id is owned by the resource service and is returned in the POST response.</em></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"familyName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jones\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"givenName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"James\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"birthDate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1983-01-01\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"response-document\">Response Document<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#response-document\"></a></h2>\n<h3 id=\"media-type\">Media Type<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#media-type\"></a></h3>\n<p>The returned media type must conform to the value provided in the API request Accept header, or the 1st supported media type if multiple values are specified.</p>\n<p>In the absence of an Accept header, the default content type should be JSON (application/json). If the requested media type is unsupported, the server must return an HTTP response of 415 — Unsupported Media Type.</p>\n<h3 id=\"resource-identifier\">Resource Identifier<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#resource-identifier\"></a></h3>\n<p>representations of resource data in a response document will always include the unique resource Id, e.g. <code>\"customerId\" : \"12B34C\"</code>. Refer to the “Naming Conventions” section above.</p>\n<h3 id=\"related-resources\">Related Resources<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#related-resources\"></a></h3>\n<p>A GET request to the parent resource should return ‘core’ resource data only. <em>Core and sub resource concepts are discussed</em> <a href=\"https://medium.com/@trgoodwill/where-do-business-resource-apis-come-from-472cc8422dec\"><em>here</em></a><em>.</em></p>\n<p>References to existentially related resources and sub-resources should be unambiguous, consisting of a concatenation of the resource name followed by the “Id” designation, e.g. <code>\"orderId\" : \"34C56D\"</code>.</p>\n<p>Ideally, referenced resources should be nested, and contain the resource id together with the minimum of non-sensitive data pertinent to the context. e.g.</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"applicationId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"808877765733\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"applicationDate\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2022-01-01\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"applicationStatus\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"submitted\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"applicant\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"applicantId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John Smith\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"link-relations-and-hateoas\">Link Relations and HATEOAS<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#link-relations-and-hateoas\"></a></h3>\n<p>Existentially related sub-resources may <strong><em>optionally</em></strong> be represented as links, however, take care linking versioned APIs external to the current namespace, as it creates dependencies, and such links may in fact be invalid for some clients when these services undergo major version changes. It is best to reserve links for operations and resources within the same versioned namespace.</p>\n<p>When links are employed as HATEOAS (<a href=\"https://medium.com/@trgoodwill/the-engine-of-application-state-92bfdce0d41c\"><strong>the engine of application state</strong></a>), applicable, adjacent state-lifecycle affordances are presented as links in the payload. In a managed API context, the name of every HATEOAS link should correspond to a documented operation with an explicitly defined request and response document, referring to an <strong><em>operationId</em></strong> or to an OAS 3 <strong><em>link name</em></strong>.</p>\n<p>Links should employ the most efficient link format for the use-case. The simple format employed by the <a href=\"https://openbanking.atlassian.net/wiki/spaces/DZ/pages/1077805207/Read+Write+Data+API+Specification+-+v3.1.2#Read%2FWriteDataAPISpecification-v3.1.2-Links\">Open Banking standard</a> is preferential to unnecessarily verbose mechanisms (such as HAL) which are <a href=\"https://medium.com/@trgoodwill/the-engine-of-application-state-92bfdce0d41c\">poorly aligned with specification-first API management</a>. <em>HOWEVER</em>, development framework support should be considered.</p>\n<p><em>More on HATEOAS and links in the article</em> <a href=\"https://medium.com/@trgoodwill/the-engine-of-application-state-92bfdce0d41c\"><strong><em>The Engine of Application State</em></strong></a><strong><em>.</em></strong></p>\n<p>Example:</p>\n<p><strong>GET</strong> /v1/applications/808877765733<strong>Response</strong> 200 OK\nContent-Type: application/json; charset=utf-8{\n\"applicationId\": \"808877765733<strong>\",\n</strong> \"applicationDate\": \"2022-01-01\",\n\"applicationStatus\": \"submitted\",\n<strong>\"links\": {\n\"memberReferrals\": \"/v1/applications/12345/memberReferrals\",\n\"cancelApplication\": \"/v1/applications/12345/cancel\"\n}</strong>\n}</p>\n<h3 id=\"pagination\">Pagination<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pagination\"></a></h3>\n<p>Resource servers and their APIs <strong>SHOULD</strong> support pagination to assist in the management of payload size and performance.</p>\n<p>Pagination strategies include (but are not limited to): page-based, offset-based, and cursor-based. The page query parameter can be used as a basis for any of these strategies. For example, a page-based strategy might use query parameters such as</p>\n<ul>\n<li>page[number] and page[size] e.g. <code>?page[number]**=**2&#x26;page[size]**=**10</code></li>\n<li>an offset-based strategy might use page[offset] and page[limit].</li>\n<li>a cursor-based strategy might use page[cursor].</li>\n</ul>\n<p>As with link notation, the pagination notation supported by development frameworks in common use should be considered. <em>Pagination notation</em> <strong><em>MUST</em></strong> <em>be consistent with</em> <a href=\"https://medium.com/@trgoodwill/the-engine-of-application-state-92bfdce0d41c\"><em>hyperlink/HATEOAS conventions</em></a><em>.</em></p>\n<p>Always refer to a URL-Path (URL part following the hostname and port).</p>\n<p>“prev”: “/v1/resources/?page[number]=2&#x26;page[size]=1”</p>\n<p>Pagination links MUST appear in the links object that corresponds to a collection. The following keys <strong>SHOULD</strong> be provided for page-based pagination links:</p>\n<ul>\n<li><strong><em>self</em></strong> : the current page of data</li>\n<li><strong><em>first</em></strong> : the first page of data</li>\n<li><strong><em>prev</em></strong> : the previous page of data</li>\n<li><strong><em>next</em></strong> : the next page of data</li>\n<li><strong><em>last</em></strong> : the last page of data</li>\n</ul>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"self\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/v1/orders?page[number]=3&#x26;page[size]=1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"first\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/v1/orders?page[number]=1&#x26;page[size]=1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"prev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/v1/orders?page[number]=2&#x26;page[size]=1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"next\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/v1/orders?page[number]=4&#x26;page[size]=1\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"last\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/v1/orders?page[number]=13&#x26;page[size]=1\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Query Parameter Syntax and Amazon API Gateways</strong></p>\n<p>Note that native Amazon API Gateways do not fully implement <a href=\"https://tools.ietf.org/html/rfc3986\">RFC 3986</a> and are more restrictive — query parameters must conform to the regular expression <code>^[a-zA-Z0–9:._$-]+$</code></p>\n<h3 id=\"collections-of-resources\">Collections of Resources<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#collections-of-resources\"></a></h3>\n<p>A GET performed on a resource collection (without specifying a resource Id) will return potentially multiple resource instances in a “data” array. e.g.</p>\n<p><strong>GET</strong> /v1/applications<strong>Response</strong> 200 OK\nContent-Type: application/json; charset=utf-8{\n\"data\": [\n{\n\"applicationId\": \"808877765733<strong>\",\n</strong> \"applicationDate\": \"2022-01-01\",\n\"applicationStatus\": \"submitted\"\n},\n{\n\"applicationId\": \"80851456484<strong>\",\n</strong> \"applicationDate\": \"2022-06-01\",\n\"applicationStatus\": \"pending\"\n}\n]\n}</p>\n<p>The response to a GET on a collection <strong><em>must return a top-level data array even if only one record exists</em></strong>, or meets the filter criteria. This rule does not apply when no records exist, or meet filter requirements, in which case a response of 404 — Not found should be returned.</p>\n<p>Uncontrolled arrays containing large data sets or large binary objects such as documents or images, must not be returned. <strong><em>Large arrays must be controlled by pagination</em></strong>. It is suggested that payload size should not exceed 2 Mb— primarily for the sake of performance and composability, and because this is a legacy default payload maximum for some platforms. Avoid exceeding 10 Mb at all costs — it is a hard limit for several platforms.</p>\n<p>A POST may also be performed on a resource collection to create a new instance of the resource. The server should return a ‘Location’ header containing the relative path of the newly created resource, and an ‘id’ field containing the resource identifier. Additional <em>derived</em> data <em>may</em> be returned as deemed appropriate. A links object <em>may</em> be returned if relevant. e.g.</p>\n<p><strong>POST</strong> /v1/applicants\n{ \"familyName\": \"Jones\",\n\"givenName\": \"James\",\n\"birthDate\": \"1983-01-01\"\n}<strong>Response</strong> 201 Created\nContent-Type: application/json; charset=utf-8\nLocation: /v1/applicants/538d9bb1–95c9–4ceb-864c-808877765733{\n\"applicantId\": \"538d9bb1–95c9–4ceb-864c-808877765733\",\n}</p>\n<p>These are the only operations that may be performed on a collection. Creating or updating multiple resource instances in the same request is not standardized, and should be avoided. There are factors such as receipt acknowledgement and how to handle partial success in a set of batches that add significant complexity.</p>\n<h2 id=\"binary-and-multi-part-content\">Binary and Multi-part Content<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#binary-and-multi-part-content\"></a></h2>\n<p>Implementation details for large binary uploads are often necessarily different from small JSON payloads (for example virus scanning, different tuning for HTTP variables for efficient compression, different DDOS protection strategies, etc). For these reasons, care needs to be taken with the modeling of binary data to avoid unnecessary imposts on performance and availability.</p>\n<p>If at all possible, binary data should be modeled as a dedicated sub-resource on a separate path to facilitate upload and download as discrete operations.</p>\n<p><em>More on this topic in the article:</em> <a href=\"https://medium.com/@trgoodwill/api-bites-binary-and-multi-part-content-283ef69fc5e9\"><em>Binary and Multi-Part Content</em></a></p>\n<h2 id=\"wrap-up\">Wrap-up<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#wrap-up\"></a></h2>\n<p>Governed, opiniated standards and patterns will be required to enable <strong><em>seamless interoperability between independent, decoupled domains</em></strong>. While sample guidance and exemplars are offered in this article, there is often more than one tried-and-tested approach in any one area of API design — specific tactics and conventions should be tailored to the target environment.</p>\n<h2 id=\"related-discussions-on-medium\">Related Discussions on Medium<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#related-discussions-on-medium\"></a></h2>\n<p><a href=\"https://medium.com/@trgoodwill/api-bites-1af949efdd1b\">API Bites — Versioning APIs</a></p>\n<p><a href=\"https://medium.com/@trgoodwill/api-bites-7373b2127ed1\">API Bites — API Path Conventions</a></p>\n<p><a href=\"https://medium.com/@trgoodwill/api-bites-filtering-conventions-8a1a19c03975\">API Bites — Filtering Conventions</a></p>\n<p><a href=\"https://medium.com/@trgoodwill/283ef69fc5e9\">API Bites — Binary and Multi-Part Content</a></p>\n<p><a href=\"https://medium.com/@trgoodwill/where-do-business-resource-apis-come-from-472cc8422dec\">Modeling Coherent and Composable Business Resource APIs</a></p>\n<p><a href=\"https://medium.com/@trgoodwill/the-engine-of-application-state-92bfdce0d41c\">The Engine of Application State. Aligning HATEOAS, Affordances and Business Events</a></p>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}