{"pageProps":{"note":{"id":"ae6zb2sr29o5080d3m1uixr","title":"11 HTML best practices for login & sign-up forms","desc":"","updated":1684998299336,"created":1684995164447,"custom":{},"fname":"dev.html.best-practices-for-login-and-signup-forms","type":"note","vault":{"fsPath":"vault"},"contentHash":"cdbc449bfc854ed91c7a61f73f3b6e60","links":[],"anchors":{"think-about-a-password-less-process-instead-of-emailpassword":{"type":"header","text":"Think about a password-less process instead of email/password","value":"think-about-a-password-less-process-instead-of-emailpassword","line":16,"column":0,"depth":2},"1-set-autocomplete":{"type":"header","text":"1. Set autocomplete","value":"1-set-autocomplete","line":35,"column":0,"depth":2},"2-set-typeemail":{"type":"header","text":"2. Set type=\"email\"","value":"2-set-typeemail","line":69,"column":0,"depth":2},"3-all-clickables-should-use-button-or-a-not-div-or-span":{"type":"header","text":"3. All clickables should use <button> or <a>, not <div> or <span>","value":"3-all-clickables-should-use-button-or-a-not-div-or-span","line":89,"column":0,"depth":2},"4-wrap-the-fields-and-submit-button-within-form-tags":{"type":"header","text":"4. Wrap the fields and submit <button> within <form> tags.","value":"4-wrap-the-fields-and-submit-button-within-form-tags","line":128,"column":0,"depth":2},"5-avoid-using-placeholder-as-a-label":{"type":"header","text":"5. Avoid using placeholder as a <label>","value":"5-avoid-using-placeholder-as-a-label","line":143,"column":0,"depth":2},"the-placeholder-attribute-should-not-be-used-as-an-alternative-to-a-label":{"type":"header","text":"The placeholder attribute should not be used as an alternative to a label.","value":"the-placeholder-attribute-should-not-be-used-as-an-alternative-to-a-label","line":157,"column":2,"depth":2},"6-wrap-checkbox-inputs-within-label-tags":{"type":"header","text":"6. Wrap checkbox inputs within <label> tags","value":"6-wrap-checkbox-inputs-within-label-tags","line":165,"column":0,"depth":2},"7-add-a-visible-focus-state":{"type":"header","text":"7. Add a visible :focus state","value":"7-add-a-visible-focus-state","line":184,"column":0,"depth":2},"8-mark-invalid-fields-for-screen-readers":{"type":"header","text":"8. Mark invalid fields for screen-readers","value":"8-mark-invalid-fields-for-screen-readers","line":209,"column":0,"depth":2},"9-prevent-validation-in-the-middle-of-user-input":{"type":"header","text":"9. Prevent validation in the middle of user input","value":"9-prevent-validation-in-the-middle-of-user-input","line":222,"column":0,"depth":2},"10-prevent-forms-from-being-sent-twice":{"type":"header","text":"10. Prevent forms from being sent twice","value":"10-prevent-forms-from-being-sent-twice","line":252,"column":0,"depth":2},"11-with-ajax-think-about-network-latency-and-servernetwork-errors":{"type":"header","text":"11. With AJAX, think about network latency and server/network errors","value":"11-with-ajax-think-about-network-latency-and-servernetwork-errors","line":271,"column":0,"depth":2},"checklist":{"type":"header","text":"Checklist","value":"checklist","line":294,"column":0,"depth":2},"dont-use-the-placeholder-attribute":{"type":"header","text":"Don’t Use The Placeholder Attribute","value":"dont-use-the-placeholder-attribute","line":312,"column":0,"depth":2}},"children":[],"parent":"J5O6LCmOghKhFwQFKeoow","data":{}},"body":"<h1 id=\"11-html-best-practices-for-login--sign-up-forms\">11 HTML best practices for login &#x26; sign-up forms<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#11-html-best-practices-for-login--sign-up-forms\"></a></h1>\n<blockquote>\n<p><a href=\"https://evilmartians.com/chronicles/html-best-practices-for-login-and-signup-forms\">https://evilmartians.com/chronicles/html-best-practices-for-login-and-signup-forms</a></p>\n</blockquote>\n<p>Most websites have login or sign-up forms; they’re a critical part of business conversion. However, even popular sites fail to implement the 11 best practices mentioned in this article, and thus have at least one mistake. So, read this post, and then check your forms and improve your UX by using HTML technologies the way they should be used.</p>\n<p>In general, sign-in and login forms are very simple. For most websites, they feature just 2 inputs and a submit button. But, even with this simple HTML structure, many websites still have little mistakes.</p>\n<p>Since this type of form is simple and has many chances for error, they present a good learning environment both for learning about some new HTML features, and to master the skills needed to produce the best user experience <strong>with any kind of form</strong>.</p>\n<h2 id=\"think-about-a-password-less-process-instead-of-emailpassword\">Think about a password-less process instead of email/password<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#think-about-a-password-less-process-instead-of-emailpassword\"></a></h2>\n<p>Before we get to the practices, a quick note: in this article, we’ll work with a classic email/password form as an example. However, in terms of security, passwords are actually the worst way to have users login, and this method has many, well-known weaknesses. Let’s quickly look at just a couple:</p>\n<ol>\n<li><a href=\"https://www.researchgate.net/publication/324455350_2018_Verizon_Data_Breach_Investigations_Report\">This report on Verison’s 2018 data breach</a> says that over 70% of people reuse passwords across websites. Attackers could potentially find a cross-website shared password in some leaked data from one website and use it to steal an account on another website. Additionally, compared to a password-less option, like those we’ll discuss below, implementing 2FA as a solution would reduce UX.</li>\n<li>Users constantly forget their passwords, and resetting passwords takes too much time. According to <a href=\"https://www.transmitsecurity.com/wp-content/uploads/transmit-security-passwordless-report-the-impact-of-passwords-on-your-business.pdf\">this report from Transmit Security</a>, 55% of consumers have stopped using a website because the login process was too complex.</li>\n</ol>\n<blockquote>\n<p>If you want to improve your login form, a first step would be thinking about a password-less option.</p>\n</blockquote>\n<p>Here are my favorite password-less options right now:</p>\n<ol>\n<li>Instead of a DIY implementation, use a secure, well-engineered and maintained third-party solution, such as <a href=\"https://auth0.com/\">Auth0</a> or <a href=\"https://aws.amazon.com/cognito/\">Amazon Cognito</a>. For several of our client projects, including the ones with the highest security requirements, we used one of those methods to authenticate.</li>\n<li>The new <strong>passkey standard</strong> suggested by <a href=\"https://developer.apple.com/videos/play/wwdc2022/10092/\">Apple</a> and <a href=\"https://developers.google.com/identity/passkeys\">Google</a>. <a href=\"https://www.passkeys.io/\">This demo</a> and <a href=\"https://www.nytimes.com/wirecutter/blog/what-are-passkeys-and-how-they-can-replace-passwords/\">article in New York Times</a> explain how it works and why it’s better.</li>\n<li>Implementing an email with <strong>sign-in link</strong> (many users utiize the <code>Remember password</code> feature with every login anyway).</li>\n</ol>\n<p>You can also combine these options, for instance, using a passkey for users with new browsers and sign-in links for users without passkeys.</p>\n<p>With that out of the way, let’s move on to the 11 best practices for login and sign up forms. (While reading, keep in mind that almost all of these guidelines are also valid for any type of form.)</p>\n<h2 id=\"1-set-autocomplete\">1. Set <code>autocomplete</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-set-autocomplete\"></a></h2>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> &#x3C;input type=\"email\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> &#x3C;input type=\"email\" autocomplete=\"username\">\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> &#x3C;input type=\"password\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> &#x3C;input type=\"password\" autocomplete=\"current-password\">\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &#x3C;button>Login&#x3C;/button>\n</span></span></code></pre>\n<p>Password managers are the only option to reduce security risks on email/password forms (but even they don’t fix all of risks). This is why it is important to give password managers a hand.</p>\n<p>The <code>&#x3C;input></code> tag has the very useful <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\"><code>autocomplete</code></a> attribute. It also allows password managers to distinguish a login form (<code>current-password</code>) from a sign-up form (<code>new-password</code>).</p>\n<p>Let’s take a look:</p>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &#x3C;label>\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   New password:\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   &#x3C;input type=\"password\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   &#x3C;input type=\"password\" autocomplete=\"new-password\">\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &#x3C;/label>\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &#x3C;label>\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   Confirm password:\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   &#x3C;input type=\"password\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   &#x3C;input type=\"password\" autocomplete=\"new-password\">\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &#x3C;/label>\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &#x3C;button>Sign Up&#x3C;/button>\n</span></span></code></pre>\n<p>Don’t set <code>autocomplete=\"off\"</code> if you don’t know what are you doing! Doing so could lessen the user experience. We should only use this setting when we need to to hide very sensitive data (like a “symptoms” field on a medical website).</p>\n<blockquote>\n<p>The <a href=\"https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing\"><code>autocomplete=\"off\"</code> hack</a> addresses that when dynamically setting <code>disabled</code>, state is not reset upon refresh. Only set <code>off</code> for the submit <code>&#x3C;button></code>, not the entire form.</p>\n</blockquote>\n<h2 id=\"2-set-typeemail\">2. Set <code>type=\"email\"</code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-set-typeemail\"></a></h2>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &#x3C;label>\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   E-mail:\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   &#x3C;input type=\"text\" autocomplete=\"username\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   &#x3C;input type=\"email\" autocomplete=\"username\">\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &#x3C;/label>\n</span></span></code></pre>\n<p>One of the most common mistakes with login forms is using <code>type=\"text\"</code> on an e-mail field instead of <code>type=\"email\"</code>. Why is this attribute important?</p>\n<ol>\n<li>Browsers will suggest the user’s email in an autocomplete popup (even if the user is opening a website for a first time).</li>\n<li>On touch-devices, the user will be prompted with a specific, more comfortable keyboard designed for entering e-mails.</li>\n<li>It enables built-in e-mail validation.</li>\n</ol>\n<blockquote>\n<p>If your form allows for entering either a username or email within a single field, then, still, make sure to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode\"><code>inputmode=\"email\"</code></a> to enable the email keyboard. Overall, this is still way more convenient for users.</p>\n</blockquote>\n<p>If you don’t like the browser’s built-in validation, don’t set <code>type=\"text\"</code>. Instead, use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form\"><code>novalidate</code></a> attribute.</p>\n<h2 id=\"3-all-clickables-should-use-button-or-a-not-div-or-span\">3. All clickables should use <code>&#x3C;button></code> or <code>&#x3C;a></code>, not <code>&#x3C;div></code> or <code>&#x3C;span></code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3-all-clickables-should-use-button-or-a-not-div-or-span\"></a></h2>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> Forgot your password? &#x3C;span>Reset it here&#x3C;/span>.\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> Forgot your password? &#x3C;a href=\"/restore\">Reset it here&#x3C;/a>.\n</span></span>\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> &#x3C;div>Login&#x3C;/div>\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> &#x3C;button>Login&#x3C;/button>\n</span></span></code></pre>\n<p>Links change the current page, and we should use <code>&#x3C;a></code> for all links. Buttons don’t change the page’s URL and only change the state on current page; we should use <code>&#x3C;button></code> for all buttons.</p>\n<blockquote>\n<p>For more accessibility tips, read this.</p>\n<p><a href=\"https://evilmartians.com/chronicles/accessible-design-from-the-get-go\">Accessible design from the get-go</a></p>\n</blockquote>\n<p>Using the <code>&#x3C;a></code> tag has many benefits compared to <code>&#x3C;span onClick={…}></code>. For instance, the user can open a link in a new tab or see new the URL before clicking.</p>\n<p>By using <code>&#x3C;button></code> instead of <code>&#x3C;div></code>, you make your website more accessible and improve keyboard UX: screen-readers will tell users when they’re dealing with a button; buttons will have <code>:focus</code> state for an improved keyboard UX.</p>\n<p>Also, we should use <code>&#x3C;button></code> for a show/hide password feature; don’t forget about <code>aria-label</code> if you’re using an icon-only button:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">aria-label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Show password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eye-icon<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>One more thing here: <code>&#x3C;a></code> and<code>&#x3C;button></code> are also good for development purposes. By always using <code>&#x3C;a></code>/<code>&#x3C;button></code> for interactive elements, you can easier create a CSS selector for all interactive elements:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">button<span class=\"token punctuation\">,</span>\na</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Using pointer is controversial, this is just an example */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p>If you have non-submit buttons in your form (just <a href=\"https://www.nngroup.com/articles/reset-and-cancel-buttons/\">don’t use a <code>Clear</code></a> button) set <code>type=\"button\"</code>; any buttons without <code>type=\"button\"</code> will trigger the form’s submit on click.</p>\n</blockquote>\n<h2 id=\"4-wrap-the-fields-and-submit-button-within-form-tags\">4. Wrap the fields and submit <code>&#x3C;button></code> within <code>&#x3C;form></code> tags.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#4-wrap-the-fields-and-submit-button-within-form-tags\"></a></h2>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> &#x3C;div>\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> &#x3C;form>\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   &#x3C;label>Email: &#x3C;input type=\"email\" autocomplete=\"username\">&#x3C;/label>\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   &#x3C;label>Password: &#x3C;input type=\"password\" autocomplete=\"current-password\">&#x3C;/label>\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   &#x3C;button>Login&#x3C;/button>\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> &#x3C;form>\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> &#x3C;/div>\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\"> &#x3C;button>Login&#x3C;/button>\n</span></span></code></pre>\n<p>Be sure to wrap all the form’s fields and its submit <code>&#x3C;button></code> within <code>&#x3C;form></code> tags. Form submission using <code>Enter</code> only works if the fields are inside <code>&#x3C;form></code> tags and there is a single submit button. (Additionally, users taking advantage of screen-readers will appreciate the better navigation this implementation provides.)</p>\n<h2 id=\"5-avoid-using-placeholder-as-a-label\">5. Avoid using <code>placeholder</code> as a <code>&#x3C;label></code><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#5-avoid-using-placeholder-as-a-label\"></a></h2>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> &#x3C;input placeholder=\"E-mail\" type=\"email\" autocomplete=\"username\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> &#x3C;label>\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   E-mail:\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   &#x3C;input type=\"email\" autocomplete=\"username\">\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> &#x3C;/label>\n</span></span></code></pre>\n<p>The <code>placeholder</code> attribute was created to show an example of a potential input, not to describe that input. Thus, I would completely advise against using it as a substitute for the <code>&#x3C;label></code> tag. Moreover, placeholder values will be hidden while users are entering the data, and they also often have contrast issues.</p>\n<blockquote>\n<p>Even as a <code>DD/MM/YYYY</code> format hint it’s better to avoid <code>placeholder</code> and write the hint on a separate line.</p>\n</blockquote>\n<blockquote>\n<h2 id=\"the-placeholder-attribute-should-not-be-used-as-an-alternative-to-a-label\">The placeholder attribute should <strong>not</strong> be used as an alternative to a label.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-placeholder-attribute-should-not-be-used-as-an-alternative-to-a-label\"></a></h2>\n<p>HTML Living Standard</p>\n</blockquote>\n<p>That said, this is not so critical for short email + password forms, but on larger forms <a href=\"https://www.smashingmagazine.com/2018/06/placeholder-attribute/\">placeholder’s issues</a> are more obvious.</p>\n<blockquote>\n<p>Using <code>for</code>/<code>id</code> in <code>&#x3C;label></code> isn’t the only option; we can wrap <code>&#x3C;input></code> tags inside <code>&#x3C;label></code> without using <code>for</code>/<code>id</code>.</p>\n</blockquote>\n<h2 id=\"6-wrap-checkbox-inputs-within-label-tags\">6. Wrap checkbox inputs within <code>&#x3C;label></code> tags<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#6-wrap-checkbox-inputs-within-label-tags\"></a></h2>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> &#x3C;input type=\"checkbox\"> I agree with the privacy policy\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> &#x3C;label>\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   &#x3C;input type=\"checkbox\"> I agree with the privacy policy\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> &#x3C;/label>\n</span></span></code></pre>\n<p>By default, checkbox inputs have very a small size, and thus a small area where clicks will be detected. This means users need more time to precisely place the cursor where it needs to be. But if a checkbox input is wrapped in <code>&#x3C;label></code> tags, then clicking on its text will also change the checkbox value. (Also, note that each individual checkbox input will need its own <code>&#x3C;label></code> tags.)</p>\n<p>When doing this, it’s also better to add a clear <code>:hover</code> effect to show users that they can click on the text to trigger the input:</p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">label<span class=\"token pseudo-class\">:hover</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">oklch</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token unit\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"7-add-a-visible-focus-state\">7. Add a visible <code>:focus</code> state<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#7-add-a-visible-focus-state\"></a></h2>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> *:focus {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">   outline: none;\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\"> }\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> button:focus-visible, a:focus-visible, input:focus-visible {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   outline: 5px solid oklch(60% 0.15 252);\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> }\n</span></span></code></pre>\n<blockquote>\n<p>Read more about the OKLCH colors we’re using here.</p>\n<p><a href=\"https://evilmartians.com/chronicles/oklch-in-css-why-quit-rgb-hsl\">OKLCH in CSS: why we moved from RGB and HSL</a></p>\n</blockquote>\n<p>We often forget or neglect keyboard UX in our applications. But when it comes to forms, in general, every user will make use of the keyboard. So, we need to think about how our UIs are accessible from the keyboard.</p>\n<p>The first step is to add the contrast <code>:focus</code> state to highlight the current field. Users will use their peripheral vision to determine where the focus has been moved. Sara Soueidan wrote a <a href=\"https://www.sarasoueidan.com/blog/focus-indicators/\">great guide</a> that explains how to make <code>:focus</code> indicators clearly visible.</p>\n<p>After creating a <code>:focus</code> state for input fields and buttons, add this to your <code>&#x3C;a></code> tags, too. This is the first small step for improving the keyboard accessibility of your website.</p>\n<blockquote>\n<p>Never disable the <code>:focus</code> state in your app.</p>\n</blockquote>\n<p>Another tip: use <a href=\"https://css-tricks.com/almanac/selectors/f/focus-visible/\"><code>:focus-visible</code></a> if you have SPA and want to remove a <code>:focus</code> state after clicking on a menu item.</p>\n<h2 id=\"8-mark-invalid-fields-for-screen-readers\">8. Mark invalid fields for screen-readers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#8-mark-invalid-fields-for-screen-readers\"></a></h2>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &#x3C;input type=\"email\" autocomplete=\"username\"\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">         class=\"invalid\">\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">         required aria-invalid=\"true\" aria-errormessage=\"email-error\">\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> &#x3C;div id=\"email-error\">Enter a valid email address&#x3C;/div>\n</span></span></code></pre>\n<p><code>aria-invalid</code> and <code>aria-errormessage</code> display validation errors for screen-reader users.</p>\n<p>Another note: it’s also nice to warn screen reader users about required fields by using the <code>required</code> attribute. If you don’t like the browser’s built-in validation that comes with <code>required</code>, be sure to use the <code>aria-required</code> attribute when implementing your own.</p>\n<h2 id=\"9-prevent-validation-in-the-middle-of-user-input\">9. Prevent validation in the middle of user input<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#9-prevent-validation-in-the-middle-of-user-input\"></a></h2>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\"> input.addEventListener('keyup', () => {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">   if (validate(input)) {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">     markValid(input)\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">   } else {\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">     markInvalid(input)\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\">   }\n</span><span class=\"token prefix deleted\">-</span><span class=\"token line\"> })\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\"> input.addEventListener('input', () => {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   if (validate(input)) {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     markValid(input)\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> })\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> input.addEventListener('change', () => {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   if (validate(input)) {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     markValid(input)\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   } else {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     markInvalid(input)\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   }\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\"> })\n</span></span></code></pre>\n<p>We don’t want to distract or confuse users with error animations while they’re inputting data into a form, so don’t display a <code>Not valid email</code> error before a user hasn’t finished their input.</p>\n<p>As a solution, use <code>change</code> instead of <code>keyup</code> for validation once the user has finished their input (by moving to another control or by submitting the form). Of course, we can use still <code>input</code>/<code>keyup</code>, but only to hide errors during input.</p>\n<p>Here is <a href=\"https://www.smashingmagazine.com/2022/09/inline-validation-web-forms-ux/\">a good guide on inline form validation</a>. - Reward Early, Punish Late</p>\n<h2 id=\"10-prevent-forms-from-being-sent-twice\">10. Prevent forms from being sent twice<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#10-prevent-forms-from-being-sent-twice\"></a></h2>\n<pre class=\"language-js\"><code class=\"language-js\">form<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"submit\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  submit<span class=\"token punctuation\">.</span><span class=\"token property-access\">disabled</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token comment\">// Fix for Firefox. It persists the dynamic disabled state without this hack.</span>\n  submit<span class=\"token punctuation\">.</span><span class=\"token property-access\">autocomplete</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"off\"</span>\n\n  <span class=\"token comment\">// We are using setTimeout for page-reload submit.</span>\n  <span class=\"token comment\">// For AJAX, use await and try-finally to enable submit the button again.</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    button<span class=\"token punctuation\">.</span><span class=\"token property-access\">disabled</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>User can often accidentily double-click instead of a single-click. So, to prevent showing some server error, it’s better to disable the button upon form submission.</p>\n<h2 id=\"11-with-ajax-think-about-network-latency-and-servernetwork-errors\">11. With AJAX, think about network latency and server/network errors<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#11-with-ajax-think-about-network-latency-and-servernetwork-errors\"></a></h2>\n<pre class=\"language-diff\"><code class=\"language-diff\"><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> form.addEventListener('submit', async () => {\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">   await fetch(…)\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">   try {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     showLoader()\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     await fetch(…)\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   } catch (e) {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     showError(e)\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   } finally {\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">     hideLoader()\n</span><span class=\"token prefix inserted\">+</span><span class=\"token line\">   }\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\"> })\n</span></span></code></pre>\n<p>For every AJAX request, there are two things we should always think about:</p>\n<ol>\n<li>Show a <strong>loading state</strong> to the user. During local development you have 0ms latency, but live users will have up to a few seconds before a server response, so users should see some kind of reaction after clicking on a submit button.</li>\n<li>Process <strong>network and server errors</strong>. You won’t see them in local development, but on production every user might experience a <code>WiFi is down</code> or <code>Error 500</code> error from the server; be ready for them, and show some appropriate text to users.</li>\n</ol>\n<p>Note: for auth forms, it’s better to submit the form by page reload, this is better as it will save the user’s token to <code>httpOnly</code>-cookie and update all stores in web app.</p>\n<h2 id=\"checklist\">Checklist<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#checklist\"></a></h2>\n<p>Let’s quickly wrap things up. Use this checklist on your next pull request review that deals with any form:</p>\n<ol>\n<li>Set <code>autocomplete</code> to input fields</li>\n<li>Select the correct <code>type</code> value for input fields</li>\n<li>All clickable elements should use <code>&#x3C;button></code> or <code>&#x3C;a></code>, not <code>&#x3C;div></code> or <code>&#x3C;span></code></li>\n<li>Wrap input fields and the submit <code>&#x3C;button></code> inside <code>&#x3C;form></code> tags</li>\n<li>Connect <code>&#x3C;label></code> and <code>&#x3C;input></code> tags, avoid <code>placeholder</code></li>\n<li>Wrap checkboxes inside <code>&#x3C;label></code> tags</li>\n<li>Set visible <code>:focus</code> state to UI</li>\n<li>Mark invalid fields for screen-readers</li>\n<li>Prevent validation in the middle of input</li>\n<li>Prevent forms from being sent twice</li>\n<li>Think about network latency and server/network errors</li>\n</ol>\n<hr>\n<h2 id=\"dont-use-the-placeholder-attribute\"><a href=\"https://www.smashingmagazine.com/2018/06/placeholder-attribute/\">Don’t Use The Placeholder Attribute</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dont-use-the-placeholder-attribute\"></a></h2>\n<ul>\n<li>Can’t be automatically translated;</li>\n<li>Is oftentimes used in place of a label, locking out assistive technology;</li>\n<li>Can hide important information when content is entered;</li>\n<li>Can be too light-colored to be legible;</li>\n<li>Has limited styling options;</li>\n<li>May look like pre-filled information and be skipped over.</li>\n</ul>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}