{"pageProps":{"note":{"id":"ypzttrcmfpt5f96025truf0","title":"One Game, By One Man, On Six Platforms: The Good, The Bad and The Ugly","desc":"","updated":1697503966408,"created":1697503932102,"custom":{},"fname":"dev.web.one-game-six-platforms","type":"note","vault":{"fsPath":"vault"},"contentHash":"fc1a9efcd6c8e2bcaecdc31b3ff973e0","links":[],"anchors":{"web":{"type":"header","text":"Web","value":"web","line":14,"column":0,"depth":2},"the-good":{"type":"header","text":"The Good","value":"the-good","line":16,"column":0,"depth":3},"the-bad":{"type":"header","text":"The Bad","value":"the-bad","line":20,"column":0,"depth":3},"the-ugly":{"type":"header","text":"The Ugly","value":"the-ugly","line":24,"column":0,"depth":3},"windows-steam":{"type":"header","text":"Windows (Steam)","value":"windows-steam","line":30,"column":0,"depth":2},"the-good-1":{"type":"header","text":"The Good","value":"the-good-1","line":32,"column":0,"depth":3},"the-bad-1":{"type":"header","text":"The Bad","value":"the-bad-1","line":36,"column":0,"depth":3},"the-ugly-1":{"type":"header","text":"The Ugly","value":"the-ugly-1","line":40,"column":0,"depth":3},"macos-steam":{"type":"header","text":"macOS (Steam)","value":"macos-steam","line":46,"column":0,"depth":2},"the-good-2":{"type":"header","text":"The Good","value":"the-good-2","line":48,"column":0,"depth":3},"the-bad-2":{"type":"header","text":"The Bad","value":"the-bad-2","line":52,"column":0,"depth":3},"the-ugly-2":{"type":"header","text":"The Ugly","value":"the-ugly-2","line":62,"column":0,"depth":3},"linux-including-steam-deck":{"type":"header","text":"Linux (Including Steam Deck)","value":"linux-including-steam-deck","line":68,"column":0,"depth":2},"the-good-3":{"type":"header","text":"The Good","value":"the-good-3","line":70,"column":0,"depth":3},"the-bad-3":{"type":"header","text":"The Bad","value":"the-bad-3","line":74,"column":0,"depth":3},"the-ugly-3":{"type":"header","text":"The Ugly","value":"the-ugly-3","line":80,"column":0,"depth":3},"ios":{"type":"header","text":"iOS","value":"ios","line":86,"column":0,"depth":2},"the-good-4":{"type":"header","text":"The Good","value":"the-good-4","line":88,"column":0,"depth":3},"the-bad-4":{"type":"header","text":"The Bad","value":"the-bad-4","line":98,"column":0,"depth":3},"the-ugly-4":{"type":"header","text":"The Ugly","value":"the-ugly-4","line":106,"column":0,"depth":3},"android":{"type":"header","text":"Android","value":"android","line":114,"column":0,"depth":2},"the-good-5":{"type":"header","text":"The Good","value":"the-good-5","line":116,"column":0,"depth":3},"the-bad-5":{"type":"header","text":"The Bad","value":"the-bad-5","line":120,"column":0,"depth":3},"the-ugly-5":{"type":"header","text":"The Ugly","value":"the-ugly-5","line":126,"column":0,"depth":3},"conclusion":{"type":"header","text":"Conclusion","value":"conclusion","line":132,"column":0,"depth":2}},"children":[],"parent":"e2owgssw5t9oo46vsvwsu3f","data":{}},"body":"<h1 id=\"one-game-by-one-man-on-six-platforms-the-good-the-bad-and-the-ugly\">One Game, By One Man, On Six Platforms: The Good, The Bad and The Ugly<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#one-game-by-one-man-on-six-platforms-the-good-the-bad-and-the-ugly\"></a></h1>\n<blockquote>\n<p><a href=\"https://ruoyusun.com/2023/10/12/one-game-six-platforms.html\">https://ruoyusun.com/2023/10/12/one-game-six-platforms.html</a></p>\n</blockquote>\n<p>Recently, Valve announced that Counter-Strike 2 would <a href=\"https://www.macrumors.com/2023/10/10/valve-confirms-counter-strike-2-no-macos/\">no longer support macOS</a>. As a one-man indie developer who has released <a href=\"https://store.steampowered.com/app/1574000/Industry_Idle/\">a game supporting macOS</a>, I find myself at first surprised at Valve’s decision. But after looking back at my own journey of supporting six platforms, I feel I can understand Valve’s perspective.</p>\n<p>I feel it is beneficial to write down some of my “lessons learned”, hopefully, that will help fellow indie developers choose which platforms to support. A bit of background, my own game <a href=\"https://store.steampowered.com/app/1574000/Industry_Idle/\">Industry Idle</a> is mostly built on web technologies (WebGL + TypeScript). This means supporting different platforms is comparatively easy - I don’t have to deal with platform-specific graphics APIs (DirectX, OpenGL, Vulkan, Metal) and I mostly live inside the browser sandbox. This is pretty much the sunny day scenario when it comes to cross-platform support. Yet, I am constantly surprised and plagued by platform-specific issues.</p>\n<h2 id=\"web\">Web<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#web\"></a></h2>\n<h3 id=\"the-good\">The Good<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-good\"></a></h3>\n<p>If I am asked to choose a “first-class” platform for Industry Idle, it would be the web. During development, I am running the game in my web browser. So supporting the web is pretty much “automatic”. The platform itself does not need much hassle: I can easily set up an automated build pipeline that deploys to Github/CloudFlare pages, which is mostly free.</p>\n<h3 id=\"the-bad\">The Bad<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-bad\"></a></h3>\n<p>As a platform to release a game, the web platform is very saturated. There are a few portal websites left but they are geared towards a very casual audience, who would not play a hard-core factory builder and economy simulation game. The web version makes very little money. If Industry Idle is written without web-first support, I would probably not port the game to the web at all.</p>\n<h3 id=\"the-ugly\">The Ugly<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-ugly\"></a></h3>\n<p>It is very easy to cheat on the web - after all, the nice development and debug tooling that I enjoy also makes cheating very easy. I have to implement a login system (I implemented Steam OpenID login) so that I can ban bad actors - the game has a multiplayer player trade system and a cheater can easily ruin the experience for everyone. Also, it is possible that people will “steal” the game and host it on their website. I am not really bothered by this as long as people playing on those websites do not cheat.</p>\n<p><strong>TL;DR: Not much work to support but not many players to gain</strong></p>\n<h2 id=\"windows-steam\">Windows (Steam)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#windows-steam\"></a></h2>\n<h3 id=\"the-good-1\">The Good<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-good-1\"></a></h3>\n<p>Steam is the only storefront where the game is released. I’ve submitted to Epic Game Store as well but never gotten any reply - maybe it is a good thing as integrating another SDK is probably not worth it. In 2023, Windows is still the dominating platform for gamers. About 99% of all desktop players play on Windows. The platform has a relatively stable API - Microsoft almost never breaks backward compatibilities. Setting up an automated build pipeline is relatively easy - I build the Windows version on my Linux server.</p>\n<h3 id=\"the-bad-1\">The Bad<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-bad-1\"></a></h3>\n<p>The game uses Electron as the runtime. But in order to integrate with Steam SDK (which is in C++), I have used a few solutions: <a href=\"https://github.com/greenheartgames/greenworks\">greenworks</a> (no longer maintained), Node-API (via <a href=\"https://github.com/nodejs/node-addon-api\">node-addon-api</a>, requires setting up a cross-platform C++ toolchain and write bindings manually), <a href=\"https://koffi.dev/\">Koffi</a> (an FFI module for Node.JS, provides precompiled binaries but requires writing bindings manually) and finally <a href=\"https://github.com/ceifa/steamworks.js\">steamworks.js</a> (calling Steamworks via Rust bindings).</p>\n<h3 id=\"the-ugly-1\">The Ugly<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-ugly-1\"></a></h3>\n<p>There are relatively few problems compared to the number of players but occasionally I have to deal with really obscure issues like an old Visual C++ Redistributable installed or a “trimmed” version of Windows missing some DLLs. And a lot of Windows players are not tech-savvy, which makes debugging hard. But I cannot really complain about it - looking at the <em>percentage</em> of people who have encountered platform-specific issues, Windows is probably the lowest among desktops.</p>\n<p><strong>TL;DR: Not supporting Windows is not an option but luckily it’s relatively easy</strong></p>\n<h2 id=\"macos-steam\">macOS (Steam)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#macos-steam\"></a></h2>\n<h3 id=\"the-good-2\">The Good<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-good-2\"></a></h3>\n<p>When I wrote the first line of code of Industry Idle, I was using a Mac. I’ve been a long-time Mac user and have only migrated to Windows after doing more game dev. Mac accounts for less than 1% of all desktop players but oftentimes people are pleasantly surprised that the game works on Mac and I’ve got several “thank-you” emails about it. Another good thing about the platform is that the x64 build more or less “just works” on Apple Silicon Macs - I don’t have an Apple Silicon Mac and the game only has an x64 build but several “thank-you” emails I’ve got are from Apple Silicon Mac owners - I guess they should really thank Rosetta. Running in emulation mode is not really ideal but the game runs on a potato so the powerful Apple Silicon can easily handle it even with emulation overhead.</p>\n<h3 id=\"the-bad-2\">The Bad<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-bad-2\"></a></h3>\n<p>Mac is one of the most problematic platforms, even after Electron handles most of the platform-specifics, there are lots of gotchas:</p>\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/security/hardened_runtime\">Code signing</a> with a hardened runtime is almost a must.</li>\n<li>However, Steamworks SDK loads <code>dylib</code>, which requires several <a href=\"https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_security_cs_disable-library-validation\">entitlement exceptions</a>. It’s not well-documented so good luck figuring out which ones. And fingers crossed that Apple will not one day disallow those exceptions.</li>\n<li>After signing the executable, I need to notarize it. The old notarization API takes forever (for a 200MB executable, anywhere between 30 minutes to several hours), fails randomly, and almost never gives meaningful error messages. The new “notarytool” is much improved, but still adds 10mins to the build pipeline. In comparison, the total “Windows + Linux + macOS + upload to Steam” pipeline without code signing and notarization takes about 2-3 minutes.</li>\n<li>Of course, the above has to be done on a Mac (some limited experimental non-Mac support starts to become <a href=\"https://crates.io/crates/apple-codesign\">available</a>), which is notoriously bad for build automation. I have a bunch of hacks like <code>security unlock-keychain</code> in the build script but it still fails occasionally.</li>\n<li>And, keep in mind, this is the <em>sunny day scenario</em>: no platform-specific API porting is needed (like from DirectX/Vulkan to Metal).</li>\n</ul>\n<h3 id=\"the-ugly-2\">The Ugly<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-ugly-2\"></a></h3>\n<p>The economy of supporting Mac as an indie is bleak. A Mac is pretty much needed and they are not cheap. All the revenue from the platform does not even cover 10% of the cheapest Mac Mini. And then there’s the $100 per year developer membership fee for notarization. Luckily it can be used for iOS as well. Also, Apple is more willing to break backward compatibilities. Sometimes there are new macOS/XCode version requirements, which means upgrading the operating system (takes 1-2 hours, can occasionally fail) and XCode (takes 2+ hours, I usually just leave it overnight).</p>\n<p><strong>TL;DR: Not worth the time and money and definitely not worth the pain</strong></p>\n<h2 id=\"linux-including-steam-deck\">Linux (Including Steam Deck)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#linux-including-steam-deck\"></a></h2>\n<h3 id=\"the-good-3\">The Good<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-good-3\"></a></h3>\n<p>Linux is not picky about hardware - it runs on everything and costs nothing. I run Arch Linux inside a virtual machine on my development machine to test the game. I also run Ubuntu on my build machine to produce the executables. And the server runs on a VPS that runs Debian. Linux is very easy to automate.</p>\n<h3 id=\"the-bad-3\">The Bad<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-bad-3\"></a></h3>\n<p>Linux is very saturated and the operating systems come in different shapes and forms. Initially, I struggled to get the game running at all. In fact, even an empty Electron app (from the official example) does not run. And after hours of Googling, adding <code>--no-sandbox</code> argument solves for <em>some</em> users but not for all. This is kind of expected because it is impossible to know what libraries are installed on the OS and which version. I wish Steam would allow me to say “Linux support is provided at a best-effort basis” but that’s not an option - I have to tick the checkbox to provide the Linux build, which sometimes sets the wrong expectation.</p>\n<p>After Steam Deck was released, I thought supporting it would be automatic - after all, I have a Linux build - but no. It turns out that unless the game is explicitly marked (by Valve reviewers), Steam Deck will use the Windows build + Proton even if a Linux version is available. And the Linux version is running against <a href=\"https://github.com/ValveSoftware/steam-runtime\">“Steam Runtime”</a> - a relatively fixed set of libraries that developers can target. It is a good solution to the saturated Linux library situation but unfortunately, several libraries are missing to run Electron. To give Valve credit, they are very responsive and helpful in eventually <a href=\"https://github.com/ValveSoftware/steam-runtime/issues/579\">resolving the issue</a>.</p>\n<h3 id=\"the-ugly-3\">The Ugly<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-ugly-3\"></a></h3>\n<p>Linux accounts for less than 1% of the total players, so from a business perspective, it is not worth it. And the platform has the <em>highest</em> percentage of players who run into platform-specific issues - the time used for customer support only makes the economy worse. Also, I don’t own a Steam Deck, so adding support is not always easy: Valve does not provide a SteamOS image to test. So Steam Deck-specific code (like controller support, starting the game in full-screen, making the UI bigger, etc) is not tested end-to-end. I’ve used <a href=\"https://github.com/HoloISO/holoiso\">HoloISO</a> with limited success.</p>\n<p><strong>TL;DR: Even worse economy than Mac but less annoyance perhaps</strong></p>\n<h2 id=\"ios\">iOS<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ios\"></a></h2>\n<h3 id=\"the-good-4\">The Good<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-good-4\"></a></h3>\n<p>Industry Idle’s core engine is actually a mobile engine - before Industry Idle, I was mainly making mobile games. However, Industry Idle is a desktop-first game, which means porting to mobile requires quite some UI adjustments. The game runs inside a custom <code>WkWebView</code> on iOS, with some bridging code that exposes native APIs (like Game Center). iOS hardware and software are generally less saturated compared to Android, which means after testing the game on my aging iPhone 6, I have high confidence that the game will work fine on most other iOS devices.</p>\n<p>The base game of Industry Idle is free-to-play, with two Expansion Packs available for purchase (one-time purchase, not subscriptions) - the same as Steam. There’s only one optional “reward video” ad that allows a player to double the offline income by watching an ad. The game has no microtransactions - I don’t like mobile games that are full of ads or are very pushy about microtransactions.</p>\n<p>iOS is generally a more “premium” mobile platform compared to Android, which means more players have purchased expansion packs compared to Android. Even though iOS accounts for only about 30% of all mobile players. it brings in about 50% of all mobile income. Also a nice side-effect of Apple’s walled garden is that iOS has the lowest <em>percentage</em> of cheaters.</p>\n<p>I know there have been lots of complaints about App Review on iOS. I feel the situation has been much improved. Review time is relatively short (1-2 days) and if a reviewer rejects an update for nonsensical grounds, a quick reply usually solves the problem. For example, once an update was rejected for missing a “Restore Purchase” button. I replied by telling the reviewer where to find the button with a screenshot and also <em>gently</em> pointing out the fact that that button had been there since the initial release, which was more than <em>50 releases ago</em>. The update was approved the next day. During the initial release, the game was rejected for “copying an existing game”. It turned out the AppStore reviewer believed I was “pirating” the Steam version of Industry Idle. I ended up putting a secret web page on the official website, telling the reviewer that I was indeed the developer behind the Steam version. The release was timely approved. The fact that AppStore has human reviewers is a double-edged sword. On the one hand, people make mistakes, which causes unnecessary annoyances. On the other hand, it’s easy to talk to an actual human and resolve any issues. Compared to Google Play, which is very machine-driven and is very hard to find a human for solutions.</p>\n<h3 id=\"the-bad-4\">The Bad<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-bad-4\"></a></h3>\n<p><code>WkWebView</code> is the only allowed web view on iOS and its update is coupled with the iOS update. Apple stopped supporting the iPhone 6 a while ago, which means it is stuck with iOS 12 and a relatively ancient WkWebView. Luckily most players use a much newer iPhone, which helps with this problem.</p>\n<p>Similar to developing for macOS, a Mac is pretty much required for developing for iOS and there’s the $100 per year developer membership fee. I think the combined income of both iOS and macOS (95% of which comes from iOS) barely covers the cost of the membership fee and the cheapest Mac Mini. And presumably an iPhone is needed for testing, which means the game would be running at a loss. Luckily I had my old Macbook and iPhone so I didn’t have to spend that money.</p>\n<p>Just like macOS, iOS is not really designed for build automation either. Partially because I have to run it on a Mac, and partially because the automation pipeline is flaky. <a href=\"https://fastlane.tools/\">Fastlane</a> is a tremendous time saver, however, the build will occasionally fail (2FA required or Apple Server down) and require manual intervention. Because of this, I don’t produce iOS or macOS beta builds.</p>\n<h3 id=\"the-ugly-4\">The Ugly<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-ugly-4\"></a></h3>\n<p>Mobile is generally a very different platform compared to desktop. Even though it has a very large audience, reaching the target audience usually requires paid user acquisition (i.e. spending money to buy ads). I have zero marketing budget: a lot of players learn about the game on other platforms; a lot of players join via their friends (word of mouth); and there was once a spike in downloads which I could only imagine was from AppStore Editorial or algorithm. Since I was never told anything about this, I could not confirm it.</p>\n<p>The lack of annoying ads and pushy microtransactions provide a good experience on mobile. However, this means the mobile income is abysmal: it’s a fraction of desktop versions, even though the player amount is much higher.</p>\n<p><strong>TL;DR: 50% of supporting mobile is supporting iOS</strong></p>\n<h2 id=\"android\">Android<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#android\"></a></h2>\n<h3 id=\"the-good-5\">The Good<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-good-5\"></a></h3>\n<p>Android version uses the built-in <code>WebView</code> and Google has been doing a decent job of keeping it up-to-date. Since it is <em>not</em> tied to the OS update, a bigger percentage of players on Android have a relatively recent version. However, the same cannot be said about the operating system itself and hardware, which I will get to later. Android’s automated build pipeline (powered by Fastlane) is much faster and more stable - it runs on Windows, Mac and Linux and the command line has first-class support. Android devices are generally cheaper to acquire - I use Android as my daily phone so extra saving for me! As mentioned before, Google Play uses lots of machine-based checks, which means update review is generally faster (a few hours) if everything goes well.</p>\n<h3 id=\"the-bad-5\">The Bad<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-bad-5\"></a></h3>\n<p>Android OS and hardware is a mess! There are lots of different hardware, each can run a different OS version, which can have weird customizations from manufacturers. WebView is in general okay but native APIs are very messy - the same API can behave very differently on different devices (e.g. when display cutout API was first introduced, the adoption was bad and each manufacturer has its own quirkiness). My strategy is simple: I test on my own phone and cross my fingers hoping it will work on other devices.</p>\n<p>Also Android has a relatively aggressive API deprecation strategy. Google Play requires a relatively recent <code>targetSdkVersion</code> and would reject an app update if one of the third-party SDKs is deprecated. This means I have to constantly fire up Android Studio and update Android and SDK versions (sometimes Kotlin and Gradle versions as well). The project usually will fail to compile, which means several hours of fixing and testing. This does not happen every day but often enough to be annoying. In comparison, I only have to open XCode and update the native Swift code maybe twice since the initial release.</p>\n<h3 id=\"the-ugly-5\">The Ugly<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-ugly-5\"></a></h3>\n<p>Android accounts for 70% of all mobile players but the revenue is about the same as iOS. Few people have purchased the expansion packs and most income actually comes from the one and only <em>optional</em> reward video ad. Actually, the ad implementation on Android is probably buggy since it oftentimes does not show up after backgrounding the game until a hard restart - I have got complaints from users about this! However, I never managed to figure out why - partially because I couldn’t reproduce it on my phone and partially because I’d like to spend my time working on the game, not debugging some buggy Ad SDK.</p>\n<p><strong>TL;DR: The other 50% of supporting mobile is supporting Android</strong></p>\n<h2 id=\"conclusion\">Conclusion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conclusion\"></a></h2>\n<p>I appreciate that you’ve read through my long rant about platform support as a one-man indie and hopefully, this will help you in your decision-making - I know I will definitely make better choices for <a href=\"https://www.cividle.com/\">my next game</a>. When talking about game development, the boring details above are rarely mentioned, yet they are of vital importance in actually shipping a game and they can take a lot of effort. In fact, apart from doing platform support work, most of my time is spent on customer support, community management, reviewing and banning cheaters, and server maintenance. So much so that the work on my new game is severely delayed. I’ve yet to find a good balance but I am trying my best.</p>\n<p><a href=\"https://news.ycombinator.com/item?id=37862606\">Discuss on HN</a> or <a href=\"https://www.reddit.com/r/gamedev/comments/176gafm/one_game_by_one_man_on_six_platforms_the_good_the/\">Reddit</a></p>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}