{"pageProps":{"note":{"id":"2hr2a959ggj0h4hjahf7ohm","title":"5 Must-Know Differences Between ref() and reactive() in Vue","desc":"","updated":1675314415241,"created":1675314190978,"custom":{},"fname":"dev.javascript.vue.ref-reactive-differences-vue","type":"note","vault":{"fsPath":"vault"},"contentHash":"68b1d70c4eecb7a592690df2f829abe0","links":[],"anchors":{"1-primitive-values":{"type":"header","text":"1. Primitive values","value":"1-primitive-values","line":10,"column":0,"depth":2},"11-ref":{"type":"header","text":"1.1 ref()","value":"11-ref","line":14,"column":0,"depth":3},"12-reactive":{"type":"header","text":"1.2 reactive()","value":"12-reactive","line":28,"column":0,"depth":3},"2-accessing-reactive-data":{"type":"header","text":"2. Accessing reactive data","value":"2-accessing-reactive-data","line":48,"column":0,"depth":2},"21-ref":{"type":"header","text":"2.1 ref()","value":"21-ref","line":52,"column":0,"depth":3},"22-reactive":{"type":"header","text":"2.2 reactive()","value":"22-reactive","line":89,"column":0,"depth":3},"3-reassigning-data":{"type":"header","text":"3. Reassigning data","value":"3-reassigning-data","line":107,"column":0,"depth":2},"ref":{"type":"header","text":"ref()","value":"ref","line":111,"column":0,"depth":3},"reactive":{"type":"header","text":"reactive()","value":"reactive","line":131,"column":0,"depth":3},"4-typing":{"type":"header","text":"4. Typing","value":"4-typing","line":155,"column":0,"depth":2},"ref-1":{"type":"header","text":"ref()","value":"ref-1","line":157,"column":0,"depth":3},"reactive-1":{"type":"header","text":"reactive()","value":"reactive-1","line":185,"column":0,"depth":3},"5-watching":{"type":"header","text":"5. Watching","value":"5-watching","line":211,"column":0,"depth":2},"ref-2":{"type":"header","text":"ref()","value":"ref-2","line":215,"column":0,"depth":3},"reactive-2":{"type":"header","text":"reactive()","value":"reactive-2","line":287,"column":0,"depth":3},"6-usage":{"type":"header","text":"6. Usage","value":"6-usage","line":321,"column":0,"depth":2},"7-conclusion":{"type":"header","text":"7. Conclusion","value":"7-conclusion","line":329,"column":0,"depth":2}},"children":[],"parent":"p6jdsvhol2ebyzilnb5u3ot","data":{}},"body":"<h1 id=\"5-must-know-differences-between-ref-and-reactive-in-vue\">5 Must-Know Differences Between ref() and reactive() in Vue<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#5-must-know-differences-between-ref-and-reactive-in-vue\"></a></h1>\n<blockquote>\n<p><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/\">https://dmitripavlutin.com/ref-reactive-differences-vue/</a></p>\n</blockquote>\n<h2 id=\"1-primitive-values\">1. Primitive values<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-primitive-values\"></a></h2>\n<p><code>ref()</code> and <code>reactive()</code> handle differently primitive values: strings, numbers, booleans, <code>null</code>, and <code>undefined</code>.</p>\n<h3 id=\"11-ref\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#11-ref\"></a>1.1 ref()<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#11-ref\"></a></h3>\n<p><code>refs()</code> stores both primitive values and objects:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> ref <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n<span class=\"token keyword\">const</span> numberRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// OK</span>\n<span class=\"token keyword\">const</span> objectRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// OK</span>\n</code></pre>\n<p>In the example above <code>ref(0)</code> creates a ref storing a primitive value.</p>\n<p>Same way, <code>ref({ count: 0 })</code> creates a ref storing a plain JavaScript object.</p>\n<h3 id=\"12-reactive\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#12-reactive\"></a>1.2 reactive()<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#12-reactive\"></a></h3>\n<p>On the other side, <code>reactive()</code> doesn't store primitives, but stores only objects:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> reactive <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n<span class=\"token keyword\">const</span> numberReactive <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NOT OK!</span>\n<span class=\"token keyword\">const</span> objectReactive <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// OK</span>\n</code></pre>\n<p>Calling <code>reactive(0)</code> with a primitive value is incorrect. Don't do this. If you need to make reactive primitive values, <code>ref(0)</code> is the way to go.</p>\n<p>The reason why <code>reactive()</code> works only with objects is in Vue's reactivity implementation. <a href=\"https://github.com/vuejs/core/blob/main/packages/reactivity/src/reactive.ts#L212\">Vue uses Proxies</a> to intercept property changes on objects. And proxies do not work with primitives.</p>\n<p>Nevertheless, <code>reactive({ count: 0})</code> initialized with an object is perfectly valid and creates a reactive object.</p>\n<p>In conclusion:</p>\n<blockquote>\n<p><code>ref()</code> <em>can</em> store primitive values, while <code>reactive()</code> <em>cannot</em>.</p>\n</blockquote>\n<h2 id=\"2-accessing-reactive-data\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#2-accessing-reactive-data\"></a>2. Accessing reactive data<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-accessing-reactive-data\"></a></h2>\n<p>The second difference is how you'd access the data stored inside <code>ref()</code> and <code>reactive()</code>.</p>\n<h3 id=\"21-ref\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#21-ref\"></a>2.1 ref()<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#21-ref\"></a></h3>\n<p><code>ref()</code> data, either a primitive value or an object, is accessed through a special property <code>.value</code>:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> ref <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n<span class=\"token keyword\">const</span> numberRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>numberRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// logs 0</span>\n<span class=\"token keyword\">const</span> objectRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>objectRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// logs 0</span>\n</code></pre>\n<p><code>numberRef.value</code> is how you access the primitive value from the ref <code>numberRef</code>.</p>\n<p><code>&#x3C;ref>.value</code> is a special property available on all the refs to read or update the ref value.</p>\n<p>Also, <code>objectRef.value.count</code> is how you can access a property of an object in ref.</p>\n<p>Note that inside templates you don't have to use <code>.value</code> to access a ref value: they're auto-unwrapped.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> ref <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n\n  <span class=\"token keyword\">const</span> numberRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>template</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>div</span><span class=\"token punctuation\">></span></span>{{ numberRef }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token comment\">&#x3C;!-- &#x3C;div>0&#x3C;/div> --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/ref-unwrapping-template-hp5ixh?file=/src/App.vue\">Open the demo.</a></p>\n<p>In the interpolation <code>{{ numberRef }}</code> the ref is auto-unwrapped.</p>\n<h3 id=\"22-reactive\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#22-reactive\"></a>2.2 reactive()<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#22-reactive\"></a></h3>\n<p><code>reactive()</code> data, on the other hand, is accessed directly:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> reactive <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n<span class=\"token keyword\">const</span> objectReactive <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>objectReactive<span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// logs 0</span>\n</code></pre>\n<p>Accessing reactive data created using <code>reactive({ count: 0} )</code> doesn't need additional syntax and is done directly: <code>objectReactive.count</code>.</p>\n<p>The reactive object returned by <code>reactive(originalObject)</code> is a proxy object of <code>originalObject</code>. Meaning that the reactive object has the same properties (aka has the same interface) as the <code>originalObject</code>.</p>\n<p>In conclusion:</p>\n<blockquote>\n<p><code>ref()</code> data is accessed using <em><code>value</code> property</em> (exception: in templates the ref is auto-unwrapped), while <code>reactive()</code> data is accessed <em>directly</em>.</p>\n</blockquote>\n<h2 id=\"3-reassigning-data\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#3-reassigning-data\"></a>3. Reassigning data<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3-reassigning-data\"></a></h2>\n<p><code>ref()</code> is accessed and updated using <code>.value</code> property, while <code>reactive()</code> is a proxy of the original object. As result <code>ref()</code> can be reassigned to an new object, while <code>reactive()</code> cannot.</p>\n<h3 id=\"ref\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#ref\"></a>ref()<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ref\"></a></h3>\n<p>Reassigning the value of a <code>ref()</code> entirely to a new value is perfectly valid:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> ref<span class=\"token punctuation\">,</span> onMounted <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n\n  <span class=\"token keyword\">const</span> objectRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>objectRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>template</span><span class=\"token punctuation\">></span></span>{{ objectRef.count }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/ref-reassign-oi4zjy?file=/src/App.vue\">Try the demo.</a></p>\n<p>Open the demo, and see that replacing entirely the ref value <code>objectRef.value = { count: 1 }</code> after mounting is reflected in the output. The reactivity is kept.</p>\n<h3 id=\"reactive\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#reactive\"></a>reactive()<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reactive\"></a></h3>\n<p>Reassigning entirely a <code>reactive()</code> object, however, is not possible:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> reactive<span class=\"token punctuation\">,</span> onMounted <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n\n  <span class=\"token keyword\">let</span> objectReactive <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>objectReactive <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>template</span><span class=\"token punctuation\">></span></span>{{ objectReactive.count }}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/reactive-reassign-dpf9yf?file=/src/App.vue\">Try the demo.</a></p>\n<p>Open the demo, and see that replacing entirely the reactive object value <code>objectReactive = { count: 1 }</code> after mounting is not reflected in the output. Doing so breaks the reactivity of <code>objectReactive</code>.</p>\n<p>In conclusion:</p>\n<blockquote>\n<p><code>ref()</code> value can be reassigned entirely to a new object, while a <code>reactive()</code> cannot.</p>\n</blockquote>\n<h2 id=\"4-typing\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#4-typing\"></a>4. Typing<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#4-typing\"></a></h2>\n<h3 id=\"ref-1\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#ref-1\"></a>ref()<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ref-1\"></a></h3>\n<p>A direct consequence of ref data being accessed through <code>.value</code> property is how refs are typed.</p>\n<p>To annotate a ref you need to use a special type <code>Ref</code>, available for importing from <code>vue</code> library:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> ref<span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Ref</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n\n<span class=\"token keyword\">const</span> numberRef<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Ref</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>Ref&#x3C;number></code> is the type meaning a ref holding a number.</p>\n<p>If you want to assign a ref as an argument to a composable, for example, then make sure to use the <code>Ref&#x3C;V></code> type (where <code>V</code> is the value's type) to annotate a ref parameter:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> ref<span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Ref</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n\n<span class=\"token keyword\">const</span> numberRef<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Ref</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useIsEven</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>numberRef<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Ref</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> numberRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> isEven <span class=\"token operator\">=</span> <span class=\"token function\">useIsEven</span><span class=\"token punctuation\">(</span>numberRef<span class=\"token punctuation\">)</span> <span class=\"token comment\">// type check passed</span>\n</code></pre>\n<h3 id=\"reactive-1\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#reactive-1\"></a>reactive()<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reactive-1\"></a></h3>\n<p>On the other hand, reactive data returned by <code>reactive()</code> is typed as the initial object:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> reactive <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n\n<span class=\"token keyword\">const</span> objectReactive<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>reactive({ count: 0})</code> returns an object of type <code>{ count: number }</code>. The reactive object normally keeps the type of the original object.</p>\n<p>But there's one exception — if the reactive object contains refs, then these refs are unwrapped.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> reactive<span class=\"token punctuation\">,</span> ref <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n\n<span class=\"token keyword\">const</span> objectReactive<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Even though the reactive object is <code>{ count: ref(0) }</code>, the returned type is still <code>{ count: number }</code>. All because <code>reactive()</code> automatically unwraps the refs found in the reactive object.</p>\n<p>In conclusion:</p>\n<blockquote>\n<p>refs returned by <code>ref(value: T)</code> are of type <code>Ref&#x3C;T></code>, while reactive objects returned by <code>reactive(object: T)</code> are of type <code>T</code> (exception: refs in reactive are unwrapped).</p>\n</blockquote>\n<h2 id=\"5-watching\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#5-watching\"></a>5. Watching<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#5-watching\"></a></h2>\n<p><code>watch()</code> watches reactive data change. The default behavior of <code>watch()</code> differs for <code>ref()</code> and <code>reactive()</code>.</p>\n<h3 id=\"ref-2\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#ref-2\"></a>ref()<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ref-2\"></a></h3>\n<p><code>watch()</code> determines if <code>.value</code> property of the ref is changed:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> ref<span class=\"token punctuation\">,</span> watch <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n\n  <span class=\"token keyword\">const</span> countNumberRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>countNumberRef<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changed!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> countNumberRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token operator\">++</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>template</span><span class=\"token punctuation\">></span></span>\n  {{ countNumberRef }}\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>increase<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Increase<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/watch-ref-value-y6ery8?file=/src/App.vue\">Open the demo.</a></p>\n<p>Every time you click the \"Increase\" button, you'll see in the console the message \"changed!\". <code>watch(count, callback)</code> calls <code>callback</code> every time <code>countNumberRef.value</code> changes.</p>\n<p>But does <code>watch()</code> watch deep changes of an object stored in <code>ref()</code>? Let's try!</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> ref<span class=\"token punctuation\">,</span> watch <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n\n  <span class=\"token keyword\">const</span> countObjectRef <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>countObjectRef<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changed!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> countObjectRef<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">count</span><span class=\"token operator\">++</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>template</span><span class=\"token punctuation\">></span></span>\n  {{ countObjectRef.count }}\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>increase<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Increase<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/watch-ref-value-deep-x8re97?file=/src/App.vue\">Open the demo.</a></p>\n<p>This time, however, if you click the \"Increase\" button there will be no message in the console! The conclusion is that <code>watch()</code> doesn't deeply watch refs by default.</p>\n<p>However, DOM still updates when <code>countObjectRef.value.count</code> changes: which means the object in the ref is still reactive in regards to the rendered output.</p>\n<p>Of course, if you ask <code>watch()</code> to watch the ref deeply, it's working as full deep watch:</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// ...</span>\n<span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>\n  count<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changed!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> deep<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ...</span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/watch-ref-value-deep-working-m7t9eq?file=/src/App.vue\">Open the demo.</a></p>\n<h3 id=\"reactive-2\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#reactive-2\"></a>reactive()<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reactive-2\"></a></h3>\n<p>In the case of watching a reactive object, <code>watch()</code> always performs a deep watch (even if you don't indicate <code>{ deep: true }</code>) option.</p>\n<p>ts</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> reactive<span class=\"token punctuation\">,</span> watch <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"vue\"</span>\n\n  <span class=\"token keyword\">const</span> countObjectReactive <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> counter<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> val<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>countObjectReactive<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"changed!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increase</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> countObjectReactive<span class=\"token punctuation\">.</span><span class=\"token property-access\">counter</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">val</span><span class=\"token operator\">++</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>template</span><span class=\"token punctuation\">></span></span>\n  {{ countObjectReactive.counter.val }}\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>increase<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Increase<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>template</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><a href=\"https://codesandbox.io/s/reactive-deep-watch-3klsxl?file=/src/App.vue\">Open the demo.</a></p>\n<p>Every time you click the \"Increase\" button, you'll see in the console the message \"changed!\". <code>watch(countObjectReactive, callback)</code> calls <code>callback</code> every time any property (even a deep one) of <code>countObjectReactive</code> changes.</p>\n<p>In conclusion:</p>\n<blockquote>\n<p><code>watch()</code> by default watches <em>only direct <code>.value</code> change</em> of <code>ref()</code>, while doing a <em>deep</em> watch of a <code>reactive()</code> object.</p>\n</blockquote>\n<h2 id=\"6-usage\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#6-usage\"></a>6. Usage<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#6-usage\"></a></h2>\n<p>While there isn't a strict rule, still, there are situations when using a specific reactivity function is preferable:</p>\n<ol>\n<li>If you need a reactive primitive value, then using <code>ref()</code> is the right choice.</li>\n<li>If you need a reactive <a href=\"https://en.wikipedia.org/wiki/Value_object\">value object</a> (an object whose properties usually don't change), then using <code>ref()</code> is a good option.</li>\n<li>If you need a reactive mutable object, and you want to track even the deeply mutated properties of that object, then using <code>reactive()</code> is a good option.</li>\n</ol>\n<h2 id=\"7-conclusion\"><a href=\"https://dmitripavlutin.com/ref-reactive-differences-vue/#7-conclusion\"></a>7. Conclusion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#7-conclusion\"></a></h2>\n<p>This post presented the differences between <code>ref()</code> and <code>reactive()</code> in composition API:</p>\n<ol>\n<li><code>ref()</code> can store a primitive value, while <code>reactive()</code> cannot.</li>\n<li>You access the value stored in a <code>ref()</code> using <code>&#x3C;ref>.value</code>, while <code>reactive()</code> object can be used directly as a regular object.</li>\n<li><code>ref()</code> value can be reassigned to an entirely new object, while <code>reactive()</code> cannot.</li>\n<li><code>ref()</code> is typed as <code>Ref&#x3C;V></code>, while the reactive object returned by <code>reactive(originalObject)</code> usually maintains the type of the <code>originalObject</code>.</li>\n<li><code>watch()</code> (when used without options) normally watches only direct changes of <code>&#x3C;ref>.value</code>, while watching deeply <code>reactive()</code> objects.</li>\n</ol>\n<p>You'd use <code>ref()</code> to store primitives or value objects, but <code>reactive()</code> if you're interested to watch deep changes of a mutable object.</p>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}