{"pageProps":{"note":{"id":"vf7legeg0iluoyi3l1haomp","title":"JavaScript Closure: A Simple Explanation","desc":"","updated":1675316794256,"created":1675315983636,"custom":{},"fname":"dev.javascript.dmitri-pavlutin--javascript-closure","type":"note","vault":{"fsPath":"vault"},"contentHash":"5aa8d66d1225a3379bbfb0fbcfd85acd","links":[],"anchors":{"1-the-scope":{"type":"header","text":"1. The scope","value":"1-the-scope","line":18,"column":0,"depth":2},"2-scopes-nesting":{"type":"header","text":"2. Scopes nesting","value":"2-scopes-nesting","line":71,"column":0,"depth":2},"3-the-lexical-scope":{"type":"header","text":"3. The lexical scope","value":"3-the-lexical-scope","line":99,"column":0,"depth":2},"4-the-closure":{"type":"header","text":"4. The closure","value":"4-the-closure","line":139,"column":0,"depth":2},"5-closure-examples":{"type":"header","text":"5. Closure examples","value":"5-closure-examples","line":199,"column":0,"depth":2},"51-event-handler":{"type":"header","text":"5.1 Event handler","value":"51-event-handler","line":201,"column":0,"depth":3},"52-callbacks":{"type":"header","text":"5.2 Callbacks","value":"52-callbacks","line":217,"column":0,"depth":3},"53-functional-programming":{"type":"header","text":"5.3 Functional programming","value":"53-functional-programming","line":247,"column":0,"depth":3},"6-conclusion":{"type":"header","text":"6. Conclusion","value":"6-conclusion","line":272,"column":0,"depth":2}},"children":[],"parent":"IowIScQvzEu3KQ4dvwPTt","data":{}},"body":"<h1 id=\"javascript-closure-a-simple-explanation\">JavaScript Closure: A Simple Explanation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#javascript-closure-a-simple-explanation\"></a></h1>\n<blockquote>\n<p><a href=\"https://dmitripavlutin.com/javascript-closure/\">https://dmitripavlutin.com/javascript-closure/</a></p>\n</blockquote>\n<p>The callbacks, event handlers, higher-order functions can access outer scope variables thanks to the closure. The closure concept is important in functional programming and is often asked during the JavaScript coding interview.</p>\n<p>While being used everywhere, closures are difficult to grasp. If you haven't had your \"Aha!\" moment in understanding closures, then this post is for you.</p>\n<p>I'll start with the fundamental terms: scope and lexical scope. Then, after grasping the basics, you'll need just one step to finally understand closures.</p>\n<p>Before starting, I suggest you resist the urge to skip the scope and lexical scope sections. These concepts are crucial to closures, and if you get them well, the idea of closure becomes self-evident.</p>\n<h2 id=\"1-the-scope\"><a href=\"https://dmitripavlutin.com/javascript-closure/#1-the-scope\"></a>1. The scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-the-scope\"></a></h2>\n<p>When you define a variable, you want it to exist within some boundaries. E.g. a <code>result</code> variable makes sense to exist within a <code>calculate()</code> function, as an internal detail. Outside of the <code>calculate()</code>, the <code>result</code> variable is useless.</p>\n<p>The accessibility of variables is managed by <em>scope</em>. You are free to access the variable defined within its scope. But outside of that scope, the variable is inaccessible.</p>\n<p>In JavaScript, a scope is created by a function or a code block.</p>\n<p>Let's see how the scope affects the availability of a variable <code>count</code>. This variable belongs to the scope created by function <code>foo()</code>:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// The function scope</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// logs 0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ReferenceError: count is not defined</span>\n</code></pre>\n<p><code>count</code> is freely accessed within the scope of <code>foo()</code>.</p>\n<p>However, outside of the <code>foo()</code> scope, <code>count</code> is inaccessible. If you try to access <code>count</code> from outside anyways, JavaScript throws <code>ReferenceError: count is not defined</code>.</p>\n<p>If you've defined a variable inside of a function or code block, then you can use this variable only within that function or code block. The above example demonstrates this behavior.</p>\n<p>Now, let's see a general formulation:</p>\n<blockquote>\n<p><em>The scope</em> is a space policy that rules the accessibility of variables.</p>\n</blockquote>\n<p>An immediate property arises — the scope <em>isolates</em> variables. That's great because <em>different scopes can have variables with the same name</em>.</p>\n<p>You can reuse common variables names (<code>count</code>, <code>index</code>, <code>current</code>, <code>value</code>, etc) in different scopes without collisions.</p>\n<p><code>foo()</code> and <code>bar()</code> function scopes have their own, but same named, variables <code>count</code>:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \"foo\" function scope</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// logs 0</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// \"bar\" function scope</span>\n  <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// logs 1</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>count</code> variables from <code>foo()</code> and <code>bar()</code> function scopes do not collide.</p>\n<h2 id=\"2-scopes-nesting\"><a href=\"https://dmitripavlutin.com/javascript-closure/#2-scopes-nesting\"></a>2. Scopes nesting<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-scopes-nesting\"></a></h2>\n<p>Let's play a bit more with scopes, and nest one scope into another. For example, the function <code>innerFunc()</code> is nested inside an outer function <code>outerFunc()</code>.</p>\n<p>How would the 2 function scopes interact with each other? Can I access the variable <code>outerVar</code> of <code>outerFunc()</code> from within <code>innerFunc()</code> scope?</p>\n<p>Let's try that in the example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// the outer scope</span>\n  <span class=\"token keyword\">let</span> outerVar <span class=\"token operator\">=</span> <span class=\"token string\">\"I am outside!\"</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the inner scope</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>outerVar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// => logs \"I am outside!\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Indeed, <code>outerVar</code> variable is accessible inside <code>innerFunc()</code> scope. The variables of the outer scope are accessible inside the inner scope.</p>\n<p>Now you know 2 interesting things:</p>\n<ul>\n<li><em>Scopes can be nested</em></li>\n<li><em>The variables of the outer scope are accessible inside the inner scope</em></li>\n</ul>\n<h2 id=\"3-the-lexical-scope\">3. The lexical scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3-the-lexical-scope\"></a></h2>\n<p>How does JavaScript understand that <code>outerVar</code> inside <code>innerFunc()</code> corresponds to the variable <code>outerVar</code> of <code>outerFunc()</code>?</p>\n<p>JavaScript implements a scoping mechanism named <em>lexical scoping</em> (or static scoping). Lexical scoping means that the accessibility of variables is determined by the position of the variables inside the nested scopes.</p>\n<p>Simpler, the lexical scoping means that inside the inner scope you can access variables of outer scopes.</p>\n<p>It's called <em>lexical</em> (or <em>static</em>) because the engine determines (at <a href=\"https://en.wikipedia.org/wiki/Lexical_analysis\">lexing time</a>) the nesting of scopes just by looking at the JavaScript source code, without executing it.</p>\n<p>The distilled idea of the lexical scope:</p>\n<blockquote>\n<p><em>The lexical scope</em> consists of outer scopes determined statically.</p>\n</blockquote>\n<p>For example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myGlobal <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> myVar <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>myGlobal<span class=\"token punctuation\">)</span> <span class=\"token comment\">// logs \"0\"</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerOfFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> myInnerVar <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>myVar<span class=\"token punctuation\">,</span> myGlobal<span class=\"token punctuation\">)</span> <span class=\"token comment\">// logs \"1 0\"</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">innerOfInnerOfFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>myInnerVar<span class=\"token punctuation\">,</span> myVar<span class=\"token punctuation\">,</span> myGlobal<span class=\"token punctuation\">)</span> <span class=\"token comment\">// logs \"2 1 0\"</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">innerOfInnerOfFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">innerOfFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>The lexical scope of <code>innerOfInnerOfFunc()</code> consits of scopes of <code>innerOfFunc()</code>, <code>func()</code> and global scope (the outermost scope). Within <code>innerOfInnerOfFunc()</code> you can access the lexical scope variables <code>myInnerVar</code>, <code>myVar</code> and <code>myGlobal</code>.</p>\n<p>The lexical scope of <code>innerFunc()</code> consists of <code>func()</code> and global scope. Within <code>innerOfFunc()</code> you can access the lexical scope variables <code>myVar</code> and <code>myGlobal</code>.</p>\n<p>Finally, the lexical scope of <code>func()</code> consists of only the global scope. Within <code>func()</code> you can access the lexical scope variable <code>myGlobal</code>.</p>\n<h2 id=\"4-the-closure\"><a href=\"https://dmitripavlutin.com/javascript-closure/#4-the-closure\"></a>4. The closure<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#4-the-closure\"></a></h2>\n<p>Ok, the lexical scope allows to access the variables statically of the outer scopes. There's just one step until the closure!</p>\n<p>Let's take a look again at the <code>outerFunc()</code> and <code>innerFunc()</code> example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> outerVar <span class=\"token operator\">=</span> <span class=\"token string\">\"I am outside!\"</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>outerVar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// => logs \"I am outside!\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Inside the <code>innerFunc()</code> scope, the variable <code>outerVar</code> is accessed from the lexical scope. That's known already.</p>\n<p>Note that <code>innerFunc()</code> invocation happens inside its lexical scope (the scope of <code>outerFunc()</code>).</p>\n<p>Let's make a change: <code>innerFunc()</code> to be invoked outside of its lexical scope: in a function <code>exec()</code>. Would <code>innerFunc()</code> still be able to access <code>outerVar</code>?</p>\n<p>Let's make the adjustments to the code snippet:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> outerVar <span class=\"token operator\">=</span> <span class=\"token string\">\"I am outside!\"</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">innerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>outerVar<span class=\"token punctuation\">)</span> <span class=\"token comment\">// => logs \"I am outside!\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> innerFunc\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> myInnerFunc <span class=\"token operator\">=</span> <span class=\"token function\">outerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">myInnerFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Now <code>innerFunc()</code> is executed outside of its lexical scope, but exactly in the scope of <code>exec()</code> function. And what's important:</p>\n<p><em><code>innerFunc()</code> still has access to <code>outerVar</code> from its lexical scope, even being executed outside of its lexical scope.</em></p>\n<p>In other words, <code>innerFunc()</code> <em>closes over</em> (a.k.a. captures, remembers) the variable <code>outerVar</code> from its lexical scope.</p>\n<p>In other words, <code>innerFunc()</code> is a <em>closure</em> because it closes over the variable <code>outerVar</code> from its lexical scope.</p>\n<p>You've made the final step to understanding what a closure is:</p>\n<blockquote>\n<p><em>The closure</em> is a function that accesses its lexical scope even executed outside of its lexical scope.</p>\n</blockquote>\n<p>Simpler, the closure is a function that remembers the variables from the place where it is defined, regardless of where it is executed later.</p>\n<p>A rule of thumb to identify a closure: if inside a function you see an alien variable (not defined inside that function), most likely that function is a closure because the alien variable is captured.</p>\n<p>In the previous code snippet, <code>outerVar</code> is an alien variable inside the closure <code>innerFunc()</code> captured from <code>outerFunc()</code> scope.</p>\n<p>Let's continue with examples that demonstrate why the closure is useful.</p>\n<h2 id=\"5-closure-examples\"><a href=\"https://dmitripavlutin.com/javascript-closure/#5-closure-examples\"></a>5. Closure examples<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#5-closure-examples\"></a></h2>\n<h3 id=\"51-event-handler\"><a href=\"https://dmitripavlutin.com/javascript-closure/#51-event-handler\"></a>5.1 Event handler<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#51-event-handler\"></a></h3>\n<p>Let's display how many times a button is clicked:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> countClicked <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nmyButton<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  countClicked<span class=\"token operator\">++</span>\n  myText<span class=\"token punctuation\">.</span><span class=\"token property-access\">innerText</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You clicked </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>countClicked<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> times</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>When the button is clicked, <code>handleClick()</code> is executed somewhere inside of the DOM code. The execution happens far from the place of the definition.</p>\n<p>But being a closure, <code>handleClick()</code> captures <code>countClicked</code> from the lexical scope and updates it when a click happens. Even more, <code>myText</code> is captured too.</p>\n<h3 id=\"52-callbacks\"><a href=\"https://dmitripavlutin.com/javascript-closure/#52-callbacks\"></a>5.2 Callbacks<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#52-callbacks\"></a></h3>\n<p>Capturing variables from the lexical scope is useful in callbacks.</p>\n<p>A <code>setTimeout()</code> callback:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span> <span class=\"token comment\">// logs \"Hello, World!\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>The <code>callback()</code> is a closure because it captures the variable <code>message</code>.</p>\n<p>An iterator function for <code>forEach()</code>:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> countEven <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">const</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span>\nitems<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    countEven<span class=\"token operator\">++</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\ncountEven <span class=\"token comment\">// => 2</span>\n</code></pre>\n<p>The <code>iterator</code> is a closure because it captures <code>countEven</code> variable.</p>\n<h3 id=\"53-functional-programming\"><a href=\"https://dmitripavlutin.com/javascript-closure/#53-functional-programming\"></a>5.3 Functional programming<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#53-functional-programming\"></a></h3>\n<p>Currying happens when a function returns another function until the arguments are fully supplied.</p>\n<p>For example:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">executeMultiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> a <span class=\"token operator\">*</span> b\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> double <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 6</span>\n<span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 10</span>\n<span class=\"token keyword\">const</span> triple <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">triple</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => 12</span>\n</code></pre>\n<p><code>multiply</code> is a curried function that returns another function.</p>\n<p>Currying, an important concept of functional programming, is also possible thanks to closures.</p>\n<p><code>executeMultiply(b)</code> is a closure that captures <code>a</code> from its lexical scope. When the closure is invoked, the captured variable <code>a</code> and the parameter <code>b</code> are used to calculate <code>a * b</code>.</p>\n<h2 id=\"6-conclusion\"><a href=\"https://dmitripavlutin.com/javascript-closure/#6-conclusion\"></a>6. Conclusion<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#6-conclusion\"></a></h2>\n<p>The scope rules the accessibility of variables. There can be a function or a block scope.</p>\n<p>The lexical scope allows a function scope to access statically the variables from the outer scopes.</p>\n<p>Finally, a closure is a function that captures variables from its lexical scope. In simple words, the closure remembers the variables from the place where it is defined, no matter where it is executed.</p>\n<p>Closures allow event handlers, callbacks to capture variables. They're used in functional programming. Moreover, you could be asked how closures work during a Frontend job interview.</p>\n<p>What about a challenge? <a href=\"https://dmitripavlutin.com/javascript-closures-interview-questions/\">7 Interview Questions on JavaScript Closures. Can You Answer Them?</a></p>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}