{"pageProps":{"note":{"id":"acvfwko2zkttghtfvatxr5b","title":"Use Maps More and Objects Less","desc":"","updated":1676505575435,"created":1676504920562,"custom":{},"fname":"dev.javascript.language.maps","type":"note","vault":{"fsPath":"vault"},"contentHash":"76d9d1a2ae2835cddf6282f552e446f7","links":[],"anchors":{"performance-issues-with-objects":{"type":"header","text":"Performance issues with objects","value":"performance-issues-with-objects","line":34,"column":0,"depth":3},"built-in-keys-problem":{"type":"header","text":"Built-in keys problem","value":"built-in-keys-problem","line":56,"column":0,"depth":3},"iteration-awkwardness":{"type":"header","text":"Iteration awkwardness","value":"iteration-awkwardness","line":76,"column":0,"depth":3},"key-ordering":{"type":"header","text":"Key ordering","value":"key-ordering","line":162,"column":0,"depth":3},"copying":{"type":"header","text":"Copying","value":"copying","line":179,"column":0,"depth":3},"converting-maps-to-objects-and-objects-to-maps":{"type":"header","text":"Converting maps to objects and objects to maps","value":"converting-maps-to-objects-and-objects-to-maps","line":202,"column":0,"depth":3},"key-types":{"type":"header","text":"Key types","value":"key-types","line":258,"column":0,"depth":3},"weakmaps":{"type":"header","text":"WeakMaps","value":"weakmaps","line":306,"column":0,"depth":3},"moar-map-stuff":{"type":"header","text":"Moar map stuff","value":"moar-map-stuff","line":322,"column":0,"depth":3},"sets":{"type":"header","text":"Sets","value":"sets","line":335,"column":0,"depth":3},"serialization":{"type":"header","text":"Serialization","value":"serialization","line":360,"column":0,"depth":3},"when-you-should-use-what":{"type":"header","text":"When you should use what","value":"when-you-should-use-what","line":462,"column":0,"depth":3},"about-me":{"type":"header","text":"About me","value":"about-me","line":499,"column":0,"depth":2}},"children":[],"parent":"mraMGoestTO9V6pkpE8XE","data":{}},"body":"<h1 id=\"use-maps-more-and-objects-less\">Use Maps More and Objects Less<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#use-maps-more-and-objects-less\"></a></h1>\n<blockquote>\n<p><a href=\"https://www.builder.io/blog/maps\">https://www.builder.io/blog/maps</a></p>\n</blockquote>\n<p>Objects in JavaScript are awesome. They can do anything! Literally…anything.</p>\n<p>But, like all things, just because you <em>can</em> do something, doesn’t (necessarily) mean you <em>should.</em></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 🚩</span>\n<span class=\"token keyword\">const</span> mapOfThings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nmapOfThings<span class=\"token punctuation\">[</span>myThing<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> myThing\n\n<span class=\"token keyword\">delete</span> mapOfThings<span class=\"token punctuation\">[</span>myThing<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>For instance, if you're using objects in JavaScript to store arbitrary key value pairs where you'll be adding and removing keys frequently, you should really consider using a <code>map</code> instead of a plain object.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// ✅</span>\n<span class=\"token keyword\">const</span> mapOfThings <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmapOfThings<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>myThing<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> myThing<span class=\"token punctuation\">)</span>\n\nmapOfThings<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>myThing<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"performance-issues-with-objects\">Performance issues with objects<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#performance-issues-with-objects\"></a></h3>\n<p>Whereas with objects, where the delete operator is notorious for poor performance, maps are optimized for this exact use case and in some cases can be seriously faster.</p>\n<p><a href=\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2Fdefb300b5ebe42108d9ab813d3b99b5f?width=705\">Benchmark result (from the below link) showing Maps about 5x faster in this benchmark compared to Objects</a></p>\n<p>Note of course this is just one <a href=\"https://perf.builder.io/?q=eyJpZCI6IndkbG1kbG94cm5nIiwidGl0bGUiOiJNYXAgdnMgT2JqZWN0IFBlcmZvcm1hbmNlIiwiYmVmb3JlIjoiY29uc3QgcmFuZG9tS2V5ID0gKCkgPT4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMDApXG5jb25zdCBkYXRhID0gWy4uLkFycmF5KDEwMDAwKV0ubWFwKHJhbmRvbUtleSlcbmNvbnN0IG9iaiA9IE9iamVjdC5mcm9tRW50cmllcyhkYXRhLm1hcCh4ID0%2BIFt4LCB4XSkpXG5jb25zdCBtYXAgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKG9iaikpIiwidGVzdHMiOlt7Im5hbWUiOiJNYXAiLCJjb2RlIjoiLy8gRnJlZXplIHRoZSBrZXlzIGxpc3QgKHdlIGRvbid0IHdhbnQgdG8gbXV0YXRlIHdoaWxlIGl0ZXJhdGluZylcbmNvbnN0IGtleXMgPSBBcnJheS5mcm9tKG1hcC5rZXlzKCkpXG5mb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gIC8vIERlbGV0ZSBrZXlcbiAgbWFwLmRlbGV0ZShrZXkpXG4gIC8vIENyZWF0ZSBhIHJhbmRvbSBuZXcga2V5XG4gIGNvbnN0IG5ld0tleSA9IHJhbmRvbUtleSgpXG4gIG1hcC5zZXQobmV3S2V5LCBuZXdLZXkpXG59IiwicnVucyI6W10sIm9wcyI6OTAxfSx7Im5hbWUiOiJPYmplY3QiLCJjb2RlIjoiY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iailcbmZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgLy8gRGVsZXRlIGtleVxuICBkZWxldGUgb2JqW2tleV1cbiAgLy8gQ3JlYXRlIGEgcmFuZG9tIG5ldyBrZXlcbiAgY29uc3QgbmV3S2V5ID0gcmFuZG9tS2V5KClcbiAgb2JqW25ld0tleV0gPSBuZXdLZXlcbn0iLCJydW5zIjpbXSwib3BzIjoxODN9XSwidXBkYXRlZCI6IjIwMjMtMDItMDlUMDc6MDk6MzQuMjY2WiJ9\">example benchmark</a> (run with Chrome v109 on a Core i7 MBP). You can also compare <a href=\"https://www.notion.so/Use-Maps-more-and-Objects-less-Outline-6f3e4c17e18543908ddde250ad9d2315\">another benchmark</a> created by <a href=\"https://www.zhenghao.io/posts/object-vs-map#performance-extravaganza\">Zhenghao He</a>. Just keep in mind — micro benchmarks like this are <a href=\"https://mrale.ph/blog/2012/12/15/microbenchmarks-fairy-tale.html\">notoriously imperfect</a> so take them with a grain of salt.</p>\n<p>That said, you don’t need to trust my or anyone else’s benchmarks, as <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#objects_vs._maps\">MDN itself clarifies that maps are specifically optimized for this use case</a> of frequently adding and removing keys, as compared with an object that is not as optimized for this use case:</p>\n<p><a href=\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F0d08535f5d2e4c5bbefe257c58103d25?width=705\">Screenshot of the MDN docs pointing to Maps being mentioned to have better performance than Objects for scenarios that involve frequent additions and removals of key-value pairs</a></p>\n<p>If you are curious why, it has to do with how JavaScript VMs optimize JS objects by assuming their <a href=\"https://mathiasbynens.be/notes/shapes-ics\">shape</a>, whereas a map is purpose-built for the use case of a hashmap where keys are dynamic and ever-changing.</p>\n<p>Read more about how VMs assume shapes in this thread by Miško (CTO of <a href=\"https://www.builder.io/\">Builder.io</a>, and creator of Angular and <a href=\"https://qwik.builder.io/\">Qwik</a>):</p>\n<p>Another great article is <a href=\"https://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html\">What’s up with monomorphism</a>, which explains the performance characteristics of objects in JavaScript, and why they are not as optimized for hashmap-like use cases of frequently adding and removing keys.</p>\n<p><img src=\"https://pbs.twimg.com/media/FoRGcweaQAQjB1g.png\" alt=\"Understanding monomorphism can improve your JavaScript performance 60x.\"></p>\n<p>But beyond performance, maps also solve for several issues that exist with objects.</p>\n<h3 id=\"built-in-keys-problem\">Built-in keys problem<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#built-in-keys-problem\"></a></h3>\n<p>One major issue of objects for hashmap-like use cases is that objects are polluted with tons of keys built into them already. <em>WHAT?</em></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nmyMap<span class=\"token punctuation\">.</span><span class=\"token property-access\">valueOf</span> <span class=\"token comment\">// => [Function: valueOf]</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token property-access\">toString</span> <span class=\"token comment\">// => [Function: toString]</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token property-access\">hasOwnProperty</span> <span class=\"token comment\">// => [Function: hasOwnProperty]</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token property-access\">isPrototypeOf</span> <span class=\"token comment\">// => [Function: isPrototypeOf]</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token property-access\">propertyIsEnumerable</span> <span class=\"token comment\">// => [Function: propertyIsEnumerable]</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token property-access\">toLocaleString</span> <span class=\"token comment\">// => [Function: toLocaleString]</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token property-access\">constructor</span> <span class=\"token comment\">// => [Function: Object]</span>\n</code></pre>\n<p>So if you try and access any of these properties, each of them has values already even though this object is supposed to be empty.</p>\n<p>This alone should be a clear reason not to use an object for an arbitrary-keyed hashmap, as it can lead to some really hairy bugs you’ll only discover later.</p>\n<h3 id=\"iteration-awkwardness\">Iteration awkwardness<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#iteration-awkwardness\"></a></h3>\n<p>Speaking of strange ways that JavaScript objects treat keys, iterating through objects is riddled with gotchas.</p>\n<p>For instance, you may already know not to do this:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 🚩 You may stumble upon some inherited keys you didn't mean to</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>And you may have been told instead to do this:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 🚩</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>But this is still problematic, as <code>myObject.hasOwnProperty</code> can easily be overridden with any other value. Nothing is preventing anyone from doing <code>myObject.hasOwnProperty = () => explode()</code>.</p>\n<p>So instead you should really do this funky mess:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">prototype</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">call</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 😕</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Or if you prefer your code to not look like a mess, you can use the more recently added <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn\"><code>Object.hasOwn</code></a>:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">hasOwn</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 😐</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Or you can give up on a <code>for</code> loop entirely and just use <code>Object.keys</code> with <code>forEach</code>.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 😬</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>However, with maps, there are no such issues at all. You can use a standard <code>for</code> loop, with a standard iterator, and a really nice destructuring pattern to get both the <code>key</code> and <code>value</code> at once:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 😍</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><em>Me gusta.</em></p>\n<p>In fact, this is so nice, we now have an <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\"><code>Object.entries</code></a> method to do similar with objects. It's one additional step so doesn't feel quite so first-class, but hey it works.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 🙂</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Add that one to the long list of \"loops in objects are ugly so choose one of the following 5 options you prefer\".</p>\n<p>But for Maps, it's nice to know there is one simple and elegant way to iterate built in directly.</p>\n<p>Additionally, you can iterate over just keys or values as well:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> value <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 🙂</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">of</span> myMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 🙂</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"key-ordering\">Key ordering<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#key-ordering\"></a></h3>\n<p>One additional perk of maps is they preserve the order of their keys. This has been a long asked for quality of objects, and now exists for maps.</p>\n<p>This gives us another very cool feature, which is that we can destructure keys directly from a map, in their exact order:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>firstKey<span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> myMap\n</code></pre>\n<p>This can also open up some interesting use cases, like trivially implementing an O(1) LRU Cache:</p>\n<blockquote>\n<p>One cool use case for Maps - creating a simple O(1) LRU cache</p>\n<p>Given how Maps preserve the order of their keys, implementation is trivial:<br>\n<a href=\"https://t.co/HkMyzL03o0\">https://t.co/HkMyzL03o0</a></p>\n</blockquote>\n<h3 id=\"copying\">Copying<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#copying\"></a></h3>\n<p>Now you might say, <em>oh, well, objects have some advantages, like they're very easy to copy</em>, for instance, using an object spread or assign.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> copied <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token spread operator\">...</span>myObject <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> copied <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> myObject<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>But it turns out that maps are just as easy to copy:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> copied <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>The reason this works is because the constructor of <code>Map</code> takes an iterable of <code>[key, value]</code> tuples. And conveniently, maps are iterable, producing tuples of their keys and values. Nice.</p>\n<p>Similarly, you can also do deep copies of maps, just like you can with objects, using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/structuredClone\">structuredClone</a>:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> deepCopy <span class=\"token operator\">=</span> <span class=\"token function\">structuredClone</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"converting-maps-to-objects-and-objects-to-maps\">Converting maps to objects and objects to maps<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#converting-maps-to-objects-and-objects-to-maps\"></a></h3>\n<p>Converting maps to objects is readily done using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries\">Object.fromEntries</a>:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEntries</span><span class=\"token punctuation\">(</span>myMap<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>And going the other way is straightforward as well, using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\">Object.entries</a>:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>myObj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Easy!</p>\n<p>And, now that we know this, we no longer have to construct maps using tuples:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">\"keyTwo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"valueTwo\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>You can instead construct them like objects, which to me is a bit nicer on the eyes:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    key<span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span>\n    keyTwo<span class=\"token operator\">:</span> <span class=\"token string\">\"valueTwo\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Or you could make a handy little helper too:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">makeMap</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token function\">makeMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Or with TypeScript:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> makeMap <span class=\"token operator\">=</span> <span class=\"token operator\">&#x3C;</span><span class=\"token constant\">V</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">unknown</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>obj<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Record</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> myMap <span class=\"token operator\">=</span> <span class=\"token function\">makeMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => Map&#x3C;string, string></span>\n</code></pre>\n<p>I’m a fan of that.</p>\n<h3 id=\"key-types\">Key types<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#key-types\"></a></h3>\n<p>Maps are not just a more ergonomic and better-performing way to handle key value maps in JavaScript. They can even do things that you just cannot accomplish at all with plain objects.</p>\n<p>For instance, maps are not limited to only having strings as keys — you can use any type of object as a key for a map. And I mean, like, anything.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">myMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\nmyMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>myDog<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>But, why?</p>\n<p>One helpful use case for this is associating metadata with an object without having to modify that object directly.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> metadata <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmetadata<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>myDomNode<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  internalId<span class=\"token operator\">:</span> <span class=\"token string\">\"...\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmetadata<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>myDomNode<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => { internalId: '...' }</span>\n</code></pre>\n<p>This can be useful, for instance, when you want to associate temporary state to objects you read and write from a database. You can add as much temporary data associated directly with the object reference, without risk.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> metadata <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmetadata<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>myTodo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  focused<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmetadata<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span>myTodo<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => { focused: true }</span>\n</code></pre>\n<p>Now when we save <code>myTodo</code> back to the database, only the values we want saved are there, and our temporary state (which is in a separate map) does not get included accidentally.</p>\n<p>This does have one issue though.</p>\n<p>Normally, the garbage collector would collect this object and remove it from memory. However, because our map is holding a reference, it'll never be garbage collected, causing a memory leak.</p>\n<h3 id=\"weakmaps\">WeakMaps<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#weakmaps\"></a></h3>\n<p>Here’s where we can use the <code>WeakMap</code> type. Weak maps perfectly solve for the above memory leak as they hold a weak reference to the object.</p>\n<p>So if all other references are removed, the object will automatically be garbage collected and removed from this weak map.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> metadata <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">WeakMap</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ✅ No memory leak, myTodo will be removed from the map</span>\n<span class=\"token comment\">// automatically when there are no other references</span>\nmetadata<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>myTodo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  focused<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"moar-map-stuff\">Moar map stuff<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#moar-map-stuff\"></a></h3>\n<p>A few remaining useful things to know about Maps before we continue on:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">map<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Clear a map entirely</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token property-access\">size</span> <span class=\"token comment\">// Get the size of the map</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Iterator of all map keys</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Iterator of all map values</span>\n</code></pre>\n<p>Ok, you get it, maps have nice methods. Moving on.</p>\n<h3 id=\"sets\">Sets<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sets\"></a></h3>\n<p>If we are talking about maps, we should also mention their cousin, Sets, which give us a better-performing way to create a <em>unique</em> list of elements where we can easily add, remove, and look up if a set contains an item:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Set</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nset<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\nset<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">has</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>In some cases, sets can <a href=\"https://perf.builder.io/?q=eyJpZCI6IjZtaDFsdjJscm56IiwidGl0bGUiOiJBcnJheSB2cyBTZXQgcGVyZm9ybWFuY2UiLCJiZWZvcmUiOiJjb25zdCBsZW5ndGggPSAxMF8wMDBcbmNvbnN0IGFyciA9IFsuLi5BcnJheShsZW5ndGgpLmtleXMoKV0ubWFwKHggPT4gKHggKiAxNikudG9TdHJpbmcoMzYpKVxuY29uc3Qgc2V0ID0gbmV3IFNldChhcnIpIiwidGVzdHMiOlt7Im5hbWUiOiJBcnJheSIsImNvZGUiOiJjb25zdCByYW5kb21WYWx1ZSA9IChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBsZW5ndGgpICogMTYpLnRvU3RyaW5nKDM2KVxuXG4vLyBGaW5kIHRoZSB2YWx1ZVxuYXJyLmluY2x1ZGVzKHJhbmRvbVZhbHVlKVxuXG4vLyBSZW1vdmUgdGhlIHZhbHVlXG5hcnIuc3BsaWNlKGFyci5pbmRleE9mKHJhbmRvbVZhbHVlKSwgMSlcblxuLy8gQWRkIGl0IGJhY2tcbmFyci5wdXNoKHJhbmRvbVZhbHVlKSIsInJ1bnMiOltdLCJvcHMiOjEwNDQwfSx7Im5hbWUiOiJTZXQiLCJjb2RlIjoiY29uc3QgcmFuZG9tVmFsdWUgPSAoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGVuZ3RoKSAqIDE2KS50b1N0cmluZygzNilcblxuLy8gRmluZCB0aGUgdmFsdWVcbnNldC5oYXMocmFuZG9tVmFsdWUpXG5cbi8vIFJlbW92ZSB0aGUgdmFsdWVcbnNldC5kZWxldGUocmFuZG9tVmFsdWUpXG5cbi8vIEFkZCBpdCBiYWNrXG5zZXQuYWRkKHJhbmRvbVZhbHVlKSIsInJ1bnMiOltdLCJvcHMiOjc4MTMxNn1dLCJ1cGRhdGVkIjoiMjAyMy0wMi0wN1QxMDoxOTozMi4wNjVaIn0%3D\">yield significantly better performance</a> than the equivalent operations with an array.</p>\n<p><a href=\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F7034341cab394484b2e80ea3829b1acb?width=705\">Screenshot of the Array vs Set benchmark with Sets having almost 100x better performance</a></p>\n<p><em>Blah blah microbenchmarks are not perfect, test your own code under real-world conditions to verify you get a benefit, or</em> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#performance\"><em>don't just take my word for it</em></a>.</p>\n<p>Similarly, we get a <code>WeakSet</code> class in JavaScript that will help us avoid memory leaks as well.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// No memory leaks here, captain 🫡</span>\n<span class=\"token keyword\">const</span> checkedTodos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">WeakSet</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>todo1<span class=\"token punctuation\">,</span> todo2<span class=\"token punctuation\">,</span> todo3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"serialization\"><a href=\"https://www.builder.io/blog/maps#serialization\">Serialization</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#serialization\"></a></h3>\n<p>Now you might say there's one last advantage that plain objects and arrays have over maps and sets — serialization.</p>\n<p><em>Ha! You thought you got me on that one. But I’ve got answers for you, friend.</em></p>\n<p>So, yes, <code>JSON.stringify()</code>/ <code>JSON.parse()</code> support for objects and maps is extremely handy.</p>\n<p>But, have you ever noticed that when you want to pretty print JSON you always have to add a <code>null</code> as the second argument? Do you know what that parameter even does?</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">//                  ^^^^ what dis do</span>\n</code></pre>\n<p>As it turns out, that parameter can be very helpful to us. It is called a <em>replacer</em> and it allows us to define how any custom type should be serialized.</p>\n<p>We can use this to easily convert maps and sets to objects and arrays for serialization:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Convert maps to plain objects</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEntries</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Convert sets to arrays</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Set</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> value\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>Why did the JavaScript developer quit their job? They didn’t get <em>arrays</em>. Ha ha ho ho. Ok.</p>\n</blockquote>\n<p>Now we can just abstract this into a basic reusable function, and serialize away.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> set<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Set</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> map<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// => { set: [1, 2, 3], map: { key: value } }</span>\n</code></pre>\n<p>For converting back, we can use the same trick with <code>JSON.parse()</code>, but doing the opposite, by using its <em>reviver</em> parameter, to convert arrays back to Sets and objects back to maps when parsing:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">isArray</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Set</span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> value\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Also note that both <em>replacers</em> and <em>revivers</em> work recursively, so they are able to serialize and deserialize maps and sets <em>anywhere</em> in our JSON tree.</p>\n<p>But, there is just one small problem with our above serialization implementation.</p>\n<p>We currently don’t differentiate a plain object or array versus a map or a set at parse time, so we cannot intermix plain objects and maps in our JSON or we will end up with this:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> hello<span class=\"token operator\">:</span> <span class=\"token string\">\"world\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> reviver<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Map&#x3C;string, string></span>\n</code></pre>\n<p>We can solve this by creating a special property; for example, called <code>__type</code>, to denote when something should be a map or a set as opposed to a plain object or array, like so:</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">replacer</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> __type<span class=\"token operator\">:</span> <span class=\"token string\">\"Map\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">fromEntries</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Set</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">{</span> __type<span class=\"token operator\">:</span> <span class=\"token string\">\"Set\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token known-class-name class-name\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword module\">from</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reviver</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">?.</span>__type <span class=\"token operator\">===</span> <span class=\"token string\">\"Set\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Set</span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">?.</span>__type <span class=\"token operator\">===</span> <span class=\"token string\">\"Map\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token known-class-name class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">entries</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token property-access\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword control-flow\">return</span> value\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> set<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Set</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> map<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> replacer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> reviver<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// { set: new Set([1, 2]), map: new Map([['key', 'value']]) }</span>\n</code></pre>\n<p>Now we have full JSON serialization and deserialization support for sets and maps. Neat.</p>\n<h3 id=\"when-you-should-use-what\"><a href=\"https://www.builder.io/blog/maps#when-you-should-use-what\">When you should use what</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#when-you-should-use-what\"></a></h3>\n<p>For structured objects that have a well-defined set of keys — such as if every <code>event</code> should have a title and a date — you generally want an object.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// For structured objects, use Object</span>\n<span class=\"token keyword\">const</span> event <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> <span class=\"token string\">\"Builder.io Conf\"</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Date</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>They're very optimized for fast reads and writes when you have a fixed set of keys.</p>\n<p>When you can have any number of keys, and you may need to add and remove keys frequently, consider using <code>map</code> for better performance and ergonomics.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// For dynamic hashmaps, use Map</span>\n<span class=\"token keyword\">const</span> eventsMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Map</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\neventsMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">)</span>\neventsMap<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token property-access\">id</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>When creating an array where the order of elements matter and you may intentionally want duplicates in the array, then a plain array is generally a great idea.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// For ordered lists, or those that may need duplicate items, use Array</span>\n<span class=\"token keyword\">const</span> myArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<p>But when you know you never want duplicates and the order of items doesn't matter, consider using a set.</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// For unordered unique lists, use Set</span>\n<span class=\"token keyword\">const</span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token known-class-name class-name\">Set</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"about-me\"><a href=\"https://www.builder.io/blog/maps#about-me\">About me</a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#about-me\"></a></h2>\n<p>Hi! I'm <a href=\"https://twitter.com/Steve8708?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor\">Steve</a>, CEO of <a href=\"https://www.builder.io/\">Builder.io</a>.</p>\n<p>We make a way to drag + drop with your components to create pages and other CMS content on your site or app, <a href=\"https://www.builder.io/blog/headless-cms-workflow\">visually</a>.</p>\n<p>You may find it interesting or useful:</p>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}