{"pageProps":{"note":{"id":"6ap7amibzjhel2cuq17yxwx","title":"리소스 우선순위 - preload, preconnect, prefetch","desc":"","updated":1689748559408,"created":1689748255799,"custom":{},"fname":"dev.web.performance.preload-preconnect-prefetch","type":"note","vault":{"fsPath":"vault"},"contentHash":"b3d7aa7b0ca38c3982303e7bcfc18449","links":[],"anchors":{"preload":{"type":"header","text":"preload","value":"preload","line":10,"column":0,"depth":2},"주의-사항":{"type":"header","text":"주의 사항","value":"주의-사항","line":21,"column":0,"depth":3},"as-속성-사용":{"type":"header","text":"as 속성 사용","value":"as-속성-사용","line":25,"column":0,"depth":4},"중복-리소스-참조":{"type":"header","text":"중복 리소스 참조","value":"중복-리소스-참조","line":29,"column":0,"depth":4},"반드시-사용되는-리소스에만-사용":{"type":"header","text":"반드시 사용되는 리소스에만 사용","value":"반드시-사용되는-리소스에만-사용","line":33,"column":0,"depth":4},"사용-사례":{"type":"header","text":"사용 사례","value":"사용-사례","line":39,"column":0,"depth":3},"폰트":{"type":"header","text":"폰트","value":"폰트","line":43,"column":0,"depth":4},"critical-rendering-path의-css와-javascript":{"type":"header","text":"Critical Rendering Path의 CSS와 JavaScript","value":"critical-rendering-path의-css와-javascript","line":59,"column":0,"depth":4},"preconnect":{"type":"header","text":"preconnect","value":"preconnect","line":70,"column":0,"depth":2},"주의사항":{"type":"header","text":"주의사항","value":"주의사항","line":82,"column":0,"depth":3},"사례":{"type":"header","text":"사례","value":"사례","line":86,"column":0,"depth":3},"정확한-경로를-알-수-없을-때":{"type":"header","text":"정확한 경로를 알 수 없을 때","value":"정확한-경로를-알-수-없을-때","line":90,"column":0,"depth":4},"미디어-스트리밍":{"type":"header","text":"미디어 스트리밍","value":"미디어-스트리밍","line":96,"column":0,"depth":4},"prefetch":{"type":"header","text":"prefetch","value":"prefetch","line":100,"column":0,"depth":2},"주의사항-1":{"type":"header","text":"주의사항","value":"주의사항-1","line":112,"column":0,"depth":3},"재귀적으로-동작하지-않는다":{"type":"header","text":"재귀적으로 동작하지 않는다.","value":"재귀적으로-동작하지-않는다","line":116,"column":0,"depth":4},"override-목적으로-사용하지-않는다":{"type":"header","text":"Override 목적으로 사용하지 않는다.","value":"override-목적으로-사용하지-않는다","line":126,"column":0,"depth":4},"vuejs의-lazy-load":{"type":"header","text":"Vue.JS의 Lazy load","value":"vuejs의-lazy-load","line":146,"column":0,"depth":2},"prefetch-기능":{"type":"header","text":"prefetch 기능","value":"prefetch-기능","line":150,"column":0,"depth":3},"prefetch-기능-제거":{"type":"header","text":"prefetch 기능 제거","value":"prefetch-기능-제거","line":156,"column":0,"depth":4},"특정-컴포넌트에-prefetch-적용하기":{"type":"header","text":"특정 컴포넌트에 prefetch 적용하기","value":"특정-컴포넌트에-prefetch-적용하기","line":175,"column":0,"depth":4},"주의사항-2":{"type":"header","text":"주의사항","value":"주의사항-2","line":183,"column":0,"depth":3},"비동기-컴포넌트로-정의되었다면-모두-prefetch-된다":{"type":"header","text":"비동기 컴포넌트로 정의되었다면 모두 prefetch 된다.","value":"비동기-컴포넌트로-정의되었다면-모두-prefetch-된다","line":187,"column":0,"depth":4},"request-요청-수가-증가한다":{"type":"header","text":"Request 요청 수가 증가한다.","value":"request-요청-수가-증가한다","line":193,"column":0,"depth":4},"load-타임스탬프-살펴보기":{"type":"header","text":"Load 타임스탬프 살펴보기","value":"load-타임스탬프-살펴보기","line":201,"column":0,"depth":4},"고찰":{"type":"header","text":"고찰","value":"고찰","line":209,"column":0,"depth":3},"1-현재-페이지에서-반드시-필요한-리소스가-가장-낮은-우선순위로-받게-됩니다":{"type":"header","text":"1. 현재 페이지에서 반드시 필요한 리소스가 가장 낮은 우선순위로 받게 됩니다.","value":"1-현재-페이지에서-반드시-필요한-리소스가-가장-낮은-우선순위로-받게-됩니다","line":213,"column":0,"depth":4},"2-비동기-컴포넌트로-정의된-모든-리소스를-다운로드하게-되어-다운로드해야-할-리소스-개수가-증가하게-됩니다":{"type":"header","text":"2. 비동기 컴포넌트로 정의된 모든 리소스를 다운로드하게 되어, 다운로드해야 할 리소스 개수가 증가하게 됩니다.","value":"2-비동기-컴포넌트로-정의된-모든-리소스를-다운로드하게-되어-다운로드해야-할-리소스-개수가-증가하게-됩니다","line":217,"column":0,"depth":4},"필요한-파일만-prefetch-하는-것이-좋습니다":{"type":"header","text":"필요한 파일만 prefetch 하는 것이 좋습니다.","value":"필요한-파일만-prefetch-하는-것이-좋습니다","line":221,"column":0,"depth":4},"요약":{"type":"header","text":"요약","value":"요약","line":227,"column":0,"depth":2},"참고":{"type":"header","text":"참고","value":"참고","line":235,"column":0,"depth":5}},"children":[],"parent":"pa1bstln0xt54o30z6taebc","data":{}},"body":"<h1 id=\"리소스-우선순위---preload-preconnect-prefetch\">리소스 우선순위 - preload, preconnect, prefetch<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#리소스-우선순위---preload-preconnect-prefetch\"></a></h1>\n<blockquote>\n<p><a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/\">https://beomy.github.io/tech/browser/preload-preconnect-prefetch/</a></p>\n</blockquote>\n<h2 id=\"preload\">preload<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#preload\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#preload\"></a></h2>\n<p>현재 페이지에서 사용될 것이 확실한 리소스들을 <code>preload</code>해야 합니다. <code>preload</code>는 브라우저에게 현재 페이지에서 필요한 리소스를 빠르게 가져오게 합니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>super-important.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>critical.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre>\n<p><code>preload</code>는 위의 코드와 같이 <code>&#x3C;link rel=\"preload\" as=\"...\"></code>와 같이 사용합니다.</p>\n<h3 id=\"주의-사항\">주의 사항<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#주의-사항\"></a></h3>\n<p><code>preload</code>를 사용할 때 주의해야 할 몇 가지 사항을 살펴보도록 하겠습니다.</p>\n<h4 id=\"as-속성-사용\"><code>as</code> 속성 사용<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#as-%EC%86%8D%EC%84%B1-%EC%82%AC%EC%9A%A9\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#as-속성-사용\"></a></h4>\n<p><code>as</code> 속성을 사용하여 리소스의 유형을 브라우저에 알려줘야 합니다. 올바른 유형이 설정되어 있지 않다면 브라우저는 해당 리소스를 사용하지 않습니다.</p>\n<h4 id=\"중복-리소스-참조\">중복 리소스 참조<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%A4%91%EB%B3%B5-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%B0%B8%EC%A1%B0\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#중복-리소스-참조\"></a></h4>\n<p><code>preload</code>는 브라우저가 반드시 리소스를 가져오게 만듭니다. 리소스를 중복 참조하면 중복된 개수만큼 리소스를 가져오기 때문에 리소스를 중복해서 참조하지 않도록 해야 합니다.</p>\n<h4 id=\"반드시-사용되는-리소스에만-사용\">반드시 사용되는 리소스에만 사용<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EB%B0%98%EB%93%9C%EC%8B%9C-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-%EB%A6%AC%EC%86%8C%EC%8A%A4%EC%97%90%EB%A7%8C-%EC%82%AC%EC%9A%A9\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#반드시-사용되는-리소스에만-사용\"></a></h4>\n<p><code>preload</code>는 현재 페이지에서 반드시 사용되는 리소스에만 사용되어야 합니다.</p>\n<p><code>&#x3C;link rel=\"preload\" as=\"...\"></code>를 이용하여 리소스를 가져왔지만 현재 페이지에서 3초 내로 사용되지 않는 리소스는 브라우저에서 경고가 출력 됩니다. 필요하지 않는 것을 가져오지 하지 않도록 주의해야 합니다.</p>\n<h3 id=\"사용-사례\">사용 사례<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%82%AC%EC%9A%A9-%EC%82%AC%EB%A1%80\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#사용-사례\"></a></h3>\n<p>이번에는 <code>preload</code>를 사용하기 좋은 리소스를 살펴보도록 하겠습니다.</p>\n<h4 id=\"폰트\">폰트<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%ED%8F%B0%ED%8A%B8\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#폰트\"></a></h4>\n<p>사용자가 사이트의 폰트를 기다리는 시간을 감소시키고, 시스템 폰트와 선언된 포트의 충돌을 해결할 수 있습니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span>\n  <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">crossorigin</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>crossorigin<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>font/woff2<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myfont.woff2<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span>\n</code></pre>\n<p>위의 코드와 같이 폰트를 <code>preload</code>해서 브라우저에게 폰트가 즉시 필요하다는 것을 알려줄 수 있습니다.</p>\n<h4 id=\"critical-rendering-path의-css와-javascript\">Critical Rendering Path의 CSS와 JavaScript<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#critical-rendering-path%EC%9D%98-css%EC%99%80-javascript\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#critical-rendering-path의-css와-javascript\"></a></h4>\n<p>페이지 성능을 측정할 때 중요한 개념 중, Critical Rendering Path가 있습니다(<a href=\"https://beomy.github.io/tech/browser/critical-rendering-path\">[Browser] Critical Rendering Path 최적화</a> 참고). Critical Rendering Path란 초기 렌더링 전에 반드시 로드되어야 할 리소스를 말합니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>script<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>super-important.js<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>style<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>critical.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre>\n<p>위의 코드와 같이 초기 렌더링에 반드시 필요한 리소스를 <code>preload</code>해서 렌더링 속도를 높일 수 있습니다.</p>\n<h2 id=\"preconnect\">preconnect<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#preconnect\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#preconnect\"></a></h2>\n<p>현재 페이지에서 외부 도메인의 리소스를 참고하는 것을 브라우저에게 알려 미리 외부 도메인과 연결을 설정할 수 있게 합니다.</p>\n<p><code>preconnect</code>를 사용하면 브라우저가 사이트에 필요한 연결을 미리 예상할 수 있게 됩니다. 브라우저는 필요한 소켓을 미리 설정할 수 있기 때문에 DNS, TCP, TLS 왕복에 필요한 시간을 절약할 수 있게 됩니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preconnect<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://example.com<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre>\n<p>위의 코드와 같이 <code>preconnect</code>를 사용할 수 있습니다.</p>\n<h3 id=\"주의사항\">주의사항<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#주의사항\"></a></h3>\n<p><code>preconnect</code>는 외부 도메인과 연결을 구축하기 때문에 많은 CPU 시간을 차지할 수 있습니다. 보안 연결의 경우 더 많은 시간을 차지할 수 있습니다. 10초 이내로 브라우저가 닫힌다면, 이전의 모든 연결 작업은 낭비되는 것이기 때문에 브라우저가 빨리 닫힐 수 있는 페이지에서는 <code>preconnect</code>를 사용하지 않는 것이 좋습니다.</p>\n<h3 id=\"사례\">사례<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%82%AC%EB%A1%80\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#사례\"></a></h3>\n<p>이번에는 <code>preconnect</code>를 사용하기 좋은 예를 살펴보도록 하겠습니다.</p>\n<h4 id=\"정확한-경로를-알-수-없을-때\">정확한 경로를 알 수 없을 때<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%A0%95%ED%99%95%ED%95%9C-%EA%B2%BD%EB%A1%9C%EB%A5%BC-%EC%95%8C-%EC%88%98-%EC%97%86%EC%9D%84-%EB%95%8C\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#정확한-경로를-알-수-없을-때\"></a></h4>\n<p>주어진 CDN으로 부터 리소스를 가져와야 한다는 것은 알지만 정확한 경로를 모르는 상황이 발생할 수 있습니다. 예를 들면 브라우저 별로 가져와야 하는 JQuery 등의 리소스 버전이 다를 때 가져와야 할 CDN 주소는 알지만 정확한 경로는 알지 못하는 상황을 이야기할 수 있습니다.</p>\n<p>이러한 경우 브라우저는 리소스를 가져오지는 않지만 서버에 미리 연결하여 연결에 필요한 시간을 절약할 수 있습니다. 브라우저는 파일이 필요하기 전에는 리소스를 가져오지 않지만 적어도 연결은 먼저 처리해서 리소스를 요청하고 가져오는 여러 번의 왕복을 기다리지 않아도 됩니다.</p>\n<h4 id=\"미디어-스트리밍\">미디어 스트리밍<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EB%AF%B8%EB%94%94%EC%96%B4-%EC%8A%A4%ED%8A%B8%EB%A6%AC%EB%B0%8D\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#미디어-스트리밍\"></a></h4>\n<p>스크립트가 로드되고 스트리밍 데이터를 처리할 준비가 될 때까지 스트리밍을 기다리고 싶을 수 있습니다. <code>preconnect</code>는 미리 연결을 하기 때문에 리소스를 가져올 준비가 되면 연결을 설정하는 것이 아니라 미리 연결된 설정에 따라 리소스를 가져와 연결을 설정하는 대기 시간을 줄 일 수 있습니다.</p>\n<h2 id=\"prefetch\">prefetch<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#prefetch\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#prefetch\"></a></h2>\n<p>미래에 사용될 것이라고 예상되는 리소스들을 <code>prefetch</code>해야 합니다. 브라우저는 미래에 사용될 리소스들을 가져와 캐시에 저장합니다.</p>\n<p><code>prefetch</code>는 사용자가 다음에 할 행동을 미리 준비하는데 적합한 기능입니다. 예를 들어, 결과 목록에서 첫 번째 제품 상세 페이지를 가져오거나 콘텐츠의 다음 페이지를 가져오는 것을 이야기할 수 있습니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page-2.html<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre>\n<p>위의 코드와 같이 <code>prefetch</code>를 사용할 수 있습니다.</p>\n<h3 id=\"주의사항-1\">주의사항<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-1\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#주의사항-1\"></a></h3>\n<p><code>prefetch</code>를 사용할 때 기억해야 할 몇 가지 내용들을 살펴보도록 하겠습니다.</p>\n<h4 id=\"재귀적으로-동작하지-않는다\">재귀적으로 동작하지 않는다.<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%9E%AC%EA%B7%80%EC%A0%81%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%9E%91%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#재귀적으로-동작하지-않는다\"></a></h4>\n<p><code>prefetch</code>는 재귀적으로 동작하지 않습니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page-2.html<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n</code></pre>\n<p>위의 코드와 같이 <code>prefetch</code>를 사용한다면, <code>page-2.html</code>이라는 HTML 리소스를 가져올 수 있지만 <code>page-2.html</code>에서 사용되는 CSS 등의 리소스들은 가져오지 않습니다.</p>\n<h4 id=\"override-목적으로-사용하지-않는다\">Override 목적으로 사용하지 않는다.<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#override-%EB%AA%A9%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#override-목적으로-사용하지-않는다\"></a></h4>\n<p><code>prefetch</code>는 Override, 즉 재정의 할 목적으로 사용되면 안 됩니다.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prefetch<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optional.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>optional.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;</span>body</span><span class=\"token punctuation\">></span></span>\n    Hello!\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&#x3C;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>위의 코드와 같이 <code>prefetch</code>를 사용할 경우, <code>&#x3C;link rel=\"prefetch\" href=\"optional.css\"></code>의 바로 뒤따라오는 <code>&#x3C;link rel=\"stylesheet\" href=\"optional.css\"></code>의 우선순위를 낮출 것이라고 생각할 수 있지만 그렇지 않습니다.</p>\n<p>실제로는 한 번은 가장 높은 우선순위로, 나머지 한 번은 가장 낮은 우선순위로 스타일을 2번 가져오게 됩니다. 렌더 차단하는 CSS를 기다려야 할 뿐만 아니라, 파일을 두 번 다운로드해야 하는 낭비가 발생하기 때문에 동일한 리소스를 여러 번 가져와야 하는 경우는 피하는 것이 좋습니다.</p>\n<h2 id=\"vuejs의-lazy-load\">Vue.JS의 Lazy load<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#vuejs%EC%9D%98-lazy-load\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#vuejs의-lazy-load\"></a></h2>\n<p>Single Page Application(SPA)의 고질적인 문제는 소스코드가 하나로 뭉쳐져서 사용자가 처음 웹사이트에 접속했을 때 큰 파일을 다운로드하고 파싱을 하느라 초기 렌더링이 느려진다는 점입니다. 이 문제를 해결하기 위해 vue-route는 현재 라우터에서 필요한 파일만 받을 수 있도록 하는 코드 분할(Code Splitting) 기능을 제공합니다. (<a href=\"https://beomy.tistory.com/80\">[vue-router] Lazy Loading Routes</a> 참고)</p>\n<h3 id=\"prefetch-기능\">prefetch 기능<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#prefetch-%EA%B8%B0%EB%8A%A5\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#prefetch-기능\"></a></h3>\n<p>vue-cli3 부터 <code>prefetch</code>가 기본 기능으로 추가되었습니다. 비동기 컴포넌트 정의된 컴포넌트를 <code>prefetch</code>로 가져오도록 기본 기능으로 제공합니다.</p>\n<p>코드 분할을 통해 만들어진 chunk 파일들이 위의 그림과 같이 HTML의 <code>head</code>에 <code>&#x3C;link href=\"...\" ref=\"prefetch\"></code>와 같이 추가됩니다.</p>\n<h4 id=\"prefetch-기능-제거\">prefetch 기능 제거<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#prefetch-%EA%B8%B0%EB%8A%A5-%EC%A0%9C%EA%B1%B0\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#prefetch-기능-제거\"></a></h4>\n<p><code>prefetch</code> 기능을 제거 방법을 이야기하도록 하겠습니다.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// vue.config.js</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token spread operator\">...</span>\n  <span class=\"token method-variable function-variable method function property-access\">chainWebpack</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token spread operator\">...</span>\n    config<span class=\"token punctuation\">.</span><span class=\"token property-access\">plugins</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'prefetch'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token spread operator\">...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><code>vue.config.js</code> 파일의 <code>chainWebpack</code> 밑에 <code>config.plugins.delete('prefetch')</code>를 선언하면 <code>prefetch</code> 기능이 제거됩니다.</p>\n<h4 id=\"특정-컴포넌트에-prefetch-적용하기\">특정 컴포넌트에 prefetch 적용하기<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%ED%8A%B9%EC%A0%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%97%90-prefetch-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#특정-컴포넌트에-prefetch-적용하기\"></a></h4>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackPrefetch: true */</span> <span class=\"token string\">\"./views/About.vue\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>특정 컴포넌트에 <code>prefetch</code>를 적용하고 싶다면 위의 코드와 같이 비동기 컴포넌트를 정의할 때, <code>/* webpackPrefetch: true */</code> 주석을 추가하면 됩니다.</p>\n<h3 id=\"주의사항-2\">주의사항<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD-2\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#주의사항-2\"></a></h3>\n<p><code>prefetch</code>는 미래에 사용될 수 있는 리소스를 미리 캐시 해 두기 때문에, 매우 유용한 기능입니다. 하지만 vue-cli3에서 이 기능을 사용할 때 몇 가지를 주의해야 합니다.</p>\n<h4 id=\"비동기-컴포넌트로-정의되었다면-모두-prefetch-된다\">비동기 컴포넌트로 정의되었다면 모두 prefetch 된다.<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EC%A0%95%EC%9D%98%EB%90%98%EC%97%88%EB%8B%A4%EB%A9%B4-%EB%AA%A8%EB%91%90-prefetch-%EB%90%9C%EB%8B%A4\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#비동기-컴포넌트로-정의되었다면-모두-prefetch-된다\"></a></h4>\n<p>vue-cli3에서 제공하는 <code>prefetch</code> 기능은 생각보다 똑똑하지 않은 것 같습니다.</p>\n<p>위 그림의 <code>global.result-table</code>은 초기 렌더링에 필요한 컴포넌트입니다. 하지만 <code>prefetch</code>로 리소스가 가장 낮은 우선순위로 가져오게 되어 초기 렌더링 속도를 떨어트릴 수 있습니다.</p>\n<h4 id=\"request-요청-수가-증가한다\">Request 요청 수가 증가한다.<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#request-%EC%9A%94%EC%B2%AD-%EC%88%98%EA%B0%80-%EC%A6%9D%EA%B0%80%ED%95%9C%EB%8B%A4\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#request-요청-수가-증가한다\"></a></h4>\n<p>vue-cli3에서 제공하는 <code>prefetch</code> 기능은 비동기 컴포넌트로 정의된 모든 리소스를 <code>prefetch</code>로 가져오는 것으로 보입니다. 그래서 당장 사용하지 않더라고 캐시에 담아두게 됩니다. 비동기 컴포넌트로 정의된 모든 리소스를 다운로드하게 되기 때문에 Request 요청 수가 많아지게 됩니다.</p>\n<p>vue-cli3의 prefetch 사용 시 105개를 Request 요청합니다.</p>\n<p>vue-cli3의 prefetch 제거 시 총 47개의 Request를 요청하였습니다. <code>prefetch</code> 기능을 제거하였다면 라우터가 이동될 때마다 해당 라우터에서 필요한 리소스를 <code>head</code>에 <code>link</code> 태그로 추가됩니다. 즉 미리 리소스를 가져오는 것이 아니라 필요할 때 그때그때 리소스를 가져오게 됩니다. 한번 가져온 리소스는 다시 요청하지는 않습니다.</p>\n<h4 id=\"load-타임스탬프-살펴보기\">Load 타임스탬프 살펴보기<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#load-%ED%83%80%EC%9E%84%EC%8A%A4%ED%83%AC%ED%94%84-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#load-타임스탬프-살펴보기\"></a></h4>\n<p><code>prefetch</code>를 사용하는 가장 큰 이유는 당연히 렌더링 시간을 줄이기 위해서입니다. 이번에는 브라우저가 첫 렌더링을 완료하는 시간이 어떻게 다른지 살펴보도록 하겠습니다. Fast 3G, webpack-dev-serve로 테스트하였습니다.</p>\n<p>위의 그림은 <code>prefetch</code> 기능을 사용할 때 크롬 개발자 도구에서 Network 탭입니다. 파란 글씨의 <code>DOMContentLoaded</code>와 빨간 글씨의 <code>Load</code> 타임스탬프를 주목합시다. (두 타임스탬프의 자세한 내용은 <a href=\"https://beomy.github.io/tech/browser/critical-rendering-path/#%ED%83%80%EC%9E%84%EC%8A%A4%ED%83%AC%ED%94%84\">[Browser] Critical Rendering Path 최적화</a>를 참고 바랍니다.) <code>DOMContentLoaded</code> 타임스탬프는 렌더 트리를 생성할 수 있는 시점을 나타냅니다. 위의 그림을 보면 4분 후에야 렌더 트리를 그릴 수 있게 됩니다.</p>\n<p><code>prefetch</code> 기능을 제거한 후 렌더링 하는데 걸리는 시간은 <code>DOMContentLoaded</code> 타임스탬프를 보면 2.8분 후에 렌더 트리를 그릴 수 있는 것을 볼 수 있습니다.</p>\n<h3 id=\"고찰\">고찰<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EA%B3%A0%EC%B0%B0\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#고찰\"></a></h3>\n<p><code>prefetch</code>를 사용하면 리소스를 미리 캐시 해 두기 때문에 성능이 향상될 것이라고 예상이 됩니다. 하지만 vue-cli3에서 제공하는 <code>prefetch</code> 기능을 사용하면 오히려 첫 렌더링 성능이 저하되는 것으로 확인됩니다. 이런 원인은 2가지로 볼 수 있습니다.</p>\n<h4 id=\"1-현재-페이지에서-반드시-필요한-리소스가-가장-낮은-우선순위로-받게-됩니다\">1. 현재 페이지에서 반드시 필요한 리소스가 가장 낮은 우선순위로 받게 됩니다.<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#1-%ED%98%84%EC%9E%AC-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90%EC%84%9C-%EB%B0%98%EB%93%9C%EC%8B%9C-%ED%95%84%EC%9A%94%ED%95%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4%EA%B0%80-%EA%B0%80%EC%9E%A5-%EB%82%AE%EC%9D%80-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84%EB%A1%9C-%EB%B0%9B%EA%B2%8C-%EB%90%A9%EB%8B%88%EB%8B%A4\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-현재-페이지에서-반드시-필요한-리소스가-가장-낮은-우선순위로-받게-됩니다\"></a></h4>\n<p>꼭 필요한 리소스가 가장 낮은 우선순위로 리소스를 받게 되면, 당연히 렌더링 완료되는 시간도 늦어지게 됩니다.</p>\n<h4 id=\"2-비동기-컴포넌트로-정의된-모든-리소스를-다운로드하게-되어-다운로드해야-할-리소스-개수가-증가하게-됩니다\">2. 비동기 컴포넌트로 정의된 모든 리소스를 다운로드하게 되어, 다운로드해야 할 리소스 개수가 증가하게 됩니다.<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#2-%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-%EC%A0%95%EC%9D%98%EB%90%9C-%EB%AA%A8%EB%93%A0-%EB%A6%AC%EC%86%8C%EC%8A%A4%EB%A5%BC-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C%ED%95%98%EA%B2%8C-%EB%90%98%EC%96%B4-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C%ED%95%B4%EC%95%BC-%ED%95%A0-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EA%B0%9C%EC%88%98%EA%B0%80-%EC%A6%9D%EA%B0%80%ED%95%98%EA%B2%8C-%EB%90%A9%EB%8B%88%EB%8B%A4\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-비동기-컴포넌트로-정의된-모든-리소스를-다운로드하게-되어-다운로드해야-할-리소스-개수가-증가하게-됩니다\"></a></h4>\n<p>1번 이슈와 2번 이슈가 콜라보 되면서 렌더링 완료 시간도 더욱 느려집니다. 다운로드해야 하는 리소스 개수가 많아지고, 그중에서 꼭 필요한 리소스가 가장 마지막에 받아진다면 가장 마지막 리소스가 받아진 이후에야 렌더링이 완료되게 됩니다.</p>\n<h4 id=\"필요한-파일만-prefetch-하는-것이-좋습니다\">필요한 파일만 <code>prefetch</code> 하는 것이 좋습니다.<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%ED%95%84%EC%9A%94%ED%95%9C-%ED%8C%8C%EC%9D%BC%EB%A7%8C-prefetch-%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-%EC%A2%8B%EC%8A%B5%EB%8B%88%EB%8B%A4\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#필요한-파일만-prefetch-하는-것이-좋습니다\"></a></h4>\n<p>vue-cli3가 기본으로 제공하는 <code>prefetch</code> 기능을 사용하면 모든 비동기 컴포넌트를 다운로드해 캐시 하기 때문에 이후의 사용자 행동에 대한 반응은 빨라질 수 있습니다. 초기 렌더링 속도를 향상시키느냐, 초기 렌더링 후의 업데이트 속도를 향상시키느냐 사이의 절충안을 찾아야 할 것 같습니다.</p>\n<p>필요한 컴포넌트 혹은 리소스에만 <code>prefetch</code>하여 사용하여 둘 사이의 절충안을 찾는 것이 좋을 것 같습니다.</p>\n<h2 id=\"요약\">요약<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%9A%94%EC%95%BD\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#요약\"></a></h2>\n<ol>\n<li>현재 페이지에서 반드시 사용되는 리소스는 <code>preload</code> 합니다.</li>\n<li>외부 도메인의 리소스는 <code>preconnect</code> 합니다.</li>\n<li>미래에 사용되는 리소스는 <code>prefetch</code> 합니다.</li>\n<li>vue-cli3에서는 <code>prefetch</code>가 기본으로 제공합니다.</li>\n<li>vue-cli3를 사용한다면 필요한 리소스에만 <code>prefetch</code>하는 것이 좋습니다.</li>\n</ol>\n<h5 id=\"참고\">참고<a href=\"https://beomy.github.io/tech/browser/preload-preconnect-prefetch/#%EC%B0%B8%EA%B3%A0\"></a><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#참고\"></a></h5>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/performance/resource-prioritization?hl=ko\">https://developers.google.com/web/fundamentals/performance/resource-prioritization?hl=ko</a></li>\n<li><a href=\"https://medium.com/@koh.yesl/preload-prefetch-and-priorities-in-chrome-15d77326f646\">https://medium.com/@koh.yesl/preload-prefetch-and-priorities-in-chrome-15d77326f646</a></li>\n<li><a href=\"https://medium.com/@jeongwooahn/vue-js-lazy-load-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B02-3f1a2f4a4ee8\">https://medium.com/@jeongwooahn/vue-js-lazy-load-적용하기2-3f1a2f4a4ee8</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content\">https://developer.mozilla.org/en-US/docs/Web/HTML/Preloading_content</a></li>\n<li><a href=\"https://css-tricks.com/prefetching-preloading-prebrowsing/\">https://css-tricks.com/prefetching-preloading-prebrowsing/</a></li>\n<li><a href=\"https://www.keycdn.com/blog/resource-hints\">https://www.keycdn.com/blog/resource-hints</a></li>\n<li><a href=\"https://medium.com/@pakss328/resource-hint-8fb4e56ee042\">https://medium.com/@pakss328/resource-hint-8fb4e56ee042</a></li>\n<li><a href=\"https://caniuse.com/#search=preload\">https://caniuse.com/#search=preload</a></li>\n<li><a href=\"https://caniuse.com/#search=prefetch\">https://caniuse.com/#search=prefetch</a></li>\n<li><a href=\"https://caniuse.com/#search=preconnect\">https://caniuse.com/#search=preconnect</a></li>\n</ul>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}