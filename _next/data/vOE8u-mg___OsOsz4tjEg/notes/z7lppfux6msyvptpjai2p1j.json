{"pageProps":{"note":{"id":"z7lppfux6msyvptpjai2p1j","title":"Sucrose - The secret behind Elysia speed","desc":"","updated":1729650472961,"created":1729650303794,"custom":{},"fname":"javascript.tools.elysia-sucrose","type":"note","vault":{"fsPath":"vault"},"contentHash":"28fc0d90cd2147e0277db71654687838","links":[],"anchors":{"elysia-is-fast":{"type":"header","text":"Elysia is fast.","value":"elysia-is-fast","line":10,"column":0,"depth":2},"eval":{"type":"header","text":"Eval","value":"eval","line":32,"column":0,"depth":2},"however-it-is-not-entirely-true":{"type":"header","text":"However, it is not entirely true.","value":"however-it-is-not-entirely-true","line":46,"column":0,"depth":2},"http-handler":{"type":"header","text":"HTTP Handler","value":"http-handler","line":72,"column":0,"depth":2},"invisible-input":{"type":"header","text":"Invisible Input","value":"invisible-input","line":163,"column":0,"depth":2},"elysia-can-read-your-code":{"type":"header","text":"Elysia can read your code","value":"elysia-can-read-your-code","line":193,"column":0,"depth":2},"putting-it-together":{"type":"header","text":"Putting it together","value":"putting-it-together","line":220,"column":0,"depth":2},"compile-time-optimization":{"type":"header","text":"Compile time optimization","value":"compile-time-optimization","line":246,"column":0,"depth":2},"tracing":{"type":"header","text":"Tracing","value":"tracing","line":301,"column":0,"depth":2},"the-drawback":{"type":"header","text":"The drawback","value":"the-drawback","line":317,"column":0,"depth":2},"but-why":{"type":"header","text":"But why","value":"but-why","line":339,"column":0,"depth":2}},"children":[],"parent":"vsuy3iuvjqng2jewf82nxoq","data":{}},"body":"<h1 id=\"sucrose---the-secret-behind-elysia-speed\">Sucrose - The secret behind Elysia speed<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sucrose---the-secret-behind-elysia-speed\"></a></h1>\n<blockquote>\n<p><a href=\"https://saltyaom.com/blog/elysia-sucrose/\">https://saltyaom.com/blog/elysia-sucrose/</a></p>\n</blockquote>\n<h2 id=\"elysia-is-fast\">Elysia is fast.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#elysia-is-fast\"></a></h2>\n<p>There is no doubt about that.</p>\n<p>In any benchmark, most of the time Elysia somehow outperforms other (JavaScript) frameworks in the same environment.</p>\n<p>People jokingly says it is like a black magic.</p>\n<p>But the behind the magic lies some interesting technology.</p>\n<p><a href=\"https://saltyaom.com/blog/elysia-sucrose/framework-benchmark.webp\">Framework benchmark showing that Elysia is comparable to performance of Go and Rust</a></p>\n<p>I mentioned Sucrose a lot in Elysia release note.</p>\n<p>A fancy explaination with buzz words would be something like <strong>Static Code Analysis and Dynamic Code Injection using JIT compilation.</strong></p>\n<p>But I am not a fan of buzz words.</p>\n<p>So let me explain it in a simple way.</p>\n<hr>\n<h2 id=\"eval\">Eval<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#eval\"></a></h2>\n<p>We know that we can turn a string into a code using <code>eval</code> or <code>new Function</code>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'console.log(\"Hello, World!\")'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> say <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"something\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"console.log(something)\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Elysia daisuki\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Elysia daisuki</span>\n</code></pre>\n<p>We often heard this practice is evil and should be avoided at all cost.</p>\n<h2 id=\"however-it-is-not-entirely-true\">However, it is not entirely true.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#however-it-is-not-entirely-true\"></a></h2>\n<p>People usually avoid <code>eval</code> because it can execute any code, including malicious code.</p>\n<p>It is like giving a gun to a child.</p>\n<p>It is dangerous.</p>\n<p>It is easy to shoot yourself in the foot.</p>\n<p>But it is not the gun itself that could endanger others, it is one who is wielding it.</p>\n<p>If it is used properly, it can become a very powerful tool.</p>\n<p>The reason why people dislike <code>eval</code> is because it is often used in a way that is not safe.</p>\n<p>However, if we are entirely in the control of all input and handle it <strong>very carefully</strong>, it gives us a lot of power.</p>\n<p>Library like <code>ajv</code>, <code>typebox</code> use <code>eval</code> to create dynamic validation code. They take the input, insert only the necessary code, and then execute it. Removing any unnecessary code thus nearly overhead.</p>\n<p>Regardless of configurations or features they might have, it will almost nearly have no overhead if it is not in used.</p>\n<p>Elysia also use <code>eval</code> in a similar way.</p>\n<hr>\n<h2 id=\"http-handler\">HTTP Handler<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#http-handler\"></a></h2>\n<p>Take a look at this Elysia code</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Elysia</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"elysia\"</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Each HTTP request parse a lot of features like body, query, header, etc.</p>\n<p>Take a moment and think about how are you going to implement this?</p>\n<p>Most people are going to create a centrailize function that parse the request and then pass it to the handler like this:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">centralFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\trequest<span class=\"token punctuation\">,</span>\n\t\tbody<span class=\"token operator\">:</span> <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">parseBody</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tquery<span class=\"token operator\">:</span> <span class=\"token function\">parseQuery</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\theaders<span class=\"token operator\">:</span> <span class=\"token function\">parseHeader</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token property-access\">headers</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token comment\">// and other stuff</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">const</span> handle <span class=\"token operator\">=</span> router<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token property-access\">method</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword control-flow\">return</span> <span class=\"token function\">mapResponse</span><span class=\"token punctuation\">(</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This is a good approach.</p>\n<p>However, you can see that our user handler does not actually use any of the context.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Elysia</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"elysia\"</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>This means that, parsing the request is unnecessary if the handler does not use it.</p>\n<p>We can improve this a little bit by using a <code>getter</code> function.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">centralFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    request<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// This is async</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">parseBody</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">parseQuery</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">get</span> <span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">parseHeader</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token property-access\">headers</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// and other stuff</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> handle <span class=\"token operator\">=</span> router<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">find</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token property-access\">method</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token property-access\">url</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token function\">mapResponse</span><span class=\"token punctuation\">(</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>However, if the property is <code>async</code> user need to use <code>await</code> it before using it.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Elysia</span> <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'elysia'</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Elysia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> body <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\tbody <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> body\n\n\t\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n\n\t\t<span class=\"token keyword control-flow\">return</span> body\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>This is a bit annoying.</p>\n<p>From our perspective, we can clearly see that the handler only use body but code does not know.</p>\n<hr>\n<h2 id=\"invisible-input\">Invisible Input<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#invisible-input\"></a></h2>\n<p>Talking about input, most of the time people think about passing parameter to a function.</p>\n<p>But we can take a function itself as an input.</p>\n<p>This might come with a bit of surprise, but you can also turn a code into a string as well.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> body <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tbody <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> body\n\n\t<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token keyword control-flow\">return</span> body\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>say<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// function handler({ body }) { ... }</span>\n</code></pre>\n<p>Did you catch that?</p>\n<p>We know that the handler function use a body and now we can programmatically extract it from the function. And with <code>toString()</code> we can somehow get the code in a <code>string</code> form.</p>\n<p>If we could somehow have a parser that could read the parameters that user need…</p>\n<p>That is exactly what Sucrose is.</p>\n<hr>\n<h2 id=\"elysia-can-read-your-code\">Elysia can read your code<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#elysia-can-read-your-code\"></a></h2>\n<p>Sucrose is a nick name for a code parser.</p>\n<p>It is a pattern-matching using partial AST parser that extract the necessary information from the handler function.</p>\n<p>This is known as <strong>Static Code Analysis</strong>.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">sucrose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  handler<span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span>lifeCycle<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// { body: true }</span>\n</code></pre>\n<p>Sucrose takes a function, and other life cycle function, and determine what might be used in the handler function.</p>\n<p>Since Elysia handler take a function with exactly one parameter, we can view it as a DSL on top of JavaScript that user are not aware of.</p>\n<p>Since we control the DSL, we can just narrow down the spec of JavaScript to a very small subset of feature that we are going to use.</p>\n<p>And that is what Sucrose does.</p>\n<p>Sucrose tells us which property is need for the handler function.</p>\n<hr>\n<h2 id=\"putting-it-together\">Putting it together<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#putting-it-together\"></a></h2>\n<p>From the information we get from Sucrose, we can use <code>eval</code> to conditionally create a context based on what user need.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> inference <span class=\"token operator\">=</span> <span class=\"token function\">sucrose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  handler<span class=\"token punctuation\">,</span>\n  <span class=\"token spread operator\">...</span>lifeCycle<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> fn <span class=\"token operator\">=</span> <span class=\"token string\">\"const context = {\"</span>\n\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>inference<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span><span class=\"token punctuation\">)</span> fn <span class=\"token operator\">+=</span> <span class=\"token string\">\"body: await parseBody(body)\\n\"</span>\n\nfn <span class=\"token operator\">+=</span> <span class=\"token string\">\"}\"</span>\nfn <span class=\"token operator\">+=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">return handler(context)</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"context\"</span><span class=\"token punctuation\">,</span> fn<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>This is a very simple example of how it works.</p>\n<p>There are a lot of other things that we need to consider like error handling, async function, etc. But the idea is the same.</p>\n<hr>\n<h2 id=\"compile-time-optimization\">Compile time optimization<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#compile-time-optimization\"></a></h2>\n<p>If you wrote C before, you might know that if you have a fixed size array and perform a loop, the compiler will optimize it by not using the array, but call the function directly instead.</p>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The compiler will turn the code into:</p>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ... n time</span>\n<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Becauase even though the array is fixed, the compiler can determine the value of the array at compile time.</p>\n<p>In JavaScript, iterator also has (a tiny bit of) overhead, but if we know the value at compile time, we remove that overhead.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> lifecycle <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  beforeHandle<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>someFn<span class=\"token punctuation\">,</span> someOtherFn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  afterHandle<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>If we know that <code>beforeHandler</code> is always going to be empty, we can optimize it by not calling it at all.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// From</span>\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>lifecycle<span class=\"token punctuation\">.</span><span class=\"token property-access\">beforeHandle</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> fn <span class=\"token keyword\">of</span> lifecycle<span class=\"token punctuation\">.</span><span class=\"token property-access\">beforeHandle</span><span class=\"token punctuation\">)</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>lifecycle<span class=\"token punctuation\">.</span><span class=\"token property-access\">afterHandle</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword control-flow\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> fn <span class=\"token keyword\">of</span> lifecycle<span class=\"token punctuation\">.</span><span class=\"token property-access\">afterHandle</span><span class=\"token punctuation\">)</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// To</span>\nlifeCycle<span class=\"token punctuation\">.</span><span class=\"token property-access\">beforeHandler</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\nlifeCycle<span class=\"token punctuation\">.</span><span class=\"token property-access\">beforeHandler</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>It is a very small optimization, but it is a small optimization like this that people often overlook.</p>\n<p>An accumulation of small optimization can lead to a big performance gain.</p>\n<p>These are kind of optimization that a compiler can does, and what Sucrose does is a very simple version of that.</p>\n<hr>\n<h2 id=\"tracing\">Tracing<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tracing\"></a></h2>\n<p><a href=\"https://saltyaom.com/blog/elysia-sucrose/jaeger.webp\">Jaeger showing collected Telemetry</a></p>\n<p>Elysia also provide a tracing feature that allow you to see what is going on in your application.</p>\n<p>This is only possible through the use <code>eval</code></p>\n<p>Between each line/lifecycle, we can insert a tracing function that log what is going on, and measure the time it takes to execute.</p>\n<p>This is a very powerful tool to see what is going on in your application, and this leads to better understanding of your application and how to optimize it.</p>\n<p>This is how Elysia provide a support for an accurate OpenTelemetry out of the box without any overhead if you do not use it (which is likely impossible for others).</p>\n<hr>\n<h2 id=\"the-drawback\">The drawback<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-drawback\"></a></h2>\n<p><code>eval</code> is a very powerful tool, and with great power comes great responsibility. If you are not careful, you can easily shoot yourself in the foot.</p>\n<p>I usually says that <code>eval</code> is a trade off between performance and maintainability. It is significantly harder to debug, and maintain as a maintainer.</p>\n<p><code>ajv</code> has been using <code>eval</code> for a long time, and it is one of the fastest schema validator out there and the industry relies on it. Elysia also does the same, but just in a bigger scale.</p>\n<p>The only tradeoff for end user is a slight increase in bundle size, and slightly slower startup time but the performance gain is significant.</p>\n<p>It is a trade off, but it is a trade off that we are willing to take.</p>\n<p>Since Elysia handler can be optimized at compile time, it is significantly faster than other framework.</p>\n<p>The compile time in this case is also a Just In Time Compilation (JIT) as it only compile the code that is going to be used when the handler is called, once. And it take less than a millisecond to compile.</p>\n<p>We have been using this since Elysia 0.3 and we have not encounter any critical problem.</p>\n<p>We also published <a href=\"https://dl.acm.org/doi/abs/10.1145/3605098.3636068\">an academic paper to ACM (Association for Computing Machinery)</a> about this topic, and it is well received.</p>\n<hr>\n<h2 id=\"but-why\">But why<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#but-why\"></a></h2>\n<p>The framework is a foundation of your application.</p>\n<p>If the foundation is slow, the whole application is going to be slow regardless of your code.</p>\n<p>Elysia is designed from the very first to be fast.</p>\n<p>We do not want to compromise performance for convenience.</p>\n<p>It is a hard problem but I think we are getting somewhere.</p>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}