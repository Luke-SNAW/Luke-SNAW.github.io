{"pageProps":{"note":{"id":"iobm3jmimhpok244jve1s4r","title":"10 Advanced TypeScript Tips for Development","desc":"","updated":1674001801632,"created":1674000422536,"custom":{},"fname":"dev.typescript.10-advanced-typescript-tips-for-development","type":"note","vault":{"fsPath":"vault"},"contentHash":"d13b77923218f409ebc38cb2ccbf63a6","links":[],"anchors":{"1-keyof":{"type":"header","text":"1. keyof","value":"1-keyof","line":10,"column":0,"depth":2},"2-required--partial--pick":{"type":"header","text":"2. Required & Partial & Pick","value":"2-required--partial--pick","line":48,"column":0,"depth":2},"3-condition-type":{"type":"header","text":"3. Condition Type","value":"3-condition-type","line":80,"column":0,"depth":2},"4-never--exclude--omit":{"type":"header","text":"4. never & Exclude & Omit","value":"4-never--exclude--omit","line":95,"column":0,"depth":2},"5-typeof":{"type":"header","text":"5. typeof","value":"5-typeof","line":122,"column":0,"depth":2},"6-is":{"type":"header","text":"6. is","value":"6-is","line":151,"column":0,"depth":2},"7-interface--type":{"type":"header","text":"7. interface & type","value":"7-interface--type","line":205,"column":0,"depth":2},"8-record--dictionary--many":{"type":"header","text":"8. Record & Dictionary & Many","value":"8-record--dictionary--many","line":240,"column":0,"depth":2},"9-maintaining-the-const-table-with-const-enum":{"type":"header","text":"9. Maintaining the const table with const enum","value":"9-maintaining-the-const-table-with-const-enum","line":263,"column":0,"depth":2},"10-vs-code-tips--typescript-command":{"type":"header","text":"10. VS Code Tips & Typescript Command","value":"10-vs-code-tips--typescript-command","line":287,"column":0,"depth":2}},"children":[],"parent":"2ijeu1j04o0qzmy7hzk1tlb","data":{}},"body":"<h1 id=\"10-advanced-typescript-tips-for-development\">10 Advanced TypeScript Tips for Development<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#10-advanced-typescript-tips-for-development\"></a></h1>\n<blockquote>\n<p><a href=\"https://levelup.gitconnected.com/10-advanced-typescript-tips-for-development-2666298d50f\">https://levelup.gitconnected.com/10-advanced-typescript-tips-for-development-2666298d50f</a></p>\n</blockquote>\n<h2 id=\"1-keyof\">1. keyof<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-keyof\"></a></h2>\n<p><code>keyof</code> is slightly similar to <code>Object.keys</code>, except that <code>keyof</code> takes the keys of the interface.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Point</span></span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// type keys = \"x\" | \"y\"</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">keys</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">keyof</span> <span class=\"token maybe-class-name\">Point</span>\n</code></pre>\n<p>Suppose we have an <code>object</code> as shown below and we need to implement a <code>get</code> function using typescript to get the value of its properties.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  hello<span class=\"token operator\">:</span> <span class=\"token string\">\"max\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> o<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>We might have written it that way at first, but it has many drawbacks:</p>\n<ol>\n<li>Unable to confirm the return type: this will lose ts’ maximum type-checking capability</li>\n<li>Unable to constrain the key: may commit a spelling error</li>\n</ol>\n<p>In this case, you can use <code>keyof</code> to enhance the <code>type</code> function of the <code>get</code> function, for those who are interested, see the type tag of <code>_.get</code> and its implementation.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> o<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"2-required--partial--pick\">2. Required &#x26; Partial &#x26; Pick<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-required--partial--pick\"></a></h2>\n<p>Now that you know the <code>keyof</code>, you can use it to do some extensions to the properties, such as implementing <code>Partial</code> and <code>Pick</code>, <code>Pick</code> is generally used in <code>_.pick</code></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Partial</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Required</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Pick</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">P</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Equivalent to: type PartialUser = { id?: number; age?: number; name?: string; }</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">PartialUser</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Partial</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">User</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// Equivalent to: type PickUser = { id: number; age: number; }</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">PickUser</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Pick</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"age\"</span><span class=\"token operator\">></span>\n</code></pre>\n<p>These types are built into Typescript.</p>\n<h2 id=\"3-condition-type\">3. Condition Type<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3-condition-type\"></a></h2>\n<p>It is similar to the ?: operator, you can use it to extend some basic types.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token constant\">X</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Y</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">isTrue<span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token comment\">// Equivalent to type t = false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">t</span> <span class=\"token operator\">=</span> isTrue<span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span>\n\n<span class=\"token comment\">// Equivalent to type t = false</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">t1</span> <span class=\"token operator\">=</span> isTrue<span class=\"token operator\">&#x3C;</span><span class=\"token boolean\">false</span><span class=\"token operator\">></span>\n</code></pre>\n<h2 id=\"4-never--exclude--omit\">4. never &#x26; Exclude &#x26; Omit<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#4-never--exclude--omit\"></a></h2>\n<p>the never type represents the type of values that never occur.</p>\n<p>There are many interesting and useful types that can be introduced by combining <code>never</code> and <code>conditional</code> type, such as <code>Omit</code></p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Exclude</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token constant\">U</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token comment\">// Equivalent to: type A = 'a'</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Exclude</span><span class=\"token operator\">&#x3C;</span><span class=\"token string\">\"x\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"x\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"y\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"z\"</span><span class=\"token operator\">></span>\n</code></pre>\n<p>In combination with <code>Exclude</code>, we can introduce Omit’s writing style</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Omit</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Pick</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Exclude</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">User</span></span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Equivalent to: type PickUser = { age: number; name: string; }</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">OmitUser</span></span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">Omit</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">User</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span><span class=\"token operator\">></span>\n</code></pre>\n<h2 id=\"5-typeof\">5. typeof<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#5-typeof\"></a></h2>\n<p>As the name implies, typeof represents a type that takes a certain value, and the following examples show their usage</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token comment\">// Equivalent to: const b: number = 4</span>\n<span class=\"token keyword\">const</span> b<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> a <span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n</code></pre>\n<p>In a typical server-side project, we often need to stuff some tools into the <code>context</code>, such as config, logger, db models, utils, etc., and then use <code>typeof</code>.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">import</span> <span class=\"token imports\">logger</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./logger\"</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\">utils</span> <span class=\"token keyword module\">from</span> <span class=\"token string\">\"./utils\"</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Context</span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">KoaContect</span></span> <span class=\"token punctuation\">{</span>\n  logger<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> logger\n  utils<span class=\"token operator\">:</span> <span class=\"token keyword\">typeof</span> utils\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ctx<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Context</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">logger</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// will return an error because this method is not exposed in logger.ts, which minimizes spelling errors</span>\n  ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">loger</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, world\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"6-is\">6. is<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#6-is\"></a></h2>\n<p>Before that, let’s look at a <code>koa</code> error handling process. Here is the process of centralizing the <code>error</code> handling and identifying the <code>code</code></p>\n<pre class=\"language-ts\"><code class=\"language-ts\">app<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">await</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> code <span class=\"token operator\">=</span> <span class=\"token string\">\"BAD_REQUEST\"</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span><span class=\"token property-access\">isAxiosError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      code <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Axios-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Sequelize</span></span><span class=\"token punctuation\">.</span><span class=\"token known-class-name class-name\">BaseError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    ctx<span class=\"token punctuation\">.</span><span class=\"token property-access\">body</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      code<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>At <code>err.code</code>, it will compile with an error that Property <code>‘code’</code> does not exist on type <code>‘Error’.ts(2339)</code>.<br>\nIn this case, you can use <code>as AxiosError</code> or <code>as any</code> to avoid the error, but forced type conversion is not friendly enough!</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err <span class=\"token keyword module\">as</span> <span class=\"token known-class-name class-name\">AxiosError</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">isAxiosError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  code <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Axios-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span>err <span class=\"token keyword module\">as</span> <span class=\"token known-class-name class-name\">AxiosError</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>In this case, you can use is to determine the type of the value.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">isAxiosError</span><span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> error <span class=\"token keyword\">is</span> <span class=\"token known-class-name class-name\">AxiosError</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> error<span class=\"token punctuation\">.</span><span class=\"token property-access\">isAxiosError</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isAxiosError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  code <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Axios-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>err<span class=\"token punctuation\">.</span><span class=\"token property-access\">code</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>In the GraphQL source code, there are many such uses to identify types.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isType</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token keyword\">is</span></span> <span class=\"token maybe-class-name\">GraphQLType</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isScalarType</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token keyword\">is</span></span> <span class=\"token maybe-class-name\">GraphQLScalarType</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isObjectType</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token keyword\">is</span></span> <span class=\"token maybe-class-name\">GraphQLObjectType</span>\n\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">isInterfaceType</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token keyword\">is</span></span> <span class=\"token maybe-class-name\">GraphQLInterfaceType</span>\n</code></pre>\n<h2 id=\"7-interface--type\">7. interface &#x26; type<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#7-interface--type\"></a></h2>\n<p>What is the difference between interface and type? You can refer <a href=\"https://stackoverflow.com/questions/37233735/interfaces-vs-types-in-typescript\">here</a>.</p>\n<p>The difference between interface and type is very small, for example, the following two ways of writing are similar.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">B</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The <code>interface</code> can be merged as follows, while the <code>type</code> can only be linked using the &#x26; class.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">A</span></span> <span class=\"token punctuation\">{</span>\n  b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> a<span class=\"token operator\">:</span> <span class=\"token constant\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"8-record--dictionary--many\">8. Record &#x26; Dictionary &#x26; Many<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#8-record--dictionary--many\"></a></h2>\n<p>These syntactic sugars are learned from the types source code of <code>lodash</code>, and are usually used quite frequently in the workplace.</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Record</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">Dictionary</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token maybe-class-name\">NumericDictionary</span><span class=\"token operator\">&#x3C;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> data<span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Dictionary</span><span class=\"token operator\">&#x3C;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"9-maintaining-the-const-table-with-const-enum\">9. Maintaining the const table with const enum<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#9-maintaining-the-const-table-with-const-enum\"></a></h2>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token maybe-class-name\">Use</span> objects to maintain consts\n<span class=\"token keyword\">const</span> <span class=\"token constant\">TODO_STATUS</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">TODO</span><span class=\"token operator\">:</span> <span class=\"token string\">'TODO'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">DONE</span><span class=\"token operator\">:</span> <span class=\"token string\">'DONE'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">DOING</span><span class=\"token operator\">:</span> <span class=\"token string\">'DOING'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Maintaining constants with const enum</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">enum</span> <span class=\"token constant\">TODO_STATUS</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">TODO</span> <span class=\"token operator\">=</span> <span class=\"token string\">'TODO'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">DONE</span> <span class=\"token operator\">=</span> <span class=\"token string\">'DONE'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">DOING</span> <span class=\"token operator\">=</span> <span class=\"token string\">'DOING'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">todos</span> <span class=\"token punctuation\">(</span>status<span class=\"token operator\">:</span> <span class=\"token constant\">TODO_STATUS</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token maybe-class-name\">Todo</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">todos</span><span class=\"token punctuation\">(</span><span class=\"token constant\">TODO_STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TODO</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p><a href=\"https://swizec.com/blog/stop-shouting-shouting/\">Stop SHOUTING = 'shouting'</a></p>\n</blockquote>\n<h2 id=\"10-vs-code-tips--typescript-command\">10. VS Code Tips &#x26; Typescript Command<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#10-vs-code-tips--typescript-command\"></a></h2>\n<p>Sometimes with VS Code, the issues that arise when compiling with <code>tsc</code> do not match the issues prompted by vs code\nFind the words <code>Typescript</code> in the bottom right corner of the project, the version number is shown on the right side, you can click on it and select <code>Use Workspace Version</code>, it means that it is always the same as the <code>typescript</code> version that the project depends on.</p>\n<p>Or edit .<code>vs-code/settings.json</code></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"typescript.tsdk\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node_modules/typescript/lib\"</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>In short, TypeScript increases the readability and maintainability of code and makes our development more elegant.</p>","noteIndex":{"id":"Iy0MoL0KnL55Br3AfTS2C","title":"Luke","desc":"","updated":1761796791487,"created":1644449449778,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"4e745570ca97988a0362cb939b760952","links":[{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"life-tips","position":{"start":{"line":41,"column":5,"offset":2603},"end":{"line":41,"column":29,"offset":2627},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"life-tips","anchorHeader":"wodenokoto"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2025","alias":"What I read in 2025","position":{"start":{"line":70,"column":3,"offset":4333},"end":{"line":70,"column":54,"offset":4384},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2025"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2024","alias":"2024","position":{"start":{"line":71,"column":5,"offset":4389},"end":{"line":71,"column":41,"offset":4425},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2024"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2023","alias":"2023","position":{"start":{"line":72,"column":5,"offset":4430},"end":{"line":72,"column":41,"offset":4466},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2023"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-read-in.2022","alias":"2022","position":{"start":{"line":73,"column":5,"offset":4471},"end":{"line":73,"column":41,"offset":4507},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-read-in.2022"}},{"type":"wiki","from":{"fname":"root","id":"Iy0MoL0KnL55Br3AfTS2C","vaultName":"vault"},"value":"journal.what-i-struggled-brag-in","position":{"start":{"line":79,"column":3,"offset":4643},"end":{"line":79,"column":39,"offset":4679},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"journal.what-i-struggled-brag-in"}}],"anchors":{"what-i-read-in-past":{"type":"header","text":"What I read in past","value":"what-i-read-in-past","line":74,"column":0,"depth":2}},"children":["zd4mq442jike0pr0wba1u3m","6hzeqsofq67gdk88flxlkhp","778ijii93yu5uwnrwmn5zi4","g1fngdjl25nes6fs3lip602","ZbdkdApFqLdks4Moq92R9","uoc5hhki3o4py15cesddu8q","9qf7j06jtdkm6rnx9ymvwb0","5zn10cvj7ajy2gh2is5nqmg","4qo9ma0z0yu1czns6pxl7y5","ok0e729ho7o09xetujkxc0m","GR5x8HnNFEN6fU2UBSEIK","yirtnlj8q24yutcf3ss1xqy","eq0wc6t7wl2wv221yb68ro4","7x2fnv4j6gxts08qk0jguny","ettkt3iClONnxpbGwBVLl","7l4knev6v613tbuoskvmbdg","hvh5bud6yp7dc89tuh95tr9","4fvoqrplw0cweo554usbjos","f8qsfql0a9v8thpeo82udfa","1swsbrhqi9jk41v9eodyi5q","SQqYupi6EFddTerBA8RRD","hjNeNc1F2JUh0lTWanH4h","qf0l4wbrc9jgooyzexmbq5v","uur1lkol353z9vfeqb3n5bv","cd9n1czq3ursgkby985wkmm","k1sr43vwnfqztwc0s43pkcf","wfde75rhdvq2yfa2zy2q6rv","rjcmdv60jokmbw6zoq8u2ef","ujapvww8o6v3kpmlhtryq4k","pkwewou9d5e8ystswn1j2b4"],"parent":null,"data":{},"body":"\nHi there 👋. I'm a Front-end developer.\n\n---\n\n- 단순함과 꾸준함은 가장 쉬우면서도 지키기 어려운 원칙.\n\n- 🥱 -> 🤔💡🌱 - [On The Death of Daydreaming](https://www.afterbabel.com/p/on-the-death-of-daydreaming)\n  - boredom -> easy fun -> art -> profit?\n\n> I've often described my motivation for building software to others using imagery: I like to go find a secluded beach, build a large, magnificent sand castle, and then walk away. Will anyone notice? Probably not. Will the waves eventually destroy it? Yep. Did I still get immense satisfaction? Absolutely. - [aliasxneo](https://news.ycombinator.com/item?id=41497113)\n\n> We love to see the process, not just the result. The imperfections in your work can be beautiful if they show your struggle for perfection, not a lack of care. - [ralphammer](https://ralphammer.com/is-perfection-boring/)\n\n> Simplicity, even if it sacrifices some ideal functionality has better survival characteristics than the-right-thing. - [The Rise of Worse is Better](https://www.dreamsongs.com/RiseOfWorseIsBetter.html)\n\n> [Roberto Blake was talking about making 100 crappy videos](https://www.youtube.com/watch?v=OnUBaQ1Sp_E) to get better over time. Putting in the reps and improving a little bit each time.\n>\n> Putting in the work without expecting any external reward at first (eg views, followers, likes, etc) will pay off in the long run. - [100 Scrappy Things](https://www.florin-pop.com/blog/100-scrappy-things/)\n\n> Make the difficult habitual, the habitual easy, and the easy beautiful. - [Constantin S. Stanislavski](https://www.goodreads.com/quotes/7102271-make-the-difficult-habitual-the-habitual-easy-and-the-easy)\n\n> A good match is a **structured** dance, where players aim to **score** while they are following well-defined **rules**. This **freedom within a structure** is what makes it fun. - [ralphammer](https://ralphammer.com/how-to-get-started/)\n\n- [Pivot Points](https://longform.asmartbear.com/pivot-points/)\n\n  - non-judgmental aspects of personality that can be strengths in some contexts and weaknesses in others\n  - Pivot Points are fixed in the short term\n\n- [Hedged Bets](https://longform.asmartbear.com/predict-the-future/#hedged-bets)\n  - trading slightly less maximum upside for predictable, net-positive outcomes.\n\n> “Motivation often comes after starting, not before. Action produces momentum.”\n> [When you start a new habit, it should take less than two minutes to do.](https://jamesclear.com/how-to-stop-procrastinating)\n>\n> - James Clear\n\n> Focus is more about **not** keeping busy when you need to wait for something.  \n> Eat the boredom for a minute.\n>\n> - [[life-tips#wodenokoto]]\n\n> [4 minutes run hard enough to push heart rate to 90%, 3 minutes recover, repeat 4 times](https://news.ycombinator.com/item?id=34213181)\n>\n> - https://www.ntnu.edu/cerg/advice\n> - [Get running with Couch to 5K](https://www.nhs.uk/live-well/exercise/running-and-aerobic-exercises/get-running-with-couch-to-5k/)\n\n> [recommended routine - bodyweightfitness](https://www.reddit.com/r/bodyweightfitness/wiki/kb/recommended_routine/) - I Don't Have This Much Time!\n>\n> - Don't workout at all (saves anywhere from 20 to 60 minutes, but really, really, really, really, really, really, really, really, really not recommended)\n\n> 도무지 읽히지 않는 책 앞에서 내가 택한 방법은 펼쳐진 페이지 앞에서 멍때리기이다. 다르게 표현하면 이렇다. 펼쳐진 두 페이지 앞에서 오래 머물기.\n>\n> 책을 펼쳐놓는 것으로 충분하다. 읽지 못해도 좋다. 매일 정해진 진도를 나가야 하는 학교 수업이 아니니까. 하지만 읽지 않아도 괜찮다고 해서 펼쳐두지조차 않으면 곤란하다. 가능한 한 자주 책을 펼쳐두도록 하자. 전혀 읽지 않고 멍하니 바라보고 있다가 다시 덮게 되더라도\n>\n> - 막막한 독서. 시로군. P.10~13\n\n> I think it should be everyone's primary focus to sleep well, drink water, get outside, get active, and eat generally decently. I hate to say it, but if you're not eating a good amount of vegetables and fruit, decent protein, sleep, etc, no amount of XYZ will catch up to that detriment. - [CE02](https://news.ycombinator.com/item?id=35056071)\n\n> My real battle is doing good versus doing nothing. - [Deirdre Sullivan](https://www.npr.org/2005/08/08/4785079/always-go-to-the-funeral)\n\n[Kind Engineering](https://kind.engineering/) - How To Engineer Kindness\n\n> Sometimes magic is just someone spending more time on something than anyone else might reasonably expect. - [Teller](https://www.goodreads.com/quotes/6641527-sometimes-magic-is-just-someone-spending-more-time-on-something)\n\n---\n\n## What I read in past\n\n- [[What I read in 2025|journal.what-i-read-in.2025]]\n  - [[2024|journal.what-i-read-in.2024]]\n  - [[2023|journal.what-i-read-in.2023]]\n  - [[2022|journal.what-i-read-in.2022]]\n- 📝 [Gists](https://gist.github.com/Luke-SNAW)\n- 📜 [Journals](https://luke-snaw.github.io/Luke-SNAW__netlify-CMS.github.io/)\n\n---\n\n- [[journal.what-i-struggled-brag-in]]\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":false,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"dendronVersion":"0.115.0","enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Luke SNAW","description":"Personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://luke-snaw.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}